// Minimal code generator for bootstrap - generates C code from AST
// Uses global state from parser_minimal.pd

// Constants
const MAX_OUTPUT: i64 = 200000;
const MAX_INDENT: i64 = 50;

// External globals from parser
extern {
    let AST_NODES: [ASTNode; MAX_AST_NODES];
    let AST_NODE_COUNT: i64;
    fn get_string_from_table(offset: i64) -> String;
}

// Global output state
let mut OUTPUT: [i64; MAX_OUTPUT] = [0; MAX_OUTPUT];
let mut OUTPUT_POS: i64 = 0;
let mut INDENT_LEVEL: i64 = 0;

// Add string to output
fn emit(s: String) {
    let len = string_len(s);
    let mut i = 0;
    while i < len && OUTPUT_POS < MAX_OUTPUT {
        OUTPUT[OUTPUT_POS] = string_char_at(s, i);
        OUTPUT_POS = OUTPUT_POS + 1;
        i = i + 1;
    }
}

// Add character to output
fn emit_char(ch: i64) {
    if OUTPUT_POS < MAX_OUTPUT {
        OUTPUT[OUTPUT_POS] = ch;
        OUTPUT_POS = OUTPUT_POS + 1;
    }
}

// Add newline
fn emit_newline() {
    emit_char(10); // '\n'
}

// Add indentation
fn emit_indent() {
    let mut i = 0;
    while i < INDENT_LEVEL {
        emit("    ");
        i = i + 1;
    }
}

// Convert output array to string
fn get_output() -> String {
    let mut result = "";
    let mut i = 0;
    while i < OUTPUT_POS {
        result = string_concat(result, string_from_char(OUTPUT[i]));
        i = i + 1;
    }
    return result;
}

// Map Palladium types to C types
fn emit_c_type(node_id: i64) {
    let node = AST_NODES[node_id];
    
    if node.type == AST_TYPE_I64 {
        emit("long long");
    } else if node.type == AST_TYPE_I32 {
        emit("int");
    } else if node.type == AST_TYPE_BOOL {
        emit("int");
    } else if node.type == AST_TYPE_STRING {
        emit("const char*");
    } else if node.type == AST_TYPE_CUSTOM {
        emit(get_string_from_table(node.value));
    } else if node.type == AST_TYPE_ARRAY {
        // For arrays, emit element type
        if node.child_count > 0 {
            emit_c_type(node.children[0]);
        } else {
            emit("long long");
        }
    } else {
        emit("void");
    }
}

// Forward declaration
fn generate_expression(node_id: i64);
fn generate_statement(node_id: i64);

// Generate binary operator
fn emit_binop(op: i64) {
    if op == TOK_PLUS {
        emit(" + ");
    } else if op == TOK_MINUS {
        emit(" - ");
    } else if op == TOK_STAR {
        emit(" * ");
    } else if op == TOK_SLASH {
        emit(" / ");
    } else if op == TOK_PERCENT {
        emit(" % ");
    } else if op == TOK_EQEQ {
        emit(" == ");
    } else if op == TOK_NE {
        emit(" != ");
    } else if op == TOK_LT {
        emit(" < ");
    } else if op == TOK_GT {
        emit(" > ");
    } else if op == TOK_LE {
        emit(" <= ");
    } else if op == TOK_GE {
        emit(" >= ");
    } else if op == TOK_AMPAMP {
        emit(" && ");
    } else if op == TOK_PIPEPIPE {
        emit(" || ");
    }
}

// Generate expression
fn generate_expression(node_id: i64) {
    if node_id < 0 || node_id >= AST_NODE_COUNT {
        return;
    }
    
    let node = AST_NODES[node_id];
    
    if node.type == AST_EXPR_NUMBER {
        emit(int_to_string(node.value));
    } else if node.type == AST_EXPR_STRING {
        emit("\"");
        emit(get_string_from_table(node.value));
        emit("\"");
    } else if node.type == AST_EXPR_BOOL {
        if node.value == 0 {
            emit("0");
        } else {
            emit("1");
        }
    } else if node.type == AST_EXPR_IDENT {
        emit(get_string_from_table(node.value));
    } else if node.type == AST_EXPR_BINARY {
        emit("(");
        if node.child_count >= 2 {
            generate_expression(node.children[0]);
            emit_binop(node.value);
            generate_expression(node.children[1]);
        }
        emit(")");
    } else if node.type == AST_EXPR_UNARY {
        if node.value == TOK_BANG {
            emit("!(");
        } else if node.value == TOK_MINUS {
            emit("-(");
        }
        if node.child_count > 0 {
            generate_expression(node.children[0]);
        }
        emit(")");
    } else if node.type == AST_EXPR_CALL {
        if node.child_count > 0 {
            let func_node = AST_NODES[node.children[0]];
            let func_name = get_string_from_table(func_node.value);
            
            // Map built-in functions
            if func_name == "print" {
                emit("__pd_print");
            } else if func_name == "print_int" {
                emit("__pd_print_int");
            } else if func_name == "string_len" {
                emit("__pd_string_len");
            } else if func_name == "string_concat" {
                emit("__pd_string_concat");
            } else if func_name == "string_char_at" {
                emit("__pd_string_char_at");
            } else if func_name == "string_from_char" {
                emit("__pd_string_from_char");
            } else if func_name == "int_to_string" {
                emit("__pd_int_to_string");
            } else if func_name == "file_open" {
                emit("__pd_file_open");
            } else if func_name == "file_read_all" {
                emit("__pd_file_read_all");
            } else if func_name == "file_write" {
                emit("__pd_file_write");
            } else if func_name == "file_close" {
                emit("__pd_file_close");
            } else {
                emit(func_name);
            }
            
            emit("(");
            
            // Arguments start at index 1
            let mut i = 1;
            while i < node.child_count {
                if i > 1 {
                    emit(", ");
                }
                generate_expression(node.children[i]);
                i = i + 1;
            }
            
            emit(")");
        }
    } else if node.type == AST_EXPR_INDEX {
        if node.child_count >= 2 {
            generate_expression(node.children[0]);
            emit("[");
            generate_expression(node.children[1]);
            emit("]");
        }
    } else if node.type == AST_EXPR_FIELD {
        if node.child_count > 0 {
            generate_expression(node.children[0]);
            emit(".");
            emit(get_string_from_table(node.value));
        }
    } else if node.type == AST_EXPR_ARRAY {
        emit("{");
        let mut i = 0;
        while i < node.child_count {
            if i > 0 {
                emit(", ");
            }
            generate_expression(node.children[i]);
            i = i + 1;
        }
        emit("}");
    }
}

// Generate statement
fn generate_statement(node_id: i64) {
    if node_id < 0 || node_id >= AST_NODE_COUNT {
        return;
    }
    
    let node = AST_NODES[node_id];
    
    if node.type == AST_STMT_LET {
        emit_indent();
        
        // Type
        if node.child_count > 0 {
            emit_c_type(node.children[0]);
        } else {
            emit("long long");
        }
        emit(" ");
        
        // Name
        emit(get_string_from_table(node.value));
        
        // Initialization
        if node.child_count > 1 {
            emit(" = ");
            generate_expression(node.children[1]);
        }
        
        emit(";");
        emit_newline();
    } else if node.type == AST_STMT_ASSIGN {
        emit_indent();
        if node.child_count >= 2 {
            generate_expression(node.children[0]);
            emit(" = ");
            generate_expression(node.children[1]);
        }
        emit(";");
        emit_newline();
    } else if node.type == AST_STMT_RETURN {
        emit_indent();
        emit("return");
        if node.child_count > 0 {
            emit(" ");
            generate_expression(node.children[0]);
        }
        emit(";");
        emit_newline();
    } else if node.type == AST_STMT_EXPR {
        emit_indent();
        if node.child_count > 0 {
            generate_expression(node.children[0]);
        }
        emit(";");
        emit_newline();
    } else if node.type == AST_STMT_IF {
        emit_indent();
        emit("if (");
        if node.child_count > 0 {
            generate_expression(node.children[0]);
        }
        emit(") {");
        emit_newline();
        
        INDENT_LEVEL = INDENT_LEVEL + 1;
        
        // Find else marker
        let mut else_start = -1;
        let mut i = 1;
        while i < node.child_count {
            let child = AST_NODES[node.children[i]];
            if child.type == AST_PROGRAM && child.value == -1 {
                else_start = i + 1;
                break;
            }
            generate_statement(node.children[i]);
            i = i + 1;
        }
        
        INDENT_LEVEL = INDENT_LEVEL - 1;
        emit_indent();
        emit("}");
        
        // Generate else block if present
        if else_start > 0 {
            emit(" else {");
            emit_newline();
            INDENT_LEVEL = INDENT_LEVEL + 1;
            
            let mut j = else_start;
            while j < node.child_count {
                generate_statement(node.children[j]);
                j = j + 1;
            }
            
            INDENT_LEVEL = INDENT_LEVEL - 1;
            emit_indent();
            emit("}");
        }
        
        emit_newline();
    } else if node.type == AST_STMT_WHILE {
        emit_indent();
        emit("while (");
        if node.child_count > 0 {
            generate_expression(node.children[0]);
        }
        emit(") {");
        emit_newline();
        
        INDENT_LEVEL = INDENT_LEVEL + 1;
        
        let mut i = 1;
        while i < node.child_count {
            generate_statement(node.children[i]);
            i = i + 1;
        }
        
        INDENT_LEVEL = INDENT_LEVEL - 1;
        emit_indent();
        emit("}");
        emit_newline();
    } else if node.type == AST_STMT_FOR {
        emit_indent();
        emit("for (long long ");
        
        if node.child_count >= 2 {
            // Variable name
            let var_node = AST_NODES[node.children[0]];
            emit(get_string_from_table(var_node.value));
            
            // Assume simple range for now
            emit(" = 0; ");
            emit(get_string_from_table(var_node.value));
            emit(" < ");
            generate_expression(node.children[1]);
            emit("; ");
            emit(get_string_from_table(var_node.value));
            emit("++) {");
            emit_newline();
            
            INDENT_LEVEL = INDENT_LEVEL + 1;
            
            let mut i = 2;
            while i < node.child_count {
                generate_statement(node.children[i]);
                i = i + 1;
            }
            
            INDENT_LEVEL = INDENT_LEVEL - 1;
            emit_indent();
            emit("}");
            emit_newline();
        }
    }
}

// Generate function
fn generate_function(node_id: i64) {
    let node = AST_NODES[node_id];
    
    // Return type
    let mut has_return_type = false;
    let mut return_type_idx = -1;
    let mut params_end = node.child_count;
    
    // Find return type (it's after params)
    let mut i = 0;
    while i < node.child_count {
        let child = AST_NODES[node.children[i]];
        if child.type == AST_TYPE_I64 || child.type == AST_TYPE_I32 || 
           child.type == AST_TYPE_BOOL || child.type == AST_TYPE_STRING || 
           child.type == AST_TYPE_CUSTOM || child.type == AST_TYPE_ARRAY {
            return_type_idx = i;
            params_end = i;
            has_return_type = true;
            break;
        }
        i = i + 1;
    }
    
    // Function signature
    if has_return_type && return_type_idx >= 0 {
        emit_c_type(node.children[return_type_idx]);
    } else {
        emit("void");
    }
    emit(" ");
    
    let func_name = get_string_from_table(node.value);
    if func_name == "main" {
        emit("main");
    } else {
        emit(func_name);
    }
    
    emit("(");
    
    // Parameters
    let mut param_count = 0;
    i = 0;
    while i < params_end {
        let child = AST_NODES[node.children[i]];
        if child.type == AST_PARAM {
            if param_count > 0 {
                emit(", ");
            }
            
            // Parameter type
            if child.child_count > 0 {
                emit_c_type(child.children[0]);
            } else {
                emit("long long");
            }
            emit(" ");
            
            // Parameter name
            emit(get_string_from_table(child.value));
            
            param_count = param_count + 1;
        }
        i = i + 1;
    }
    
    if param_count == 0 && func_name == "main" {
        // Special case for main
        emit("void");
    }
    
    emit(") {");
    emit_newline();
    
    INDENT_LEVEL = INDENT_LEVEL + 1;
    
    // Body (statements after return type)
    let body_start = params_end;
    if has_return_type {
        body_start = params_end + 1;
    }
    
    i = body_start;
    while i < node.child_count {
        generate_statement(node.children[i]);
        i = i + 1;
    }
    
    // Add return 0 for main if needed
    if func_name == "main" {
        emit_indent();
        emit("return 0;");
        emit_newline();
    }
    
    INDENT_LEVEL = INDENT_LEVEL - 1;
    emit("}");
    emit_newline();
    emit_newline();
}

// Generate struct
fn generate_struct(node_id: i64) {
    let node = AST_NODES[node_id];
    
    emit("typedef struct {");
    emit_newline();
    
    INDENT_LEVEL = INDENT_LEVEL + 1;
    
    let mut i = 0;
    while i < node.child_count {
        let field = AST_NODES[node.children[i]];
        if field.type == AST_FIELD {
            emit_indent();
            
            // Field type
            if field.child_count > 0 {
                emit_c_type(field.children[0]);
            } else {
                emit("long long");
            }
            emit(" ");
            
            // Field name
            emit(get_string_from_table(field.value));
            emit(";");
            emit_newline();
        }
        i = i + 1;
    }
    
    INDENT_LEVEL = INDENT_LEVEL - 1;
    emit("} ");
    emit(get_string_from_table(node.value));
    emit(";");
    emit_newline();
    emit_newline();
}

// Generate C headers and runtime
fn generate_headers() {
    emit("#include <stdio.h>\n");
    emit("#include <stdlib.h>\n");
    emit("#include <string.h>\n");
    emit("#include <ctype.h>\n\n");
    
    // Runtime functions
    emit("// Runtime functions\n");
    emit("void __pd_print(const char* s) { printf(\"%s\\n\", s); }\n");
    emit("void __pd_print_int(long long n) { printf(\"%lld\\n\", n); }\n");
    emit("long long __pd_string_len(const char* s) { return strlen(s); }\n");
    emit("const char* __pd_string_concat(const char* a, const char* b) {\n");
    emit("    char* r = malloc(strlen(a) + strlen(b) + 1);\n");
    emit("    strcpy(r, a); strcat(r, b); return r;\n");
    emit("}\n");
    emit("long long __pd_string_char_at(const char* s, long long i) {\n");
    emit("    if (i < 0 || i >= strlen(s)) return -1;\n");
    emit("    return (unsigned char)s[i];\n");
    emit("}\n");
    emit("const char* __pd_string_from_char(long long c) {\n");
    emit("    char* r = malloc(2); r[0] = c; r[1] = 0; return r;\n");
    emit("}\n");
    emit("const char* __pd_int_to_string(long long n) {\n");
    emit("    char* buf = malloc(32);\n");
    emit("    snprintf(buf, 32, \"%lld\", n);\n");
    emit("    return buf;\n");
    emit("}\n");
    
    // File I/O
    emit("\n// File I/O\n");
    emit("#define MAX_FILES 256\n");
    emit("static FILE* __pd_files[MAX_FILES] = {0};\n");
    emit("static int __pd_next_file = 1;\n");
    emit("long long __pd_file_open(const char* path) {\n");
    emit("    if (__pd_next_file >= MAX_FILES) return -1;\n");
    emit("    FILE* f = fopen(path, \"r+\");\n");
    emit("    if (!f) f = fopen(path, \"w+\");\n");
    emit("    if (!f) return -1;\n");
    emit("    int h = __pd_next_file++;\n");
    emit("    __pd_files[h] = f;\n");
    emit("    return h;\n");
    emit("}\n");
    emit("const char* __pd_file_read_all(long long h) {\n");
    emit("    if (h < 1 || h >= MAX_FILES || !__pd_files[h]) return \"\";\n");
    emit("    FILE* f = __pd_files[h];\n");
    emit("    fseek(f, 0, SEEK_END);\n");
    emit("    long size = ftell(f);\n");
    emit("    fseek(f, 0, SEEK_SET);\n");
    emit("    char* buf = malloc(size + 1);\n");
    emit("    fread(buf, 1, size, f);\n");
    emit("    buf[size] = 0;\n");
    emit("    return buf;\n");
    emit("}\n");
    emit("int __pd_file_write(long long h, const char* s) {\n");
    emit("    if (h < 1 || h >= MAX_FILES || !__pd_files[h]) return 0;\n");
    emit("    return fputs(s, __pd_files[h]) >= 0;\n");
    emit("}\n");
    emit("int __pd_file_close(long long h) {\n");
    emit("    if (h < 1 || h >= MAX_FILES || !__pd_files[h]) return 0;\n");
    emit("    FILE* f = __pd_files[h];\n");
    emit("    __pd_files[h] = NULL;\n");
    emit("    return fclose(f) == 0;\n");
    emit("}\n\n");
}

// Main code generation function
fn generate_code(root_id: i64) -> String {
    OUTPUT_POS = 0;
    INDENT_LEVEL = 0;
    
    generate_headers();
    
    // Generate all items
    let root = AST_NODES[root_id];
    let mut i = 0;
    while i < root.child_count {
        let child_id = root.children[i];
        let child = AST_NODES[child_id];
        
        if child.type == AST_FUNCTION {
            generate_function(child_id);
        } else if child.type == AST_STRUCT_DEF {
            generate_struct(child_id);
        }
        // Skip imports for now
        
        i = i + 1;
    }
    
    return get_output();
}