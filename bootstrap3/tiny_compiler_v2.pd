// Tiny Palladium Compiler v2 - Handles variables and expressions
// Building towards self-hosting

struct Compiler {
    source: [i64; 100000],
    source_len: i64,
    pos: i64,
    output: [i64; 200000],
    output_len: i64,
    // Variable tracking
    var_names: [[i64; 100]; 100],  // 100 variables, max 100 chars each
    var_types: [[i64; 20]; 100],   // Variable types as strings
    var_count: i64,
}

fn create_compiler(source: String) -> Compiler {
    let mut comp = Compiler {
        source: [0; 100000],
        source_len: string_len(source),
        pos: 0,
        output: [0; 200000],
        output_len: 0,
        var_names: [[0; 100]; 100],
        var_types: [[0; 20]; 100],
        var_count: 0,
    };
    
    // Copy source to array
    let mut i = 0;
    while i < comp.source_len {
        comp.source[i] = string_char_at(source, i);
        i = i + 1;
    }
    
    return comp;
}

fn emit_str(comp: &mut Compiler, s: String) {
    let len = string_len(s);
    let mut i = 0;
    while i < len && comp.output_len < 200000 {
        comp.output[comp.output_len] = string_char_at(s, i);
        comp.output_len = comp.output_len + 1;
        i = i + 1;
    }
}

fn emit_char(comp: &mut Compiler, ch: i64) {
    if comp.output_len < 200000 {
        comp.output[comp.output_len] = ch;
        comp.output_len = comp.output_len + 1;
    }
}

fn get_output(comp: &Compiler) -> String {
    let mut result = "";
    let mut i = 0;
    while i < comp.output_len {
        result = string_concat(result, string_from_char(comp.output[i]));
        i = i + 1;
    }
    return result;
}

fn skip_whitespace(comp: &mut Compiler) {
    while comp.pos < comp.source_len {
        let ch = comp.source[comp.pos];
        if ch == 32 || ch == 9 || ch == 10 || ch == 13 { // space, tab, LF, CR
            comp.pos = comp.pos + 1;
        } else if ch == 47 && comp.pos + 1 < comp.source_len && comp.source[comp.pos + 1] == 47 { // "//"
            comp.pos = comp.pos + 2;
            while comp.pos < comp.source_len && comp.source[comp.pos] != 10 {
                comp.pos = comp.pos + 1;
            }
        } else {
            break;
        }
    }
}

fn peek_char(comp: &Compiler) -> i64 {
    if comp.pos < comp.source_len {
        return comp.source[comp.pos];
    }
    return -1;
}

fn advance(comp: &mut Compiler) {
    if comp.pos < comp.source_len {
        comp.pos = comp.pos + 1;
    }
}

fn is_alpha(ch: i64) -> bool {
    return (ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90) || ch == 95;
}

fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57;
}

fn match_keyword(comp: &Compiler, start: i64, len: i64, keyword: String) -> bool {
    if len != string_len(keyword) {
        return false;
    }
    let mut i = 0;
    while i < len {
        if comp.source[start + i] != string_char_at(keyword, i) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

fn parse_identifier(comp: &mut Compiler) -> String {
    let start = comp.pos;
    while comp.pos < comp.source_len && (is_alpha(comp.source[comp.pos]) || is_digit(comp.source[comp.pos])) {
        comp.pos = comp.pos + 1;
    }
    
    let len = comp.pos - start;
    let mut result = "";
    let mut i = 0;
    while i < len {
        result = string_concat(result, string_from_char(comp.source[start + i]));
        i = i + 1;
    }
    return result;
}

fn parse_string_literal(comp: &mut Compiler) -> String {
    comp.pos = comp.pos + 1; // Skip opening quote
    
    let mut result = "";
    while comp.pos < comp.source_len && comp.source[comp.pos] != 34 { // '"'
        if comp.source[comp.pos] == 92 { // '\'
            comp.pos = comp.pos + 1;
            if comp.pos < comp.source_len {
                let ch = comp.source[comp.pos];
                if ch == 110 { // 'n'
                    result = string_concat(result, "\\n");
                } else if ch == 116 { // 't'
                    result = string_concat(result, "\\t");
                } else if ch == 92 { // '\'
                    result = string_concat(result, "\\\\");
                } else if ch == 34 { // '"'
                    result = string_concat(result, "\\\"");
                } else {
                    result = string_concat(result, string_from_char(ch));
                }
            }
        } else {
            result = string_concat(result, string_from_char(comp.source[comp.pos]));
        }
        comp.pos = comp.pos + 1;
    }
    
    if comp.pos < comp.source_len {
        comp.pos = comp.pos + 1; // Skip closing quote
    }
    
    return result;
}

fn parse_number(comp: &mut Compiler) -> i64 {
    let mut value = 0;
    while comp.pos < comp.source_len && is_digit(comp.source[comp.pos]) {
        value = value * 10 + (comp.source[comp.pos] - 48);
        comp.pos = comp.pos + 1;
    }
    return value;
}

fn store_variable(comp: &mut Compiler, name: String, type_str: String) {
    if comp.var_count >= 100 {
        return;
    }
    
    // Store variable name
    let name_len = string_len(name);
    let mut i = 0;
    while i < name_len && i < 100 {
        comp.var_names[comp.var_count][i] = string_char_at(name, i);
        i = i + 1;
    }
    
    // Store type
    let type_len = string_len(type_str);
    i = 0;
    while i < type_len && i < 20 {
        comp.var_types[comp.var_count][i] = string_char_at(type_str, i);
        i = i + 1;
    }
    
    comp.var_count = comp.var_count + 1;
}

fn get_var_type(comp: &Compiler, name: String) -> String {
    let mut i = 0;
    while i < comp.var_count {
        // Compare variable name
        let mut matches = true;
        let mut j = 0;
        let name_len = string_len(name);
        while j < name_len {
            if comp.var_names[i][j] != string_char_at(name, j) {
                matches = false;
                break;
            }
            j = j + 1;
        }
        
        if matches && comp.var_names[i][j] == 0 {
            // Found variable, return type
            let mut type_str = "";
            j = 0;
            while j < 20 && comp.var_types[i][j] != 0 {
                type_str = string_concat(type_str, string_from_char(comp.var_types[i][j]));
                j = j + 1;
            }
            return type_str;
        }
        
        i = i + 1;
    }
    
    return "unknown";
}

fn parse_expression(comp: &mut Compiler) -> String {
    skip_whitespace(comp);
    
    if peek_char(comp) == 34 { // '"'
        return "\"" + parse_string_literal(comp) + "\"";
    } else if is_digit(peek_char(comp)) {
        return int_to_string(parse_number(comp));
    } else if is_alpha(peek_char(comp)) {
        let ident = parse_identifier(comp);
        skip_whitespace(comp);
        
        // Check for function call
        if peek_char(comp) == 40 { // '('
            advance(comp);
            let mut result = "";
            
            // Map built-in functions
            if ident == "string_concat" {
                result = "__pd_string_concat(";
            } else if ident == "int_to_string" {
                result = "__pd_int_to_string(";
            } else if ident == "string_len" {
                result = "__pd_string_len(";
            } else {
                result = ident + "(";
            }
            
            // Parse arguments
            let mut first = true;
            while peek_char(comp) != 41 && peek_char(comp) != -1 { // ')'
                skip_whitespace(comp);
                if !first {
                    skip_whitespace(comp);
                    if peek_char(comp) == 44 { // ','
                        advance(comp);
                        result = string_concat(result, ", ");
                    }
                }
                result = string_concat(result, parse_expression(comp));
                first = false;
                skip_whitespace(comp);
            }
            
            if peek_char(comp) == 41 {
                advance(comp);
            }
            
            return result + ")";
        } else {
            return ident;
        }
    }
    
    return "0";
}

fn parse_statement(comp: &mut Compiler) {
    skip_whitespace(comp);
    
    let start = comp.pos;
    let ident = parse_identifier(comp);
    
    if ident == "let" {
        // Variable declaration
        skip_whitespace(comp);
        
        let mut is_mut = false;
        let mut_start = comp.pos;
        let mut_check = parse_identifier(comp);
        if mut_check == "mut" {
            is_mut = true;
        } else {
            comp.pos = mut_start; // Backtrack
        }
        
        skip_whitespace(comp);
        let var_name = parse_identifier(comp);
        
        skip_whitespace(comp);
        
        // Type annotation
        let mut type_str = "long long"; // default
        if peek_char(comp) == 58 { // ':'
            advance(comp);
            skip_whitespace(comp);
            let type_name = parse_identifier(comp);
            if type_name == "String" {
                type_str = "const char*";
            } else if type_name == "bool" {
                type_str = "int";
            } else if type_name == "i64" {
                type_str = "long long";
            }
        }
        
        store_variable(comp, var_name, type_str);
        
        emit_str(comp, "    ");
        emit_str(comp, type_str);
        emit_str(comp, " ");
        emit_str(comp, var_name);
        
        skip_whitespace(comp);
        if peek_char(comp) == 61 { // '='
            advance(comp);
            emit_str(comp, " = ");
            emit_str(comp, parse_expression(comp));
        }
        
        emit_str(comp, ";\n");
        
        // Skip to semicolon
        while comp.pos < comp.source_len && comp.source[comp.pos] != 59 {
            comp.pos = comp.pos + 1;
        }
        if comp.pos < comp.source_len {
            comp.pos = comp.pos + 1; // Skip semicolon
        }
        
    } else if ident == "print" {
        // Print statement
        skip_whitespace(comp);
        if peek_char(comp) == 40 { // '('
            advance(comp);
            emit_str(comp, "    __pd_print(");
            emit_str(comp, parse_expression(comp));
            emit_str(comp, ");\n");
            
            // Skip to closing paren
            while comp.pos < comp.source_len && comp.source[comp.pos] != 41 {
                comp.pos = comp.pos + 1;
            }
            if comp.pos < comp.source_len {
                comp.pos = comp.pos + 1; // Skip ')'
            }
        }
        
        // Skip to semicolon
        while comp.pos < comp.source_len && comp.source[comp.pos] != 59 {
            comp.pos = comp.pos + 1;
        }
        if comp.pos < comp.source_len {
            comp.pos = comp.pos + 1; // Skip semicolon
        }
        
    } else if ident == "print_int" {
        // Print int statement
        skip_whitespace(comp);
        if peek_char(comp) == 40 { // '('
            advance(comp);
            emit_str(comp, "    __pd_print_int(");
            emit_str(comp, parse_expression(comp));
            emit_str(comp, ");\n");
            
            // Skip to closing paren
            while comp.pos < comp.source_len && comp.source[comp.pos] != 41 {
                comp.pos = comp.pos + 1;
            }
            if comp.pos < comp.source_len {
                comp.pos = comp.pos + 1; // Skip ')'
            }
        }
        
        // Skip to semicolon
        while comp.pos < comp.source_len && comp.source[comp.pos] != 59 {
            comp.pos = comp.pos + 1;
        }
        if comp.pos < comp.source_len {
            comp.pos = comp.pos + 1; // Skip semicolon
        }
    } else {
        // Skip unknown statement
        while comp.pos < comp.source_len && comp.source[comp.pos] != 59 && comp.source[comp.pos] != 125 {
            comp.pos = comp.pos + 1;
        }
        if comp.pos < comp.source_len && comp.source[comp.pos] == 59 {
            comp.pos = comp.pos + 1;
        }
    }
}

fn parse_function(comp: &mut Compiler) {
    // Skip "fn"
    skip_whitespace(comp);
    let func_name = parse_identifier(comp);
    
    // Skip to '{'
    while comp.pos < comp.source_len && comp.source[comp.pos] != 123 {
        comp.pos = comp.pos + 1;
    }
    
    if func_name == "main" {
        emit_str(comp, "int main(void) {\n");
        
        if comp.pos < comp.source_len {
            comp.pos = comp.pos + 1; // Skip '{'
        }
        
        // Parse statements until '}'
        while comp.pos < comp.source_len && comp.source[comp.pos] != 125 { // '}'
            parse_statement(comp);
            skip_whitespace(comp);
        }
        
        emit_str(comp, "    return 0;\n");
        emit_str(comp, "}\n");
        
        if comp.pos < comp.source_len {
            comp.pos = comp.pos + 1; // Skip '}'
        }
    } else {
        // Skip other functions for now
        let mut brace_count = 1;
        comp.pos = comp.pos + 1; // Skip '{'
        
        while comp.pos < comp.source_len && brace_count > 0 {
            if comp.source[comp.pos] == 123 { // '{'
                brace_count = brace_count + 1;
            } else if comp.source[comp.pos] == 125 { // '}'
                brace_count = brace_count - 1;
            }
            comp.pos = comp.pos + 1;
        }
    }
}

fn compile_program(source: String) -> String {
    let mut comp = create_compiler(source);
    
    // Headers
    emit_str(&mut comp, "#include <stdio.h>\n");
    emit_str(&mut comp, "#include <stdlib.h>\n");
    emit_str(&mut comp, "#include <string.h>\n\n");
    
    // Runtime functions
    emit_str(&mut comp, "void __pd_print(const char* s) { printf(\"%s\\n\", s); }\n");
    emit_str(&mut comp, "void __pd_print_int(long long n) { printf(\"%lld\\n\", n); }\n");
    emit_str(&mut comp, "long long __pd_string_len(const char* s) { return strlen(s); }\n");
    emit_str(&mut comp, "const char* __pd_string_concat(const char* a, const char* b) {\n");
    emit_str(&mut comp, "    char* r = malloc(strlen(a) + strlen(b) + 1);\n");
    emit_str(&mut comp, "    strcpy(r, a); strcat(r, b); return r;\n");
    emit_str(&mut comp, "}\n");
    emit_str(&mut comp, "const char* __pd_int_to_string(long long n) {\n");
    emit_str(&mut comp, "    char* buf = malloc(32);\n");
    emit_str(&mut comp, "    snprintf(buf, 32, \"%lld\", n);\n");
    emit_str(&mut comp, "    return buf;\n");
    emit_str(&mut comp, "}\n\n");
    
    // Parse functions
    while comp.pos < comp.source_len {
        skip_whitespace(&mut comp);
        
        let start = comp.pos;
        let ident = parse_identifier(&mut comp);
        
        if ident == "fn" {
            comp.pos = start; // Reset position
            parse_function(&mut comp);
        } else {
            // Skip to next line or function
            while comp.pos < comp.source_len && comp.source[comp.pos] != 10 && comp.source[comp.pos] != 123 {
                comp.pos = comp.pos + 1;
            }
        }
    }
    
    return get_output(&comp);
}

fn main() {
    print("Tiny Palladium Compiler v2");
    print("===========================");
    
    let test = "
fn main() {
    let msg: String = \"Hello from v2 compiler!\";
    print(msg);
    
    let x: i64 = 42;
    let y: i64 = 13;
    print_int(x);
    print_int(y);
    
    let sum: i64 = 55;
    print(\"The sum is:\");
    print_int(sum);
    
    let combined: String = string_concat(\"Result: \", int_to_string(sum));
    print(combined);
}
";
    
    let c_code = compile_program(test);
    
    print("\nGenerated C code:");
    print("=================");
    print(c_code);
    
    // Save to file
    let handle = file_open("tiny_v2_output.c");
    if handle > 0 {
        file_write(handle, c_code);
        file_close(handle);
        print("\nSaved to tiny_v2_output.c");
    }
}