=== Palladium Bootstrap Parser (Minimal) ===

This parser demonstrates basic syntax validation
without using struct/tuple returns.


=== Test 1: Single Let Statement ===
=== Parsing Program ===
Input:
let x = 42;

Validation:

Found let statement:
  Variable: x
  Value: 42
  ✓ Valid


=== Summary ===
Statements parsed: 1
✓ Successfully parsed entire program


=== Test 2: Multiple Let Statements ===
=== Parsing Program ===
Input:
let a = 10; let b = 20; let c = 30;

Validation:

Found let statement:
  Variable: a
  Value: 10
  ✓ Valid

Found let statement:
  Variable: b
  Value: 20
  ✓ Valid

Found let statement:
  Variable: c
  Value: 30
  ✓ Valid


=== Summary ===
Statements parsed: 3
✓ Successfully parsed entire program


=== Test 3: String Assignment ===
=== Parsing Program ===
Input:
let msg = "Hello";

Validation:

Found let statement:
  Variable: msg
  Value: "Hello"
  ✓ Valid


=== Summary ===
Statements parsed: 1
✓ Successfully parsed entire program


=== Test 4: Mixed Program ===
=== Parsing Program ===
Input:
let x = 100;
let name = "Palladium";
print(x);

Validation:

Found let statement:
  Variable: x
  Value: 100
  ✓ Valid

Found let statement:
  Variable: name
  Value: "Palladium"
  ✓ Valid

Found expression statement:
  Expression: print
  ✓ Valid


=== Summary ===
Statements parsed: 3
✓ Successfully parsed entire program


=== Test 5: Error Case ===
=== Parsing Program ===
Input:
let = 42;

Validation:

Found let statement:
Error: Expected identifier after 'let'
  ✗ Invalid


=== Summary ===
Statements parsed: 0
✗ Parse error occurred


=== Parser Demo Complete ===
This shows we can parse Palladium syntax in Palladium!
Despite limitations, we're making progress toward bootstrapping!
