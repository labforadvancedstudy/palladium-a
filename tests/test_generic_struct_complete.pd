// Comprehensive test for generic struct support

// Generic single-parameter struct
struct Box<T> {
    value: T,
}

// Generic multi-parameter struct
struct Pair<T, U> {
    first: T,
    second: U,
}

// Generic struct with array field
struct Array<T> {
    data: [T; 10],
    length: i32,
}

// Nested generic struct
struct Option<T> {
    value: T,
    has_value: bool,
}

// Non-generic struct for comparison
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    // Non-generic structs work as before
    let p = Point { x: 10, y: 20 };
    print_int(p.x);
    print_int(p.y);
    
    // Generic structs are parsed and stored correctly
    // But instantiation requires type annotations (not yet implemented)
    // let b: Box<i32> = Box { value: 42 };  // Would need type inference
    
    print("Test passed: Generic struct definitions are supported!");
}