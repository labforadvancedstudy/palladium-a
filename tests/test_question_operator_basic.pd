// Basic test for the ? operator
// Tests error propagation without generic Result types

// Since Palladium doesn't yet support generic types in return position,
// we'll test with a concrete Result type

struct IntResult {
    is_ok: bool,
    ok_value: i64,
    err_value: String,
}

// Helper to create Ok result
fn ok_result(value: i64) -> IntResult {
    return IntResult {
        is_ok: true,
        ok_value: value,
        err_value: ""
    };
}

// Helper to create Err result
fn err_result(msg: String) -> IntResult {
    return IntResult {
        is_ok: false,
        ok_value: 0,
        err_value: msg
    };
}

// Function that returns Ok
fn returns_ok() -> IntResult {
    return ok_result(42);
}

// Function that returns Err
fn returns_err() -> IntResult {
    return err_result("Something went wrong");
}

// Test function using ? operator
// Note: Since full ? operator support requires generic Result types,
// this test just verifies that the syntax is parsed correctly
fn test_question_syntax() -> IntResult {
    // The ? operator syntax should parse, even if code generation
    // doesn't yet handle it fully
    let result = returns_ok();
    
    // Test that ? is parsed as a postfix operator
    // result?;  // Uncomment when full support is implemented
    
    return ok_result(result.ok_value + 1);
}

fn main() {
    print("Testing ? operator syntax parsing...");
    
    // Test that our mock Result type works
    let ok = returns_ok();
    if ok.is_ok {
        print("Ok result created successfully");
        print_int(ok.ok_value);
    }
    
    let err = returns_err();
    if err.is_ok {
        print("Error: expected Err, got Ok");
    } else {
        print("Err result created successfully");
        print(err.err_value);
    }
    
    // Test the function with ? operator syntax
    let test_result = test_question_syntax();
    if test_result.is_ok {
        print("Test function returned Ok");
        print_int(test_result.ok_value);
    }
    
    print("? operator syntax test completed");
}