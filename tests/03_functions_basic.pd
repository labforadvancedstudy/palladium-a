// Test 03: Functions - Basic Function Features
// Tests function definitions, parameters, returns

// Function with no parameters and no return
fn greet() {
    print("Hello from function!");
}

// Function with parameters
fn add(a: i64, b: i64) -> i64 {
    return a + b;
}

// Function with multiple parameters
fn calculate(x: i64, y: i64, z: i64) -> i64 {
    return (x * y) + z;
}

// Function returning bool
fn is_even(n: i64) -> bool {
    return n % 2 == 0;
}

// Function returning String
fn make_greeting(name: String) -> String {
    // String concatenation not yet supported
    return "Hello, Palladium!";
}

// Function with mutable parameter
fn increment(mut x: i64) -> i64 {
    x = x + 1;
    return x;
}

// Function with early return
fn absolute(n: i64) -> i64 {
    if n < 0 {
        return -n;
    }
    return n;
}

// Recursive function
fn factorial(n: i64) -> i64 {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

fn main() {
    // Call function with no params
    greet();
    
    // Function with return value
    let sum = add(10, 20);
    print("\nAddition result:");
    print_int(sum);
    
    // Multiple parameters
    let result = calculate(5, 6, 7);
    print("\nCalculation result:");
    print_int(result);  // Should be 37
    
    // Boolean return
    if is_even(42) {
        print("\n42 is even");
    }
    if !is_even(13) {
        print("13 is odd");
    }
    
    // String return
    let greeting = make_greeting("Palladium");
    print("\nGreeting:");
    print(greeting);
    
    // Mutable parameter (actually passed by reference)
    let mut original = 5;
    let incremented = increment(original);
    print("\nAfter increment:");
    print_int(original);    // Modified to 6
    print_int(incremented); // Also 6
    
    // Early return
    print("\nAbsolute values:");
    print_int(absolute(-42));  // 42
    print_int(absolute(42));   // 42
    
    // Recursive function
    print("\nFactorial of 5:");
    print_int(factorial(5));  // 120
}