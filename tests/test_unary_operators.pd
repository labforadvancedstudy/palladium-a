// Test unary operators: - (negation) and ! (logical not)

fn test_negation() {
    print("=== Testing Unary Negation (-) ===");
    
    // Test 1: Basic negation
    let x = 42;
    let neg_x = -x;
    print("x =");
    print_int(x);
    print("-x =");
    print_int(neg_x);
    
    // Test 2: Double negation
    let y = -(-100);
    print("Double negation: -(-100) =");
    print_int(y);
    
    // Test 3: Negation in expressions
    let a = 10;
    let b = -a + 5;
    print("-10 + 5 =");
    print_int(b);
    
    // Test 4: Negation with precedence
    let c = -3 * 4;  // Should be (-3) * 4 = -12
    print("-3 * 4 =");
    print_int(c);
    
    let d = -(3 * 4);  // Should be -(12) = -12
    print("-(3 * 4) =");
    print_int(d);
}

fn test_logical_not() {
    print("\n=== Testing Logical Not (!) ===");
    
    // Test 1: Basic not
    let t = true;
    let f = false;
    print("!true =");
    if !t {
        print("false");
    } else {
        print("true (error!)");
    }
    
    print("!false =");
    if !f {
        print("true");
    } else {
        print("false (error!)");
    }
    
    // Test 2: Double not
    let x = true;
    let double_not = !!x;
    print("!!true =");
    if double_not {
        print("true");
    } else {
        print("false");
    }
    
    // Test 3: Not in conditions
    let n = 5;
    if !(n > 10) {
        print("5 is not greater than 10 ✓");
    }
    
    // Test 4: Not with logical operators
    let a = true;
    let b = false;
    if !(a && b) {
        print("!(true && false) = true ✓");
    }
    
    if !a || b {
        print("!true || false = false ✓");
    } else {
        print("Correct: !true || false = false");
    }
}

fn test_combined() {
    print("\n=== Testing Combined Unary Operators ===");
    
    // Negation and not together
    let x = 5;
    let y = 10;
    
    if !(x > y) && -x < 0 {
        print("!(5 > 10) && -5 < 0 = true ✓");
    }
    
    // Complex expression
    let result = -x * 2 + 1;  // y > 0 so we add 1
    print("Complex: -5 * 2 + 1 =");
    print_int(result);
}

fn main() {
    test_negation();
    test_logical_not();
    test_combined();
    print("\n=== Unary Operators Essential for Bootstrapping! ===");
}