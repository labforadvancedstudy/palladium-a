// Test file for the ? operator
// Tests error propagation with Result types

import std::result::*;

// Simple function that returns Ok
fn returns_ok() -> Result<i64, String> {
    Result::Ok(42)
}

// Simple function that returns Err
fn returns_err() -> Result<i64, String> {
    Result::Err("Something went wrong")
}

// Function using ? operator with Ok result
fn test_question_ok() -> Result<i64, String> {
    let value = returns_ok()?;
    Result::Ok(value + 1)
}

// Function using ? operator with Err result
fn test_question_err() -> Result<i64, String> {
    let value = returns_err()?;  // This should propagate the error
    Result::Ok(value + 1)  // This line should not be reached
}

// Function chaining multiple ? operators
fn test_chain_question() -> Result<i64, String> {
    let a = returns_ok()?;
    let b = returns_ok()?;
    let c = returns_ok()?;
    Result::Ok(a + b + c)
}

// Test with custom error type
struct MyError {
    message: String,
}

fn returns_custom_err() -> Result<i64, MyError> {
    Result::Err(MyError { message: "Custom error" })
}

fn test_custom_error() -> Result<i64, MyError> {
    let value = returns_custom_err()?;
    Result::Ok(value * 2)
}

// Main test function
fn main() {
    // Test 1: ? operator with Ok result
    match test_question_ok() {
        Result::Ok(value) => {
            if value == 43 {
                print("Test 1 passed: ? operator with Ok result");
            } else {
                print("Test 1 failed: unexpected value");
            }
        }
        Result::Err(_) => {
            print("Test 1 failed: expected Ok, got Err");
        }
    }

    // Test 2: ? operator with Err result
    match test_question_err() {
        Result::Ok(_) => {
            print("Test 2 failed: expected Err, got Ok");
        }
        Result::Err(msg) => {
            if string_eq(msg, "Something went wrong") {
                print("Test 2 passed: ? operator propagated error");
            } else {
                print("Test 2 failed: wrong error message");
            }
        }
    }

    // Test 3: Chaining multiple ? operators
    match test_chain_question() {
        Result::Ok(value) => {
            if value == 126 {  // 42 + 42 + 42
                print("Test 3 passed: chained ? operators");
            } else {
                print("Test 3 failed: unexpected value");
            }
        }
        Result::Err(_) => {
            print("Test 3 failed: expected Ok, got Err");
        }
    }

    print("All ? operator tests completed");
}