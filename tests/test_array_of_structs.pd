// Test array of structs type inference

struct Point {
    x: i64,
    y: i64,
}

struct Line {
    start: Point,
    end: Point,
}

fn print_points(pts: [Point; 3]) {
    for i in 0..3 {
        print("Point");
        print_int(i);
        print(":");
        print_int(pts[i].x);
        print(",");
        print_int(pts[i].y);
    }
}

fn test_array_of_structs() {
    print("=== Testing Array of Structs ===\n");
    
    // Test 1: Direct array of structs
    print("Test 1: Direct array initialization");
    let p1 = Point { x: 10, y: 20 };
    let p2 = Point { x: 30, y: 40 };
    let p3 = Point { x: 50, y: 60 };
    
    // This should work but might have type inference issues
    let points: [Point; 3] = [p1, p2, p3];
    
    // Access elements
    print("First point x:");
    print_int(points[0].x);
    print("First point y:");
    print_int(points[0].y);
    
    // Test 2: Array of structs as struct field
    print("\nTest 2: Array of structs in another struct");
    
    // This is what failed in HashMap - array of structs inside a struct
    // Commenting out for now as it likely won't compile
    // struct PointCollection {
    //     points: [Point; 10],
    //     count: i64,
    // }
    
    print("Skipping struct field test (known limitation)");
    
    // Test 3: Passing array of structs to function
    print("\nTest 3: Passing array to function");
    print_points(points);
    
    print("\n=== Array of Structs Tests Complete ===");
}

fn main() {
    test_array_of_structs();
}