// Comprehensive tests for range syntax (0..5)
// Tests every aspect of the new feature

fn test_basic_range() {
    print("=== Test: Basic Range ===");
    
    let mut count = 0;
    for i in 0..5 {
        count = count + 1;
        print_int(i);
    }
    
    if count == 5 {
        print("âœ“ Basic range (0..5) works correctly");
    } else {
        print("âœ— Basic range failed");
        print_int(count);
    }
}

fn test_range_with_variables() {
    print("\n=== Test: Range with Variables ===");
    
    let start = 3;
    let end = 8;
    let mut sum = 0;
    
    for i in start..end {
        sum = sum + i;
    }
    
    // Expected: 3 + 4 + 5 + 6 + 7 = 25
    if sum == 25 {
        print("âœ“ Range with variables works");
    } else {
        print("âœ— Range with variables failed");
        print_int(sum);
    }
}

fn test_range_with_expressions() {
    print("\n=== Test: Range with Expressions ===");
    
    let mut product = 1;
    let n = 4;
    
    for i in 1..n+1 {
        product = product * i;
    }
    
    // Expected: 1 * 2 * 3 * 4 = 24
    if product == 24 {
        print("âœ“ Range with expressions works");
    } else {
        print("âœ— Range with expressions failed");
        print_int(product);
    }
}

fn test_nested_range_loops() {
    print("\n=== Test: Nested Range Loops ===");
    
    let mut count = 0;
    
    for i in 0..3 {
        for j in 0..4 {
            count = count + 1;
        }
    }
    
    // Expected: 3 * 4 = 12
    if count == 12 {
        print("âœ“ Nested range loops work");
    } else {
        print("âœ— Nested range loops failed");
        print_int(count);
    }
}

fn test_range_with_break() {
    print("\n=== Test: Range with Break ===");
    
    let mut last_value = 0;
    
    for i in 0..10 {
        if i == 5 {
            break;
        }
        last_value = i;
    }
    
    if last_value == 4 {
        print("âœ“ Range with break works");
    } else {
        print("âœ— Range with break failed");
        print_int(last_value);
    }
}

fn test_range_with_continue() {
    print("\n=== Test: Range with Continue ===");
    
    let mut sum = 0;
    
    for i in 0..10 {
        if i % 2 == 0 {
            continue;
        }
        sum = sum + i;
    }
    
    // Expected: 1 + 3 + 5 + 7 + 9 = 25
    if sum == 25 {
        print("âœ“ Range with continue works");
    } else {
        print("âœ— Range with continue failed");
        print_int(sum);
    }
}

fn test_empty_range() {
    print("\n=== Test: Empty Range ===");
    
    let mut executed = false;
    
    for i in 5..5 {
        executed = true;
        print_int(i);
    }
    
    if executed == false {
        print("âœ“ Empty range (5..5) doesn't execute");
    } else {
        print("âœ— Empty range incorrectly executed");
    }
}

fn test_reverse_range() {
    print("\n=== Test: Reverse Range ===");
    
    let mut executed = false;
    
    // Note: This should not execute since 10 > 5
    for i in 10..5 {
        executed = true;
        print_int(i);
    }
    
    if executed == false {
        print("âœ“ Reverse range (10..5) doesn't execute");
    } else {
        print("âœ— Reverse range incorrectly executed");
    }
}

fn test_large_range() {
    print("\n=== Test: Large Range ===");
    
    let mut count = 0;
    let limit = 1000;
    
    for i in 0..limit {
        count = count + 1;
    }
    
    if count == limit {
        print("âœ“ Large range works correctly");
    } else {
        print("âœ— Large range failed");
        print_int(count);
    }
}

fn test_range_in_array_init() {
    print("\n=== Test: Range for Array Initialization ===");
    
    let mut arr = [0; 10];
    
    // Initialize array using range
    for i in 0..10 {
        arr[i] = i * i;
    }
    
    // Check values
    if arr[0] == 0 {
        if arr[3] == 9 {
            if arr[9] == 81 {
                print("âœ“ Range for array init works");
            } else {
                print("âœ— arr[9] incorrect");
                print_int(arr[9]);
            }
        } else {
            print("âœ— arr[3] incorrect");
            print_int(arr[3]);
        }
    } else {
        print("âœ— arr[0] incorrect");
        print_int(arr[0]);
    }
}

fn fibonacci_with_range(n: i64) -> i64 {
    if n <= 1 {
        return n;
    }
    
    let mut a = 0;
    let mut b = 1;
    let mut result = 0;
    
    for i in 2..n+1 {
        result = a + b;
        a = b;
        b = result;
    }
    
    return result;
}

fn test_range_in_function() {
    print("\n=== Test: Range in Function ===");
    
    let fib10 = fibonacci_with_range(10);
    
    // 10th Fibonacci number is 55
    if fib10 == 55 {
        print("âœ“ Range in function works");
    } else {
        print("âœ— Range in function failed");
        print_int(fib10);
    }
}

fn main() {
    print("=== Comprehensive Range Syntax Tests ===\n");
    
    test_basic_range();
    test_range_with_variables();
    test_range_with_expressions();
    test_nested_range_loops();
    test_range_with_break();
    test_range_with_continue();
    test_empty_range();
    test_reverse_range();
    test_large_range();
    test_range_in_array_init();
    test_range_in_function();
    
    print("\n=== All Range Tests Complete ===");
    print("Range syntax (0..5) is now fully functional!");
    print("One step closer to bootstrapping! ðŸš€");
}