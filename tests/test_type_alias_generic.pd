// Test generic type aliases
// Define a custom Result type alias that defaults error type to String
type MyResult<T> = Result<T, String>;

enum Result<T, E> {
    Ok(T),
    Err(E),
}

enum Option<T> {
    Some(T),
    None,
}

fn divide(a: i32, b: i32) -> MyResult<i32> {
    if b == 0 {
        Result::Err("Division by zero");
    } else {
        Result::Ok(a / b);
    }
}

fn main() {
    match divide(10, 2) {
        Result::Ok(value) => {
            print("Result: ");
            print_int(value);
        }
        Result::Err(msg) => {
            print("Error: ");
            print(msg);
        }
    }
}