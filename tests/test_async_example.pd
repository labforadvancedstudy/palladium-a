// Example of async/await in Palladium

// Async function to simulate file reading
async fn read_file(path: String) -> String {
    // Simulate async I/O
    print("Reading file: ");
    print(path);
    
    // In real implementation, this would be actual async I/O
    return "File contents here";
}

// Async function to process multiple files
async fn process_files() -> i64 {
    let file1 = read_file("data1.txt").await;
    let file2 = read_file("data2.txt").await;
    
    print("Processed files:");
    print(file1);
    print(file2);
    
    return 0;
}

// Async function with error handling
async fn safe_divide(a: i64, b: i64) -> Result<i64, String> {
    if b == 0 {
        return Err("Division by zero");
    }
    return Ok(a / b);
}

// Example of concurrent execution
async fn concurrent_tasks() -> i64 {
    // These could run concurrently
    let task1 = async {
        print("Task 1 starting");
        // Simulate work
        print("Task 1 done");
        return 1;
    };
    
    let task2 = async {
        print("Task 2 starting");
        // Simulate work
        print("Task 2 done");
        return 2;
    };
    
    let result1 = task1.await;
    let result2 = task2.await;
    
    return result1 + result2;
}

fn main() -> i64 {
    // Run async function in runtime
    let runtime = AsyncRuntime::new();
    
    runtime.spawn(process_files());
    runtime.spawn(concurrent_tasks());
    
    runtime.run();
    
    return 0;
}