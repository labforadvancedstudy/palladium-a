// Simple tests for Palladium bootstrap components
// Tests core functionality without nested functions

// Test string utilities
fn test_string_operations() {
    print("=== Testing String Operations ===");
    
    // Test string_len
    let s1 = "Hello";
    let len1 = string_len(s1);
    if len1 == 5 {
        print("âœ“ string_len works correctly");
    } else {
        print("âœ— string_len failed");
    }
    
    // Test string_concat
    let s2 = " World";
    let s3 = string_concat(s1, s2);
    if string_eq(s3, "Hello World") {
        print("âœ“ string_concat works correctly");
    } else {
        print("âœ— string_concat failed");
    }
    
    // Test string_substring
    let sub = string_substring("Palladium", 0, 4);
    if string_eq(sub, "Pall") {
        print("âœ“ string_substring works correctly");
    } else {
        print("âœ— string_substring failed");
    }
    
    // Test string_char_at
    let ch = string_char_at("ABC", 1);
    if ch == 66 {  // ASCII 'B'
        print("âœ“ string_char_at works correctly");
    } else {
        print("âœ— string_char_at failed");
    }
}

// Test array operations
fn test_array_operations() {
    print("\n=== Testing Array Operations ===");
    
    // Test array initialization
    let arr = [10, 20, 30, 40, 50];
    
    // Test array indexing
    if arr[0] == 10 {
        print("âœ“ Array index 0 correct");
    } else {
        print("âœ— Array index 0 failed");
    }
    
    if arr[4] == 50 {
        print("âœ“ Array index 4 correct");
    } else {
        print("âœ— Array index 4 failed");
    }
    
    // Test array with repeat syntax
    let zeros = [0; 3];
    if zeros[0] == 0 {
        if zeros[1] == 0 {
            if zeros[2] == 0 {
                print("âœ“ Array repeat syntax works");
            } else {
                print("âœ— Array repeat failed at index 2");
            }
        } else {
            print("âœ— Array repeat failed at index 1");
        }
    } else {
        print("âœ— Array repeat failed at index 0");
    }
}

// Test control flow
fn test_control_flow() {
    print("\n=== Testing Control Flow ===");
    
    // Test for loop
    let mut sum = 0;
    for i in 0..5 {
        sum = sum + i;
    }
    if sum == 10 {  // 0+1+2+3+4 = 10
        print("âœ“ For loop works correctly");
    } else {
        print("âœ— For loop failed");
    }
    
    // Test for loop with break
    let mut count = 0;
    for i in 0..10 {
        if i == 5 {
            break;
        }
        count = count + 1;
    }
    if count == 5 {
        print("âœ“ For loop with break works");
    } else {
        print("âœ— For loop with break failed");
    }
    
    // Test while loop
    let mut i = 0;
    let mut sum2 = 0;
    while i < 5 {
        sum2 = sum2 + i;
        i = i + 1;
    }
    if sum2 == 10 {
        print("âœ“ While loop works correctly");
    } else {
        print("âœ— While loop failed");
    }
}

// Test enum and pattern matching
fn test_enums() {
    print("\n=== Testing Enums ===");
    
    enum Status {
        Success,
        Error(String),
    }
    
    let s1 = Status::Success;
    let s2 = Status::Error("Failed");
    
    // Test pattern matching
    match s1 {
        Status::Success => print("âœ“ Pattern match Success works"),
        Status::Error(_) => print("âœ— Pattern match failed"),
    }
    
    match s2 {
        Status::Success => print("âœ— Pattern match failed"),
        Status::Error(_) => print("âœ“ Pattern match Error works"),
    }
}

// Test struct operations
fn test_structs() {
    print("\n=== Testing Structs ===");
    
    struct Point {
        x: i64,
        y: i64,
    }
    
    let p = Point { x: 10, y: 20 };
    
    if p.x == 10 {
        print("âœ“ Struct field x access works");
    } else {
        print("âœ— Struct field x access failed");
    }
    
    if p.y == 20 {
        print("âœ“ Struct field y access works");
    } else {
        print("âœ— Struct field y access failed");
    }
}

// Test boolean operations
fn test_boolean_ops() {
    print("\n=== Testing Boolean Operations ===");
    
    let t = true;
    let f = false;
    
    if t {
        print("âœ“ Boolean true works");
    } else {
        print("âœ— Boolean true failed");
    }
    
    if f == false {
        print("âœ“ Boolean false works");
    } else {
        print("âœ— Boolean false failed");
    }
    
    if t != f {
        print("âœ“ Boolean inequality works");
    } else {
        print("âœ— Boolean inequality failed");
    }
}

// Test arithmetic operations
fn test_arithmetic() {
    print("\n=== Testing Arithmetic ===");
    
    let a = 10;
    let b = 3;
    
    if a + b == 13 {
        print("âœ“ Addition works");
    } else {
        print("âœ— Addition failed");
    }
    
    if a - b == 7 {
        print("âœ“ Subtraction works");
    } else {
        print("âœ— Subtraction failed");
    }
    
    if a * b == 30 {
        print("âœ“ Multiplication works");
    } else {
        print("âœ— Multiplication failed");
    }
    
    if a / b == 3 {
        print("âœ“ Division works");
    } else {
        print("âœ— Division failed");
    }
    
    if a % b == 1 {
        print("âœ“ Modulo works");
    } else {
        print("âœ— Modulo failed");
    }
}

fn main() {
    print("=== Palladium Bootstrap Component Tests ===\n");
    
    test_string_operations();
    test_array_operations();
    test_control_flow();
    test_enums();
    test_structs();
    test_boolean_ops();
    test_arithmetic();
    
    print("\n=== All Tests Complete ===");
    print("Bootstrap components verified!");
    print("Ready for self-hosting! ðŸš€");
}