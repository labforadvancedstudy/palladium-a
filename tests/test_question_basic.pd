// Basic test for the ? operator
// Tests error propagation without stdlib imports

// Define Result locally for testing
enum Result<T, E> {
    Ok(T),
    Err(E),
}

// Function that returns Ok
fn get_ok_value() -> Result<i64, String> {
    return Result::Ok(42);
}

// Function that returns Err
fn get_err_value() -> Result<i64, String> {
    return Result::Err("Something went wrong");
}

// Function that uses ? operator with Ok
fn test_question_ok() -> Result<i64, String> {
    let value = get_ok_value()?;
    return Result::Ok(value + 1);
}

// Function that uses ? operator with Err
fn test_question_err() -> Result<i64, String> {
    let value = get_err_value()?; // This should propagate the error
    return Result::Ok(value + 1); // This should not be reached
}

fn main() {
    // Test with Ok value
    match test_question_ok() {
        Result::Ok(v) => {
            print("Test 1 passed - Got Ok value: ");
            print_int(v);
        }
        Result::Err(e) => {
            print("Test 1 failed - Got error: ");
            print(e);
        }
    }
    
    // Test with Err value
    match test_question_err() {
        Result::Ok(v) => {
            print("Test 2 failed - Should have gotten error");
        }
        Result::Err(e) => {
            print("Test 2 passed - Got expected error: ");
            print(e);
        }
    }
}