// Code Generator for Palladium - AST to C
// "Forging legends into machine code"

import ast;

struct CodeGen {
    output: String,
    indent_level: i64,
}

pub fn create_codegen() -> CodeGen {
    return CodeGen {
        output: "",
        indent_level: 0,
    };
}

fn emit(gen: &mut CodeGen, code: String) {
    gen.output = gen.output + code;
}

fn emit_line(gen: &mut CodeGen, code: String) {
    // Add indentation
    let mut i = 0;
    while i < gen.indent_level {
        emit(gen, "    ");
        i = i + 1;
    }
    emit(gen, code + "\n");
}

fn indent(gen: &mut CodeGen) {
    gen.indent_level = gen.indent_level + 1;
}

fn dedent(gen: &mut CodeGen) {
    if gen.indent_level > 0 {
        gen.indent_level = gen.indent_level - 1;
    }
}

// Generate C type from Palladium type
fn gen_c_type(ty: &Type) -> String {
    match ty {
        Type::I32 => return "int",
        Type::I64 => return "long long",
        Type::Bool => return "int",
        Type::String => return "const char*",
        Type::Unit => return "void",
        Type::Custom(name) => return name,
    }
}

// Generate expression
fn gen_expr(gen: &mut CodeGen, expr: &Expr) {
    match expr {
        Expr::Integer(n) => {
            emit(gen, int_to_string(n));
        }
        Expr::String(s) => {
            emit(gen, "\"" + s + "\"");
        }
        Expr::Bool(b) => {
            if b {
                emit(gen, "1");
            } else {
                emit(gen, "0");
            }
        }
        Expr::Ident(name) => {
            emit(gen, name);
        }
        Expr::Binary { left, op, right } => {
            emit(gen, "(");
            gen_expr(gen, left);
            
            let op_str = match op {
                BinOp::Add => " + ",
                BinOp::Sub => " - ",
                BinOp::Mul => " * ",
                BinOp::Div => " / ",
                BinOp::Mod => " % ",
                BinOp::Eq => " == ",
                BinOp::Ne => " != ",
                BinOp::Lt => " < ",
                BinOp::Gt => " > ",
                BinOp::Le => " <= ",
                BinOp::Ge => " >= ",
                BinOp::And => " && ",
                BinOp::Or => " || ",
            };
            emit(gen, op_str);
            
            gen_expr(gen, right);
            emit(gen, ")");
        }
        Expr::Unary { op, operand } => {
            match op {
                UnaryOp::Neg => emit(gen, "-("),
                UnaryOp::Not => emit(gen, "!("),
            }
            gen_expr(gen, operand);
            emit(gen, ")");
        }
        Expr::Call { func, args } => {
            // Map Palladium functions to C functions
            if string_eq(func, "print") {
                emit(gen, "__pd_print");
            } else if string_eq(func, "print_int") {
                emit(gen, "__pd_print_int");
            } else if string_eq(func, "string_len") {
                emit(gen, "__pd_string_len");
            } else if string_eq(func, "string_eq") {
                emit(gen, "__pd_string_eq");
            } else if string_eq(func, "string_char_at") {
                emit(gen, "__pd_string_char_at");
            } else if string_eq(func, "string_substring") {
                emit(gen, "__pd_string_substring");
            } else if string_eq(func, "string_from_char") {
                emit(gen, "__pd_string_from_char");
            } else if string_eq(func, "string_to_int") {
                emit(gen, "__pd_string_to_int");
            } else if string_eq(func, "int_to_string") {
                emit(gen, "__pd_int_to_string");
            } else {
                emit(gen, func);
            }
            
            emit(gen, "(");
            let mut i = 0;
            for arg in args {
                if i > 0 {
                    emit(gen, ", ");
                }
                gen_expr(gen, arg);
                i = i + 1;
            }
            emit(gen, ")");
        }
        _ => {
            emit(gen, "/* unsupported expression */");
        }
    }
}

// Generate statement
fn gen_stmt(gen: &mut CodeGen, stmt: &Stmt) {
    match stmt {
        Stmt::Let { name, ty, value, mutable } => {
            let c_type = if let Some(t) = ty {
                gen_c_type(t)
            } else {
                "long long"  // default to i64
            };
            
            emit_line(gen, c_type + " " + name + " = ");
            gen_expr(gen, value);
            emit(gen, ";");
        }
        Stmt::Assign { target, value } => {
            emit_line(gen, target + " = ");
            gen_expr(gen, value);
            emit(gen, ";");
        }
        Stmt::Return(value) => {
            if let Some(expr) = value {
                emit_line(gen, "return ");
                gen_expr(gen, expr);
                emit(gen, ";");
            } else {
                emit_line(gen, "return;");
            }
        }
        Stmt::Expr(expr) => {
            gen_expr(gen, expr);
            emit_line(gen, ";");
        }
        Stmt::If { condition, then_branch, else_branch } => {
            emit_line(gen, "if (");
            gen_expr(gen, condition);
            emit(gen, ") {");
            indent(gen);
            
            for stmt in then_branch {
                gen_stmt(gen, stmt);
            }
            
            dedent(gen);
            
            if let Some(else_stmts) = else_branch {
                emit_line(gen, "} else {");
                indent(gen);
                
                for stmt in else_stmts {
                    gen_stmt(gen, stmt);
                }
                
                dedent(gen);
            }
            
            emit_line(gen, "}");
        }
        Stmt::While { condition, body } => {
            emit_line(gen, "while (");
            gen_expr(gen, condition);
            emit(gen, ") {");
            indent(gen);
            
            for stmt in body {
                gen_stmt(gen, stmt);
            }
            
            dedent(gen);
            emit_line(gen, "}");
        }
        _ => {
            emit_line(gen, "/* unsupported statement */");
        }
    }
}

// Generate function
fn gen_function(gen: &mut CodeGen, func: &Function) {
    // Return type
    let ret_type = if let Some(ty) = &func.return_type {
        gen_c_type(ty)
    } else {
        "void"
    };
    
    // Special case for main
    if string_eq(func.name, "main") && string_eq(ret_type, "void") {
        emit(gen, "int");
    } else {
        emit(gen, ret_type);
    }
    
    emit(gen, " " + func.name + "(");
    
    // Parameters
    let mut i = 0;
    for param in &func.params {
        if i > 0 {
            emit(gen, ", ");
        }
        emit(gen, gen_c_type(&param.ty) + " " + param.name);
        i = i + 1;
    }
    
    emit_line(gen, ") {");
    indent(gen);
    
    // Body
    for stmt in &func.body {
        gen_stmt(gen, stmt);
    }
    
    // Add return 0 for main if needed
    if string_eq(func.name, "main") && func.return_type.is_none() {
        emit_line(gen, "return 0;");
    }
    
    dedent(gen);
    emit_line(gen, "}");
    emit_line(gen, "");
}

// Generate standard library functions
fn gen_stdlib(gen: &mut CodeGen) {
    emit_line(gen, "#include <stdio.h>");
    emit_line(gen, "#include <string.h>");
    emit_line(gen, "#include <stdlib.h>");
    emit_line(gen, "");
    
    // print function
    emit_line(gen, "void __pd_print(const char* str) {");
    emit_line(gen, "    printf(\"%s\\n\", str);");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // print_int function
    emit_line(gen, "void __pd_print_int(long long value) {");
    emit_line(gen, "    printf(\"%lld\\n\", value);");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // string_len
    emit_line(gen, "long long __pd_string_len(const char* str) {");
    emit_line(gen, "    return strlen(str);");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // string_eq
    emit_line(gen, "int __pd_string_eq(const char* s1, const char* s2) {");
    emit_line(gen, "    return strcmp(s1, s2) == 0;");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // string_char_at
    emit_line(gen, "long long __pd_string_char_at(const char* str, long long index) {");
    emit_line(gen, "    if (index < 0 || index >= (long long)strlen(str)) return -1;");
    emit_line(gen, "    return (long long)(unsigned char)str[index];");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // string_substring
    emit_line(gen, "const char* __pd_string_substring(const char* str, long long start, long long end) {");
    emit_line(gen, "    size_t len = strlen(str);");
    emit_line(gen, "    if (start < 0) start = 0;");
    emit_line(gen, "    if (end > (long long)len) end = len;");
    emit_line(gen, "    if (start >= end) return \"\";");
    emit_line(gen, "    size_t sub_len = end - start;");
    emit_line(gen, "    char* result = (char*)malloc(sub_len + 1);");
    emit_line(gen, "    strncpy(result, str + start, sub_len);");
    emit_line(gen, "    result[sub_len] = '\\0';");
    emit_line(gen, "    return result;");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // string_from_char
    emit_line(gen, "const char* __pd_string_from_char(long long c) {");
    emit_line(gen, "    char* result = (char*)malloc(2);");
    emit_line(gen, "    result[0] = (char)c;");
    emit_line(gen, "    result[1] = '\\0';");
    emit_line(gen, "    return result;");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // string_to_int
    emit_line(gen, "long long __pd_string_to_int(const char* str) {");
    emit_line(gen, "    return atoll(str);");
    emit_line(gen, "}");
    emit_line(gen, "");
    
    // int_to_string
    emit_line(gen, "const char* __pd_int_to_string(long long n) {");
    emit_line(gen, "    char* buffer = (char*)malloc(32);");
    emit_line(gen, "    snprintf(buffer, 32, \"%lld\", n);");
    emit_line(gen, "    return buffer;");
    emit_line(gen, "}");
    emit_line(gen, "");
}

// Generate program
pub fn gen_program(gen: &mut CodeGen, program: &Program) {
    // Generate standard library
    gen_stdlib(gen);
    
    // Generate functions
    for item in &program.items {
        match item {
            Item::Function(func) => {
                gen_function(gen, func);
            }
            _ => {
                // Skip imports and structs for now
            }
        }
    }
}