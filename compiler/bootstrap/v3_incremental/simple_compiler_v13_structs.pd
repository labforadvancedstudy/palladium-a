// Simple Palladium Compiler v13 with Struct Support
// Adds struct definitions, struct literals, and field access
// Based on v12 with arrays

// ============ Helper Functions (from v12) ============

fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57;
}

fn is_alpha(ch: i64) -> bool {
    return (ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90);
}

fn is_alphanum(ch: i64) -> bool {
    return is_alpha(ch) || is_digit(ch) || ch == 95;
}

fn is_whitespace(ch: i64) -> bool {
    return ch == 32 || ch == 9 || ch == 10 || ch == 13;
}

fn skip_whitespace(line: String, start: i64) -> i64 {
    let mut i = start;
    let len = string_len(line);
    while i < len {
        let ch = string_char_at(line, i);
        if !is_whitespace(ch) {
            break;
        }
        i = i + 1;
    }
    return i;
}

fn extract_identifier(line: String, start: i64) -> String {
    let mut result = "";
    let mut i = start;
    let len = string_len(line);
    
    while i < len {
        let ch = string_char_at(line, i);
        if is_alphanum(ch) {
            result = string_concat(result, string_from_char(ch));
        } else {
            break;
        }
        i = i + 1;
    }
    
    return result;
}

fn string_eq(a: String, b: String) -> bool {
    let len_a = string_len(a);
    let len_b = string_len(b);
    
    if len_a != len_b {
        return false;
    }
    
    let mut i = 0;
    while i < len_a {
        if string_char_at(a, i) != string_char_at(b, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

fn substring(str: String, start: i64, end: i64) -> String {
    let mut result = "";
    let mut i = start;
    
    while i <= end && i < string_len(str) {
        result = string_concat(result, string_from_char(string_char_at(str, i)));
        i = i + 1;
    }
    
    return result;
}

fn trim(str: String) -> String {
    let len = string_len(str);
    if len == 0 {
        return str;
    }
    
    let mut start = 0;
    while start < len && is_whitespace(string_char_at(str, start)) {
        start = start + 1;
    }
    
    let mut end = len - 1;
    while end >= 0 && is_whitespace(string_char_at(str, end)) {
        end = end - 1;
    }
    
    if start > end {
        return "";
    }
    
    return substring(str, start, end);
}

fn starts_with_at(str: String, prefix: String, pos: i64) -> bool {
    let str_len = string_len(str);
    let prefix_len = string_len(prefix);
    
    if pos + prefix_len > str_len {
        return false;
    }
    
    let mut i = 0;
    while i < prefix_len {
        if string_char_at(str, pos + i) != string_char_at(prefix, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

fn find_matching_brace(source: String, start: i64) -> i64 {
    let mut depth = 0;
    let mut i = start;
    
    while i < string_len(source) {
        let ch = string_char_at(source, i);
        if ch == 123 { // '{'
            depth = depth + 1;
        } else if ch == 125 { // '}'
            depth = depth - 1;
            if depth == 0 {
                return i;
            }
        }
        i = i + 1;
    }
    
    return -1;
}

fn extract_block(source: String, start: i64) -> String {
    let end = find_matching_brace(source, start);
    if end < 0 {
        return "";
    }
    return substring(source, start + 1, end - 1);
}

// ============ Type System Extended for Structs ============

const TYPE_VOID: i64 = 0;
const TYPE_I64: i64 = 1;
const TYPE_STRING: i64 = 2;
const TYPE_BOOL: i64 = 3;
const TYPE_ARRAY_I64: i64 = 11;
const TYPE_ARRAY_STRING: i64 = 12;
const TYPE_STRUCT: i64 = 20; // Base for struct types

// Struct definitions
struct StructField {
    name: String,
    type_id: i64,
}

struct StructDef {
    name: String,
    fields: [StructField; 20],
    field_count: i64,
    type_id: i64,
}

let mut structs: [StructDef; 50];
let mut struct_count = 0;
let mut next_struct_type_id = TYPE_STRUCT;

// Add struct definition
fn add_struct(name: String) -> i64 {
    if struct_count < 50 {
        structs[struct_count] = StructDef {
            name: name,
            fields: [StructField { name: "", type_id: 0 }; 20],
            field_count: 0,
            type_id: next_struct_type_id,
        };
        next_struct_type_id = next_struct_type_id + 1;
        struct_count = struct_count + 1;
        return struct_count - 1;
    }
    return -1;
}

// Find struct by name
fn find_struct(name: String) -> i64 {
    let mut i = 0;
    while i < struct_count {
        if string_eq(structs[i].name, name) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

// Add field to struct
fn add_struct_field(struct_idx: i64, field_name: String, field_type: i64) {
    if struct_idx >= 0 && struct_idx < struct_count {
        let s = &mut structs[struct_idx];
        if s.field_count < 20 {
            s.fields[s.field_count] = StructField {
                name: field_name,
                type_id: field_type,
            };
            s.field_count = s.field_count + 1;
        }
    }
}

// Find field in struct
fn find_struct_field(struct_idx: i64, field_name: String) -> i64 {
    if struct_idx >= 0 && struct_idx < struct_count {
        let s = &structs[struct_idx];
        let mut i = 0;
        while i < s.field_count {
            if string_eq(s.fields[i].name, field_name) {
                return i;
            }
            i = i + 1;
        }
    }
    return -1;
}

// Get type name including structs
fn type_to_c_extended(type_id: i64) -> String {
    if type_id == TYPE_VOID { return "void"; }
    if type_id == TYPE_I64 { return "long long"; }
    if type_id == TYPE_STRING { return "const char*"; }
    if type_id == TYPE_BOOL { return "int"; }
    if type_id == TYPE_ARRAY_I64 { return "long long"; }
    if type_id == TYPE_ARRAY_STRING { return "const char*"; }
    
    // Check if it's a struct type
    if type_id >= TYPE_STRUCT {
        let mut i = 0;
        while i < struct_count {
            if structs[i].type_id == type_id {
                return string_concat("struct ", structs[i].name);
            }
            i = i + 1;
        }
    }
    
    return "void*";
}

// Parse type name to ID
fn type_name_to_id_extended(name: String) -> i64 {
    if string_eq(name, "i64") { return TYPE_I64; }
    if string_eq(name, "String") { return TYPE_STRING; }
    if string_eq(name, "bool") { return TYPE_BOOL; }
    
    // Check if it's a struct name
    let struct_idx = find_struct(name);
    if struct_idx >= 0 {
        return structs[struct_idx].type_id;
    }
    
    return -1;
}

// ============ Variable Tracking (extended from v12) ============

struct VarInfo {
    name: String,
    type_id: i64,
    is_array: bool,
    array_size: i64,
}

let mut variables: [VarInfo; 100];
let mut var_count = 0;

fn add_variable(name: String, type_id: i64, is_array: bool, array_size: i64) {
    if var_count < 100 {
        variables[var_count] = VarInfo {
            name: name,
            type_id: type_id,
            is_array: is_array,
            array_size: array_size,
        };
        var_count = var_count + 1;
    }
}

fn find_variable(name: String) -> i64 {
    let mut i = 0;
    while i < var_count {
        if string_eq(variables[i].name, name) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

// ============ Struct Parsing and Compilation ============

// Parse struct definition
fn parse_struct_definition(source: String, start: i64) -> String {
    let mut i = skip_whitespace(source, start);
    
    // Get struct name
    let struct_name = extract_identifier(source, i);
    if string_len(struct_name) == 0 {
        return "// Error: Expected struct name\n";
    }
    
    i = i + string_len(struct_name);
    i = skip_whitespace(source, i);
    
    // Expect '{'
    if i >= string_len(source) || string_char_at(source, i) != 123 {
        return "// Error: Expected '{' after struct name\n";
    }
    
    // Add struct to definitions
    let struct_idx = add_struct(struct_name);
    if struct_idx < 0 {
        return "// Error: Too many structs\n";
    }
    
    // Extract struct body
    let body = extract_block(source, i);
    
    // Parse fields
    let mut field_idx = 0;
    let mut current_field = "";
    
    let mut j = 0;
    while j < string_len(body) {
        let ch = string_char_at(body, j);
        
        if ch == 10 || ch == 44 { // newline or comma
            current_field = trim(current_field);
            if string_len(current_field) > 0 {
                // Parse field: name: type
                let colon_pos = 0;
                while colon_pos < string_len(current_field) && 
                      string_char_at(current_field, colon_pos) != 58 {
                    colon_pos = colon_pos + 1;
                }
                
                if colon_pos > 0 && colon_pos < string_len(current_field) - 1 {
                    let field_name = trim(substring(current_field, 0, colon_pos - 1));
                    let field_type_name = trim(substring(current_field, colon_pos + 1, string_len(current_field) - 1));
                    let field_type = type_name_to_id_extended(field_type_name);
                    
                    if field_type >= 0 {
                        add_struct_field(struct_idx, field_name, field_type);
                    }
                }
            }
            current_field = "";
        } else if ch != 13 {
            current_field = string_concat(current_field, string_from_char(ch));
        }
        
        j = j + 1;
    }
    
    // Handle last field
    current_field = trim(current_field);
    if string_len(current_field) > 0 {
        let colon_pos = 0;
        while colon_pos < string_len(current_field) && 
              string_char_at(current_field, colon_pos) != 58 {
            colon_pos = colon_pos + 1;
        }
        
        if colon_pos > 0 && colon_pos < string_len(current_field) - 1 {
            let field_name = trim(substring(current_field, 0, colon_pos - 1));
            let field_type_name = trim(substring(current_field, colon_pos + 1, string_len(current_field) - 1));
            let field_type = type_name_to_id_extended(field_type_name);
            
            if field_type >= 0 {
                add_struct_field(struct_idx, field_name, field_type);
            }
        }
    }
    
    // Generate C struct
    let mut result = "struct ";
    result = string_concat(result, struct_name);
    result = string_concat(result, " {\n");
    
    let s = &structs[struct_idx];
    let mut k = 0;
    while k < s.field_count {
        result = string_concat(result, "    ");
        result = string_concat(result, type_to_c_extended(s.fields[k].type_id));
        result = string_concat(result, " ");
        result = string_concat(result, s.fields[k].name);
        result = string_concat(result, ";\n");
        k = k + 1;
    }
    
    result = string_concat(result, "};\n\n");
    return result;
}

// Parse struct literal
fn parse_struct_literal(struct_name: String, source: String, start: i64) -> String {
    let struct_idx = find_struct(struct_name);
    if struct_idx < 0 {
        return "/* Error: Unknown struct type */";
    }
    
    let mut result = "(struct ";
    result = string_concat(result, struct_name);
    result = string_concat(result, "){");
    
    // Extract initializer body
    let end = find_matching_brace(source, start);
    if end < 0 {
        return "/* Error: Unclosed struct literal */";
    }
    
    let body = substring(source, start + 1, end - 1);
    
    // Parse field initializers
    let mut field_init = "";
    let mut i = 0;
    let mut field_count = 0;
    
    while i < string_len(body) {
        let ch = string_char_at(body, i);
        
        if ch == 44 { // comma
            field_init = trim(field_init);
            if string_len(field_init) > 0 {
                if field_count > 0 {
                    result = string_concat(result, ", ");
                }
                
                // Parse field: name: value
                let colon_pos = 0;
                while colon_pos < string_len(field_init) && 
                      string_char_at(field_init, colon_pos) != 58 {
                    colon_pos = colon_pos + 1;
                }
                
                if colon_pos > 0 && colon_pos < string_len(field_init) - 1 {
                    let field_value = trim(substring(field_init, colon_pos + 1, string_len(field_init) - 1));
                    result = string_concat(result, field_value);
                } else {
                    result = string_concat(result, field_init);
                }
                
                field_count = field_count + 1;
            }
            field_init = "";
        } else {
            field_init = string_concat(field_init, string_from_char(ch));
        }
        
        i = i + 1;
    }
    
    // Handle last field
    field_init = trim(field_init);
    if string_len(field_init) > 0 {
        if field_count > 0 {
            result = string_concat(result, ", ");
        }
        
        let colon_pos = 0;
        while colon_pos < string_len(field_init) && 
              string_char_at(field_init, colon_pos) != 58 {
            colon_pos = colon_pos + 1;
        }
        
        if colon_pos > 0 && colon_pos < string_len(field_init) - 1 {
            let field_value = trim(substring(field_init, colon_pos + 1, string_len(field_init) - 1));
            result = string_concat(result, field_value);
        } else {
            result = string_concat(result, field_init);
        }
    }
    
    result = string_concat(result, "}");
    return result;
}

// Compile field access (e.g., point.x)
fn compile_field_access(expr: String) -> String {
    let mut result = "";
    let mut i = 0;
    
    while i < string_len(expr) {
        let ch = string_char_at(expr, i);
        
        if ch == 46 { // '.'
            result = string_concat(result, ".");
            i = i + 1;
            
            // Get field name
            if i < string_len(expr) && is_alpha(string_char_at(expr, i)) {
                let field = extract_identifier(expr, i);
                result = string_concat(result, field);
                i = i + string_len(field);
            }
        } else if is_alpha(ch) {
            let id = extract_identifier(expr, i);
            result = string_concat(result, id);
            i = i + string_len(id);
        } else {
            result = string_concat(result, string_from_char(ch));
            i = i + 1;
        }
    }
    
    return result;
}

// ============ Statement Compilation (extended from v12) ============

fn compile_statement(line: String, indent: String) -> String {
    let trimmed = trim(line);
    
    if string_len(trimmed) == 0 {
        return "";
    }
    
    // Struct definition
    if starts_with_at(trimmed, "struct ", 0) {
        return parse_struct_definition(trimmed, 7);
    }
    
    // Let statement with struct support
    if starts_with_at(trimmed, "let ", 0) {
        let mut i = skip_whitespace(trimmed, 4);
        
        // Check for mut
        let is_mut = starts_with_at(trimmed, "mut ", i);
        if is_mut {
            i = skip_whitespace(trimmed, i + 4);
        }
        
        // Get variable name
        let var_name = extract_identifier(trimmed, i);
        if string_len(var_name) == 0 {
            return string_concat(indent, "// Error: Expected variable name\n");
        }
        
        i = i + string_len(var_name);
        i = skip_whitespace(trimmed, i);
        
        // Check for type annotation
        let mut var_type = TYPE_I64;
        let mut var_type_name = "";
        
        if i < string_len(trimmed) && string_char_at(trimmed, i) == 58 { // ':'
            i = skip_whitespace(trimmed, i + 1);
            var_type_name = extract_identifier(trimmed, i);
            var_type = type_name_to_id_extended(var_type_name);
            i = i + string_len(var_type_name);
            i = skip_whitespace(trimmed, i);
        }
        
        // Add variable
        add_variable(var_name, var_type, false, 0);
        
        // Generate declaration
        let mut result = indent;
        result = string_concat(result, type_to_c_extended(var_type));
        result = string_concat(result, " ");
        result = string_concat(result, var_name);
        
        // Check for initialization
        if i < string_len(trimmed) && string_char_at(trimmed, i) == 61 { // '='
            i = skip_whitespace(trimmed, i + 1);
            
            // Check for struct literal
            if var_type >= TYPE_STRUCT && i < string_len(trimmed) {
                let init_id = extract_identifier(trimmed, i);
                if string_eq(init_id, var_type_name) {
                    i = i + string_len(init_id);
                    i = skip_whitespace(trimmed, i);
                    if i < string_len(trimmed) && string_char_at(trimmed, i) == 123 { // '{'
                        result = string_concat(result, " = ");
                        result = string_concat(result, parse_struct_literal(var_type_name, trimmed, i));
                    }
                } else {
                    // Regular struct assignment
                    let init_expr = substring(trimmed, i, string_len(trimmed) - 1);
                    if string_char_at(init_expr, string_len(init_expr) - 1) == 59 {
                        init_expr = substring(init_expr, 0, string_len(init_expr) - 2);
                    }
                    result = string_concat(result, " = ");
                    result = string_concat(result, compile_field_access(init_expr));
                }
            } else {
                // Regular initialization
                let init_expr = substring(trimmed, i, string_len(trimmed) - 1);
                if string_char_at(init_expr, string_len(init_expr) - 1) == 59 {
                    init_expr = substring(init_expr, 0, string_len(init_expr) - 2);
                }
                result = string_concat(result, " = ");
                result = string_concat(result, init_expr);
            }
        }
        
        result = string_concat(result, ";\n");
        return result;
    }
    
    // Field assignment (e.g., point.x = 10)
    let mut has_dot = false;
    let mut dot_pos = 0;
    let mut i = 0;
    
    while i < string_len(trimmed) {
        if string_char_at(trimmed, i) == 46 { // '.'
            has_dot = true;
            dot_pos = i;
        } else if string_char_at(trimmed, i) == 61 { // '='
            if has_dot {
                let lhs = substring(trimmed, 0, i - 1);
                let rhs = substring(trimmed, i + 1, string_len(trimmed) - 1);
                if string_char_at(rhs, string_len(rhs) - 1) == 59 {
                    rhs = substring(rhs, 0, string_len(rhs) - 2);
                }
                
                return string_concat(string_concat(string_concat(string_concat(string_concat(indent, compile_field_access(trim(lhs))), " = "), trim(rhs)), ";\n"));
            }
            break;
        }
        i = i + 1;
    }
    
    // Print with field access
    if starts_with_at(trimmed, "print_int(", 0) {
        let start = 10;
        let mut end = start;
        let mut paren_count = 1;
        
        while end < string_len(trimmed) && paren_count > 0 {
            let ch = string_char_at(trimmed, end);
            if ch == 40 { paren_count = paren_count + 1; }
            if ch == 41 { paren_count = paren_count - 1; }
            end = end + 1;
        }
        
        let arg = substring(trimmed, start, end - 2);
        return string_concat(string_concat(string_concat(indent, "printf(\"%lld\\n\", (long long)"), compile_field_access(arg)), ");\n");
    }
    
    // Default: pass through with field access compilation
    if has_dot {
        return string_concat(string_concat(indent, compile_field_access(trimmed)), "\n");
    }
    
    return string_concat(string_concat(indent, trimmed), "\n");
}

// ============ Main Compiler ============

fn compile_program(source: String) -> String {
    // Reset globals
    var_count = 0;
    struct_count = 0;
    next_struct_type_id = TYPE_STRUCT;
    
    let mut output = "#include <stdio.h>\n#include <string.h>\n\n";
    
    // First pass: collect struct definitions
    let mut structs_output = "";
    let mut i = 0;
    let mut current_line = "";
    
    while i < string_len(source) {
        let ch = string_char_at(source, i);
        
        if ch == 10 { // newline
            if starts_with_at(trim(current_line), "struct ", 0) {
                structs_output = string_concat(structs_output, compile_statement(current_line, ""));
                
                // Skip to end of struct
                while i < string_len(source) {
                    let ch2 = string_char_at(source, i);
                    if ch2 == 125 { // '}'
                        i = i + 1;
                        break;
                    }
                    i = i + 1;
                }
            }
            current_line = "";
        } else if ch != 13 {
            current_line = string_concat(current_line, string_from_char(ch));
        }
        
        i = i + 1;
    }
    
    output = string_concat(output, structs_output);
    output = string_concat(output, "\nint main() {\n");
    
    // Second pass: compile statements
    i = 0;
    current_line = "";
    let mut in_struct = false;
    
    while i < string_len(source) {
        let ch = string_char_at(source, i);
        
        if ch == 10 { // newline
            let trimmed = trim(current_line);
            
            if starts_with_at(trimmed, "struct ", 0) {
                in_struct = true;
            } else if in_struct && string_len(trimmed) > 0 && string_char_at(trimmed, string_len(trimmed) - 1) == 125 {
                in_struct = false;
            } else if !in_struct && string_len(trimmed) > 0 {
                output = string_concat(output, compile_statement(current_line, "    "));
            }
            
            current_line = "";
        } else if ch != 13 {
            current_line = string_concat(current_line, string_from_char(ch));
        }
        
        i = i + 1;
    }
    
    // Handle last line
    if !in_struct && string_len(trim(current_line)) > 0 {
        output = string_concat(output, compile_statement(current_line, "    "));
    }
    
    output = string_concat(output, "    return 0;\n");
    output = string_concat(output, "}\n");
    
    return output;
}

// ============ Test Program ============

fn main() {
    let test_program = "// Test program with structs
struct Point {
    x: i64,
    y: i64
}

struct Person {
    name: String,
    age: i64
}

// Create struct instances
let p1: Point = Point { x: 10, y: 20 };
let p2: Point = Point { x: 30, y: 40 };

print(\"Point 1:\");
print_int(p1.x);
print_int(p1.y);

print(\"Point 2:\");
print_int(p2.x);
print_int(p2.y);

// Modify struct fields
p1.x = 100;
p1.y = 200;

print(\"Modified Point 1:\");
print_int(p1.x);
print_int(p1.y);

// Struct with string field
let person: Person = Person { name: \"Alice\", age: 30 };
print(\"Person:\");
print(person.name);
print_int(person.age);

// Calculate distance
let dx = p2.x - p1.x;
let dy = p2.y - p1.y;
print(\"Distance components:\");
print_int(dx);
print_int(dy);
";

    print("Struct Support Compiler v13");
    print("============================");
    print("");
    print("Input program:");
    print("--------------");
    print(test_program);
    print("");
    
    let compiled = compile_program(test_program);
    
    print("Compiled output:");
    print("----------------");
    print(compiled);
}