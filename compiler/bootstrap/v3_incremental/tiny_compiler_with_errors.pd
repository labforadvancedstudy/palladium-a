// Tiny Palladium Compiler with Error Reporting
// Enhanced with line number tracking for better error messages

// Structure to track position in source
struct Position {
    line: i64;
    column: i64;
}

// Global variables for error tracking
let mut current_line = 1;
let mut current_column = 1;
let mut error_count = 0;

// Report an error with line and column information
fn report_error(message: String, line: i64, column: i64) {
    print("Error at line " + int_to_string(line) + ", column " + int_to_string(column) + ":");
    print("  " + message);
    error_count = error_count + 1;
}

// Track position as we scan through the source
fn update_position(ch: i64) {
    if ch == 10 { // newline
        current_line = current_line + 1;
        current_column = 1;
    } else {
        current_column = current_column + 1;
    }
}

// Get current position (for error reporting)
fn get_position() -> Position {
    let mut pos: Position;
    pos.line = current_line;
    pos.column = current_column;
    return pos;
}

fn is_same_string(s1: String, s2: String) -> bool {
    let len1 = string_len(s1);
    let len2 = string_len(s2);
    
    if len1 != len2 {
        return false;
    }
    
    let mut i = 0;
    while i < len1 {
        if string_char_at(s1, i) != string_char_at(s2, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

// Parse an expression with error reporting
fn parse_expr(expr: String, expr_line: i64) -> String {
    let mut result = "";
    let mut i = 0;
    let len = string_len(expr);
    
    while i < len {
        let ch = string_char_at(expr, i);
        
        // Skip leading whitespace
        if (ch == 32 || ch == 9 || ch == 10) && string_len(result) == 0 {
            i = i + 1;
            continue;
        }
        
        // Check if this is the start of an identifier or function call
        if (ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90) || ch == 95 { // a-z, A-Z, _
            let mut identifier = "";
            let start_i = i;
            
            // Collect the identifier
            while i < len {
                let id_ch = string_char_at(expr, i);
                if (id_ch >= 97 && id_ch <= 122) || (id_ch >= 65 && id_ch <= 90) || 
                   (id_ch >= 48 && id_ch <= 57) || id_ch == 95 { // a-z, A-Z, 0-9, _
                    identifier = identifier + string_from_char(id_ch);
                    i = i + 1;
                } else {
                    break;
                }
            }
            
            // Skip whitespace after identifier
            let mut j = i;
            while j < len && (string_char_at(expr, j) == 32 || string_char_at(expr, j) == 9) {
                j = j + 1;
            }
            
            // Check if it's a function call
            if j < len && string_char_at(expr, j) == 40 { // (
                // It's a function call - translate the function name
                if is_same_string(identifier, "string_len") {
                    result = result + "__pd_string_len";
                } else if is_same_string(identifier, "string_char_at") {
                    result = result + "__pd_string_char_at";
                } else if is_same_string(identifier, "string_from_char") {
                    result = result + "__pd_string_from_char";
                } else if is_same_string(identifier, "int_to_string") {
                    result = result + "__pd_int_to_string";
                } else if is_same_string(identifier, "file_open") {
                    result = result + "__pd_file_open";
                } else if is_same_string(identifier, "file_read_all") {
                    result = result + "__pd_file_read_all";
                } else if is_same_string(identifier, "file_write") {
                    result = result + "__pd_file_write";
                } else if is_same_string(identifier, "file_close") {
                    result = result + "__pd_file_close";
                } else if is_same_string(identifier, "file_exists") {
                    result = result + "__pd_file_exists";
                } else {
                    // Regular function call - keep as is
                    result = result + identifier;
                }
                
                // Copy whitespace
                while i < j {
                    result = result + string_from_char(string_char_at(expr, i));
                    i = i + 1;
                }
                
                // Copy the opening parenthesis
                result = result + "(";
                i = j + 1;
                
                // Parse the arguments recursively
                let mut paren_depth = 1;
                let mut arg_expr = "";
                while i < len && paren_depth > 0 {
                    let arg_ch = string_char_at(expr, i);
                    if arg_ch == 40 { // (
                        paren_depth = paren_depth + 1;
                        arg_expr = arg_expr + string_from_char(arg_ch);
                    } else if arg_ch == 41 { // )
                        paren_depth = paren_depth - 1;
                        if paren_depth > 0 {
                            arg_expr = arg_expr + string_from_char(arg_ch);
                        }
                    } else if arg_ch == 44 && paren_depth == 1 { // , at top level
                        // Process this argument
                        let processed_arg = parse_expr(arg_expr, expr_line);
                        result = result + processed_arg + ", ";
                        arg_expr = "";
                    } else {
                        arg_expr = arg_expr + string_from_char(arg_ch);
                    }
                    i = i + 1;
                }
                
                // Process the last argument if any
                if string_len(arg_expr) > 0 {
                    let processed_arg = parse_expr(arg_expr, expr_line);
                    result = result + processed_arg;
                }
                
                // Add closing parenthesis
                result = result + ")";
            } else {
                // Check for array access
                if j < len && string_char_at(expr, j) == 91 { // [
                    result = result + identifier;
                    i = j; // Position at the [
                } else if j + 1 < len && string_char_at(expr, j) == 46 && // .
                         ((string_char_at(expr, j + 1) >= 97 && string_char_at(expr, j + 1) <= 122) ||
                          (string_char_at(expr, j + 1) >= 65 && string_char_at(expr, j + 1) <= 90)) {
                    // Struct field access
                    result = result + identifier;
                    i = j; // Position at the .
                } else {
                    // Regular identifier
                    result = result + identifier;
                    i = j; // Skip the whitespace we consumed
                }
            }
        } else if ch == 34 { // "
            // String literal
            result = result + "\"";
            i = i + 1;
            while i < len {
                let str_ch = string_char_at(expr, i);
                if str_ch == 34 { // closing "
                    result = result + "\"";
                    i = i + 1;
                    break;
                } else if str_ch == 92 { // backslash
                    result = result + "\\";
                    i = i + 1;
                    if i < len {
                        let escape_ch = string_char_at(expr, i);
                        if escape_ch == 110 { // n
                            result = result + "n";
                        } else if escape_ch == 116 { // t
                            result = result + "t";
                        } else if escape_ch == 114 { // r
                            result = result + "r";
                        } else if escape_ch == 92 { // \
                            result = result + "\\";
                        } else if escape_ch == 34 { // "
                            result = result + "\"";
                        } else {
                            // Unknown escape - report error
                            report_error("Unknown escape sequence: \\" + string_from_char(escape_ch), expr_line, i64(i));
                            result = result + string_from_char(escape_ch);
                        }
                        i = i + 1;
                    }
                } else {
                    result = result + string_from_char(str_ch);
                    i = i + 1;
                }
            }
            
            // Check if string was terminated
            if i >= len {
                report_error("Unterminated string literal", expr_line, i64(len));
            }
        } else {
            // Regular character (operators, numbers, etc.)
            result = result + string_from_char(ch);
            i = i + 1;
        }
    }
    
    return result;
}

// Convert string concatenation to __pd_string_concat calls
fn convert_string_concat(expr: String, expr_line: i64) -> String {
    let mut result = "";
    let mut i = 0;
    let len = string_len(expr);
    let mut in_string = false;
    let mut left_operand = "";
    let mut found_plus = false;
    
    while i < len {
        let ch = string_char_at(expr, i);
        
        if ch == 34 && (i == 0 || string_char_at(expr, i-1) != 92) { // " not escaped
            in_string = !in_string;
            if found_plus {
                result = result + string_from_char(ch);
            } else {
                left_operand = left_operand + string_from_char(ch);
            }
        } else if ch == 43 && !in_string { // + outside string
            // Check if it's concat (next non-space char is ")
            let mut j = i + 1;
            while j < len && (string_char_at(expr, j) == 32 || string_char_at(expr, j) == 9) {
                j = j + 1;
            }
            
            if j < len && string_char_at(expr, j) == 34 { // Next is string
                if string_len(result) > 0 {
                    // Already have a concat in progress
                    result = "__pd_string_concat(" + result + ", " + left_operand + ")";
                } else {
                    result = left_operand;
                }
                found_plus = true;
                left_operand = "";
                i = j - 1; // Will be incremented at loop end
            } else {
                // Regular addition
                if found_plus {
                    result = result + string_from_char(ch);
                } else {
                    left_operand = left_operand + string_from_char(ch);
                }
            }
        } else {
            if found_plus {
                result = result + string_from_char(ch);
            } else {
                left_operand = left_operand + string_from_char(ch);
            }
        }
        
        i = i + 1;
    }
    
    // Handle final operand
    if found_plus {
        result = "__pd_string_concat(" + result + ", " + left_operand + ")";
    } else {
        result = left_operand;
    }
    
    return result;
}

// Enhanced parse_statement with error reporting
fn parse_statement(source: String, pos: i64, indent: String) -> String {
    let mut output = "";
    let mut p = pos;
    let len = string_len(source);
    
    // Skip whitespace
    while p < len && (string_char_at(source, p) == 32 || 
                      string_char_at(source, p) == 9 ||
                      string_char_at(source, p) == 10) {
        let ch = string_char_at(source, p);
        update_position(ch);
        p = p + 1;
    }
    
    // Track the line where this statement starts
    let stmt_line = current_line;
    
    // Look for "let"
    if p + 3 < len &&
       string_char_at(source, p) == 108 &&      // l
       string_char_at(source, p+1) == 101 &&    // e
       string_char_at(source, p+2) == 116 &&    // t
       (string_char_at(source, p+3) == 32 ||    // space
        string_char_at(source, p+3) == 9) {     // tab
        
        p = p + 4;
        
        // Skip whitespace
        while p < len && (string_char_at(source, p) == 32 || string_char_at(source, p) == 9) {
            update_position(string_char_at(source, p));
            p = p + 1;
        }
        
        // Check for "mut"
        let mut is_mut = false;
        if p + 3 < len &&
           string_char_at(source, p) == 109 &&      // m
           string_char_at(source, p+1) == 117 &&    // u
           string_char_at(source, p+2) == 116 &&    // t
           (string_char_at(source, p+3) == 32 ||    // space
            string_char_at(source, p+3) == 9) {     // tab
            is_mut = true;
            p = p + 4;
            
            // Skip whitespace after mut
            while p < len && (string_char_at(source, p) == 32 || string_char_at(source, p) == 9) {
                update_position(string_char_at(source, p));
                p = p + 1;
            }
        }
        
        // Get variable name
        let mut var_name = "";
        while p < len && ((string_char_at(source, p) >= 97 && string_char_at(source, p) <= 122) ||
                          (string_char_at(source, p) >= 65 && string_char_at(source, p) <= 90) ||
                          (string_char_at(source, p) >= 48 && string_char_at(source, p) <= 57) ||
                          string_char_at(source, p) == 95) {
            var_name = var_name + string_from_char(string_char_at(source, p));
            update_position(string_char_at(source, p));
            p = p + 1;
        }
        
        if string_len(var_name) == 0 {
            report_error("Expected variable name after 'let'", stmt_line, current_column);
            return output;
        }
        
        // Skip whitespace
        while p < len && (string_char_at(source, p) == 32 || string_char_at(source, p) == 9) {
            update_position(string_char_at(source, p));
            p = p + 1;
        }
        
        // Look for type annotation
        let mut var_type = "";
        if p < len && string_char_at(source, p) == 58 { // :
            update_position(58);
            p = p + 1;
            
            // Skip whitespace
            while p < len && (string_char_at(source, p) == 32 || string_char_at(source, p) == 9) {
                update_position(string_char_at(source, p));
                p = p + 1;
            }
            
            // Read type - handle array types like [i64; 10]
            if p < len && string_char_at(source, p) == 91 { // [
                var_type = "[";
                update_position(91);
                p = p + 1;
                
                // Read element type
                while p < len && string_char_at(source, p) != 59 && string_char_at(source, p) != 93 {
                    var_type = var_type + string_from_char(string_char_at(source, p));
                    update_position(string_char_at(source, p));
                    p = p + 1;
                }
                
                if p < len && string_char_at(source, p) == 59 { // ;
                    var_type = var_type + ";";
                    update_position(59);
                    p = p + 1;
                    
                    // Skip whitespace
                    while p < len && (string_char_at(source, p) == 32 || string_char_at(source, p) == 9) {
                        update_position(string_char_at(source, p));
                        p = p + 1;
                    }
                    
                    // Read array size
                    while p < len && string_char_at(source, p) != 93 {
                        var_type = var_type + string_from_char(string_char_at(source, p));
                        update_position(string_char_at(source, p));
                        p = p + 1;
                    }
                }
                
                if p < len && string_char_at(source, p) == 93 { // ]
                    var_type = var_type + "]";
                    update_position(93);
                    p = p + 1;
                } else {
                    report_error("Expected ']' to close array type", stmt_line, current_column);
                }
            } else {
                // Regular type name
                while p < len && ((string_char_at(source, p) >= 97 && string_char_at(source, p) <= 122) ||
                                  (string_char_at(source, p) >= 65 && string_char_at(source, p) <= 90) ||
                                  (string_char_at(source, p) >= 48 && string_char_at(source, p) <= 57) ||
                                  string_char_at(source, p) == 95) {
                    var_type = var_type + string_from_char(string_char_at(source, p));
                    update_position(string_char_at(source, p));
                    p = p + 1;
                }
            }
            
            // Skip whitespace
            while p < len && (string_char_at(source, p) == 32 || string_char_at(source, p) == 9) {
                update_position(string_char_at(source, p));
                p = p + 1;
            }
        }
        
        // Look for = or ;
        if p < len && string_char_at(source, p) == 61 { // =
            update_position(61);
            p = p + 1;
            
            // Skip whitespace
            while p < len && (string_char_at(source, p) == 32 || string_char_at(source, p) == 9) {
                update_position(string_char_at(source, p));
                p = p + 1;
            }
            
            // Check for array initialization [1, 2, 3]
            if p < len && string_char_at(source, p) == 91 { // [
                update_position(91);
                p = p + 1;
                
                // Infer array type if not specified
                if string_len(var_type) == 0 {
                    // Count elements for type inference
                    let mut elem_count = 0;
                    let mut scan_p = p;
                    let mut depth = 1;
                    
                    if scan_p < len && string_char_at(source, scan_p) != 93 { // not empty
                        elem_count = 1;
                    }
                    
                    while scan_p < len && depth > 0 {
                        let ch = string_char_at(source, scan_p);
                        if ch == 91 { // [
                            depth = depth + 1;
                        } else if ch == 93 { // ]
                            depth = depth - 1;
                        } else if ch == 44 && depth == 1 { // , at top level
                            elem_count = elem_count + 1;
                        }
                        scan_p = scan_p + 1;
                    }
                    
                    var_type = "[long long; " + int_to_string(elem_count) + "]";
                }
                
                // Generate C array initialization
                let c_type = "";
                let array_size = "";
                
                // Parse the type to extract element type and size
                let type_len = string_len(var_type);
                let mut type_i = 1; // Skip initial [
                let mut elem_type = "";
                
                // Read element type
                while type_i < type_len && string_char_at(var_type, type_i) != 59 {
                    elem_type = elem_type + string_from_char(string_char_at(var_type, type_i));
                    type_i = type_i + 1;
                }
                
                // Skip semicolon and whitespace
                if type_i < type_len && string_char_at(var_type, type_i) == 59 {
                    type_i = type_i + 1;
                    while type_i < type_len && string_char_at(var_type, type_i) == 32 {
                        type_i = type_i + 1;
                    }
                    
                    // Read array size
                    while type_i < type_len && string_char_at(var_type, type_i) != 93 {
                        array_size = array_size + string_from_char(string_char_at(var_type, type_i));
                        type_i = type_i + 1;
                    }
                }
                
                // Map element type to C type
                if is_same_string(elem_type, "i64") {
                    c_type = "long long";
                } else if is_same_string(elem_type, "bool") {
                    c_type = "bool";
                } else {
                    c_type = elem_type;
                    if string_len(elem_type) == 0 {
                        report_error("Unable to parse array element type", stmt_line, current_column);
                        c_type = "long long"; // Default
                    }
                }
                
                if string_len(array_size) == 0 {
                    report_error("Unable to parse array size", stmt_line, current_column);
                    array_size = "1"; // Default
                }
                
                output = output + indent + c_type + " " + var_name + "[" + array_size + "] = {";
                
                // Parse array elements
                let mut first_elem = true;
                while p < len && string_char_at(source, p) != 93 { // ]
                    // Skip whitespace
                    while p < len && (string_char_at(source, p) == 32 || 
                                      string_char_at(source, p) == 9 ||
                                      string_char_at(source, p) == 10) {
                        update_position(string_char_at(source, p));
                        p = p + 1;
                    }
                    
                    if p >= len || string_char_at(source, p) == 93 {
                        break;
                    }
                    
                    if !first_elem {
                        output = output + ", ";
                    }
                    first_elem = false;
                    
                    // Parse element expression
                    let mut elem_expr = "";
                    let mut depth = 0;
                    while p < len && (depth > 0 || (string_char_at(source, p) != 44 && string_char_at(source, p) != 93)) {
                        let ch = string_char_at(source, p);
                        
                        if ch == 40 || ch == 91 { // ( or [
                            depth = depth + 1;
                        } else if ch == 41 || ch == 93 { // ) or ]
                            if depth > 0 {
                                depth = depth - 1;
                            } else {
                                break;
                            }
                        }
                        
                        elem_expr = elem_expr + string_from_char(ch);
                        update_position(ch);
                        p = p + 1;
                    }
                    
                    let parsed_elem = parse_expr(elem_expr, stmt_line);
                    output = output + parsed_elem;
                    
                    // Skip comma
                    if p < len && string_char_at(source, p) == 44 {
                        update_position(44);
                        p = p + 1;
                    }
                }
                
                output = output + "};\n";
                
                // Skip closing ]
                if p < len && string_char_at(source, p) == 93 {
                    update_position(93);
                    p = p + 1;
                } else {
                    report_error("Expected ']' to close array initialization", stmt_line, current_column);
                }
                
                // Skip to semicolon
                while p < len && string_char_at(source, p) != 59 {
                    update_position(string_char_at(source, p));
                    p = p + 1;
                }
                if p < len {
                    update_position(59);
                    p = p + 1;
                }
                
                return output;
            } else {
                // Regular initialization
                let mut init_expr = "";
                let expr_start_col = current_column;
                
                while p < len && string_char_at(source, p) != 59 {
                    init_expr = init_expr + string_from_char(string_char_at(source, p));
                    update_position(string_char_at(source, p));
                    p = p + 1;
                }
                
                if p >= len {
                    report_error("Expected ';' after variable initialization", stmt_line, current_column);
                }
                
                // Check if init_expr is a string literal to infer type
                let init_trimmed = init_expr;
                let mut t = 0;
                let init_len = string_len(init_trimmed);
                
                // Skip leading whitespace
                while t < init_len && (string_char_at(init_trimmed, t) == 32 || string_char_at(init_trimmed, t) == 9) {
                    t = t + 1;
                }
                
                let is_string_literal = false;
                if t < init_len && string_char_at(init_trimmed, t) == 34 { // "
                    is_string_literal = true;
                }
                
                // Determine C type
                let c_type = "";
                if string_len(var_type) > 0 {
                    if is_same_string(var_type, "i64") {
                        c_type = "long long";
                    } else if is_same_string(var_type, "String") {
                        c_type = "const char*";
                    } else if is_same_string(var_type, "bool") {
                        c_type = "bool";
                    } else {
                        c_type = var_type;
                    }
                } else {
                    // Infer type
                    if is_string_literal {
                        c_type = "const char*";
                    } else {
                        c_type = "long long";
                    }
                }
                
                // Process the initialization expression
                let parsed_init = parse_expr(init_expr, stmt_line);
                let final_init = convert_string_concat(parsed_init, stmt_line);
                
                if is_mut {
                    output = output + indent + c_type + " " + var_name + " = " + final_init + ";\n";
                } else {
                    output = output + indent + "const " + c_type + " " + var_name + " = " + final_init + ";\n";
                }
            }
        } else if p < len && string_char_at(source, p) == 59 { // ;
            // Declaration without initialization
            let c_type = "";
            if string_len(var_type) > 0 {
                if is_same_string(var_type, "i64") {
                    c_type = "long long";
                } else if is_same_string(var_type, "String") {
                    c_type = "const char*";
                } else if is_same_string(var_type, "bool") {
                    c_type = "bool";
                } else {
                    // Handle struct types
                    c_type = var_type;
                }
            } else {
                report_error("Type annotation required for uninitialized variable", stmt_line, current_column);
                c_type = "long long"; // Default
            }
            
            output = output + indent + c_type + " " + var_name + ";\n";
            update_position(59);
            p = p + 1;
        } else {
            report_error("Expected '=' or ';' after variable declaration", stmt_line, current_column);
        }
        
        return output;
    }
    
    // [Rest of parse_statement continues with similar error tracking...]
    // For brevity, I'll add error reporting to key parsing points
    
    // Look for "break"
    if p + 5 < len &&
       string_char_at(source, p) == 98 &&     // b
       string_char_at(source, p+1) == 114 &&  // r
       string_char_at(source, p+2) == 101 &&  // e
       string_char_at(source, p+3) == 97 &&   // a
       string_char_at(source, p+4) == 107 &&  // k
       (string_char_at(source, p+5) == 59 ||  // ;
        string_char_at(source, p+5) == 32 ||  // space
        string_char_at(source, p+5) == 10) {  // newline
        
        output = output + indent + "break;\n";
        p = p + 5;
        
        // Skip to semicolon
        while p < len && string_char_at(source, p) != 59 {
            update_position(string_char_at(source, p));
            p = p + 1;
        }
        if p < len {
            update_position(59);
            p = p + 1;
        }
        
        return output;
    }
    
    // Look for "continue"
    if p + 8 < len &&
       string_char_at(source, p) == 99 &&     // c
       string_char_at(source, p+1) == 111 &&  // o
       string_char_at(source, p+2) == 110 &&  // n
       string_char_at(source, p+3) == 116 &&  // t
       string_char_at(source, p+4) == 105 &&  // i
       string_char_at(source, p+5) == 110 &&  // n
       string_char_at(source, p+6) == 117 &&  // u
       string_char_at(source, p+7) == 101 &&  // e
       (string_char_at(source, p+8) == 59 ||  // ;
        string_char_at(source, p+8) == 32 ||  // space
        string_char_at(source, p+8) == 10) {  // newline
        
        output = output + indent + "continue;\n";
        p = p + 8;
        
        // Skip to semicolon
        while p < len && string_char_at(source, p) != 59 {
            update_position(string_char_at(source, p));
            p = p + 1;
        }
        if p < len {
            update_position(59);
            p = p + 1;
        }
        
        return output;
    }
    
    // Look for "print"
    if p + 5 < len &&
       string_char_at(source, p) == 112 &&    // p
       string_char_at(source, p+1) == 114 &&  // r
       string_char_at(source, p+2) == 105 &&  // i
       string_char_at(source, p+3) == 110 &&  // n
       string_char_at(source, p+4) == 116 &&  // t
       string_char_at(source, p+5) == 40 {    // (
        
        p = p + 6;
        
        // Get print argument
        let mut arg = "";
        let mut paren_count = 1;
        while p < len && paren_count > 0 {
            let ch = string_char_at(source, p);
            if ch == 40 { // (
                paren_count = paren_count + 1;
                arg = arg + string_from_char(ch);
            } else if ch == 41 { // )
                paren_count = paren_count - 1;
                if paren_count > 0 {
                    arg = arg + string_from_char(ch);
                }
            } else {
                arg = arg + string_from_char(ch);
            }
            update_position(ch);
            p = p + 1;
        }
        
        if paren_count > 0 {
            report_error("Unclosed parenthesis in print statement", stmt_line, current_column);
        }
        
        // Process the argument
        let parsed_arg = parse_expr(arg, stmt_line);
        let final_arg = convert_string_concat(parsed_arg, stmt_line);
        
        output = output + indent + "printf(\"%s\\n\", " + final_arg + ");\n";
        
        // Skip semicolon
        while p < len && string_char_at(source, p) != 59 {
            update_position(string_char_at(source, p));
            p = p + 1;
        }
        if p < len {
            update_position(59);
            p = p + 1;
        }
        
        return output;
    }
    
    // If we get here, it's an unknown statement
    let stmt_preview = "";
    let preview_p = p;
    let preview_count = 0;
    while preview_p < len && preview_count < 20 && string_char_at(source, preview_p) != 10 {
        stmt_preview = stmt_preview + string_from_char(string_char_at(source, preview_p));
        preview_p = preview_p + 1;
        preview_count = preview_count + 1;
    }
    
    report_error("Unknown statement: " + stmt_preview + "...", stmt_line, current_column);
    
    // Skip to end of line
    while p < len && string_char_at(source, p) != 10 {
        update_position(string_char_at(source, p));
        p = p + 1;
    }
    
    return output;
}

// Main compiler function with error reporting
fn compile_program(source: String) -> String {
    // Reset error tracking
    current_line = 1;
    current_column = 1;
    error_count = 0;
    
    print("=== Tiny Palladium Compiler with Error Reporting ===");
    print("Compiling...");
    
    let mut output = "#include <stdio.h>\n";
    output = output + "#include <stdlib.h>\n";
    output = output + "#include <string.h>\n";
    output = output + "#include <stdbool.h>\n\n";
    
    // String operation helpers
    output = output + "// String operations\n";
    output = output + "long long __pd_string_len(const char* s) { return strlen(s); }\n";
    output = output + "long long __pd_string_char_at(const char* s, long long i) { return (unsigned char)s[i]; }\n";
    output = output + "const char* __pd_string_from_char(long long c) {\n";
    output = output + "    static char buf[2]; buf[0] = (char)c; buf[1] = '\\0'; return buf;\n";
    output = output + "}\n";
    output = output + "const char* __pd_string_concat(const char* a, const char* b) {\n";
    output = output + "    static char buf[1024]; snprintf(buf, 1024, \"%s%s\", a, b); return buf;\n";
    output = output + "}\n";
    output = output + "const char* __pd_int_to_string(long long n) {\n";
    output = output + "    static char buf[32]; snprintf(buf, 32, \"%lld\", n); return buf;\n";
    output = output + "}\n\n";
    
    // File operations
    output = output + "// File operations\n";
    output = output + "long long __pd_file_open(const char* path) {\n";
    output = output + "    FILE* f = fopen(path, \"r\");\n";
    output = output + "    return (long long)f;\n";
    output = output + "}\n";
    output = output + "const char* __pd_file_read_all(long long handle) {\n";
    output = output + "    FILE* f = (FILE*)handle;\n";
    output = output + "    if (!f) return \"\";\n";
    output = output + "    fseek(f, 0, SEEK_END);\n";
    output = output + "    long size = ftell(f);\n";
    output = output + "    fseek(f, 0, SEEK_SET);\n";
    output = output + "    char* buf = malloc(size + 1);\n";
    output = output + "    fread(buf, 1, size, f);\n";
    output = output + "    buf[size] = '\\0';\n";
    output = output + "    return buf;\n";
    output = output + "}\n";
    output = output + "bool __pd_file_write(long long handle, const char* content) {\n";
    output = output + "    FILE* f = (FILE*)handle;\n";
    output = output + "    if (!f) return false;\n";
    output = output + "    fprintf(f, \"%s\", content);\n";
    output = output + "    return true;\n";
    output = output + "}\n";
    output = output + "bool __pd_file_close(long long handle) {\n";
    output = output + "    FILE* f = (FILE*)handle;\n";
    output = output + "    if (!f) return false;\n";
    output = output + "    fclose(f);\n";
    output = output + "    return true;\n";
    output = output + "}\n";
    output = output + "bool __pd_file_exists(const char* path) {\n";
    output = output + "    FILE* f = fopen(path, \"r\");\n";
    output = output + "    if (f) { fclose(f); return true; }\n";
    output = output + "    return false;\n";
    output = output + "}\n\n";
    
    // Parse the source
    output = output + "int main() {\n";
    
    let mut pos = 0;
    while pos < string_len(source) {
        let stmt = parse_statement(source, pos, "    ");
        if string_len(stmt) == 0 {
            // Error or end of input
            break;
        }
        output = output + stmt;
        
        // Find next statement
        while pos < string_len(source) && string_char_at(source, pos) != 10 {
            pos = pos + 1;
        }
        if pos < string_len(source) {
            pos = pos + 1; // Skip newline
        }
    }
    
    output = output + "    return 0;\n";
    output = output + "}\n";
    
    // Report compilation results
    if error_count > 0 {
        print("Compilation failed with " + int_to_string(error_count) + " errors");
    } else {
        print("Compilation successful!");
    }
    
    return output;
}

// Test the enhanced compiler
fn main() {
    print("Testing Enhanced Tiny Compiler with Error Reporting");
    print("===================================================");
    
    // Test with intentional errors
    let test_program = "let x = \"unterminated string
let mut y;  // Missing type
let z = unknown_func();
print(\"Hello, World!\");
";
    
    let result = compile_program(test_program);
    
    print("\nGenerated C code:");
    print("==================");
    print(result);
}