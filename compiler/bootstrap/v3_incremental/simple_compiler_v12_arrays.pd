// Simple Palladium Compiler v12 with Array Support
// Adds static arrays, array indexing, and array literals
// Based on v11 with loops

// ============ Helper Functions (from v11) ============

fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57;
}

fn is_alpha(ch: i64) -> bool {
    return (ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90);
}

fn is_alphanum(ch: i64) -> bool {
    return is_alpha(ch) || is_digit(ch) || ch == 95;
}

fn is_whitespace(ch: i64) -> bool {
    return ch == 32 || ch == 9 || ch == 10 || ch == 13;
}

fn skip_whitespace(line: String, start: i64) -> i64 {
    let mut i = start;
    let len = string_len(line);
    while i < len {
        let ch = string_char_at(line, i);
        if !is_whitespace(ch) {
            break;
        }
        i = i + 1;
    }
    return i;
}

fn extract_identifier(line: String, start: i64) -> String {
    let mut result = "";
    let mut i = start;
    let len = string_len(line);
    
    while i < len {
        let ch = string_char_at(line, i);
        if is_alphanum(ch) {
            result = string_concat(result, string_from_char(ch));
        } else {
            break;
        }
        i = i + 1;
    }
    
    return result;
}

fn extract_number(line: String, start: i64) -> String {
    let mut result = "";
    let mut i = start;
    let len = string_len(line);
    
    while i < len {
        let ch = string_char_at(line, i);
        if is_digit(ch) {
            result = string_concat(result, string_from_char(ch));
        } else {
            break;
        }
        i = i + 1;
    }
    
    return result;
}

fn string_eq(a: String, b: String) -> bool {
    let len_a = string_len(a);
    let len_b = string_len(b);
    
    if len_a != len_b {
        return false;
    }
    
    let mut i = 0;
    while i < len_a {
        if string_char_at(a, i) != string_char_at(b, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

fn substring(str: String, start: i64, end: i64) -> String {
    let mut result = "";
    let mut i = start;
    
    while i <= end && i < string_len(str) {
        result = string_concat(result, string_from_char(string_char_at(str, i)));
        i = i + 1;
    }
    
    return result;
}

fn trim(str: String) -> String {
    let len = string_len(str);
    if len == 0 {
        return str;
    }
    
    let mut start = 0;
    while start < len && is_whitespace(string_char_at(str, start)) {
        start = start + 1;
    }
    
    let mut end = len - 1;
    while end >= 0 && is_whitespace(string_char_at(str, end)) {
        end = end - 1;
    }
    
    if start > end {
        return "";
    }
    
    return substring(str, start, end);
}

fn starts_with_at(str: String, prefix: String, pos: i64) -> bool {
    let str_len = string_len(str);
    let prefix_len = string_len(prefix);
    
    if pos + prefix_len > str_len {
        return false;
    }
    
    let mut i = 0;
    while i < prefix_len {
        if string_char_at(str, pos + i) != string_char_at(prefix, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

fn find_matching_bracket(line: String, start: i64) -> i64 {
    let mut depth = 0;
    let mut i = start;
    let len = string_len(line);
    
    while i < len {
        let ch = string_char_at(line, i);
        if ch == 91 { // '['
            depth = depth + 1;
        } else if ch == 93 { // ']'
            depth = depth - 1;
            if depth == 0 {
                return i;
            }
        }
        i = i + 1;
    }
    
    return -1;
}

// ============ Type System Extended for Arrays ============

const TYPE_VOID: i64 = 0;
const TYPE_I64: i64 = 1;
const TYPE_STRING: i64 = 2;
const TYPE_BOOL: i64 = 3;
const TYPE_ARRAY_I64: i64 = 11;  // Array of i64
const TYPE_ARRAY_STRING: i64 = 12; // Array of string

fn type_to_c(type_id: i64) -> String {
    if type_id == TYPE_VOID { return "void"; }
    if type_id == TYPE_I64 { return "long long"; }
    if type_id == TYPE_STRING { return "const char*"; }
    if type_id == TYPE_BOOL { return "int"; }
    if type_id == TYPE_ARRAY_I64 { return "long long"; }
    if type_id == TYPE_ARRAY_STRING { return "const char*"; }
    return "void*";
}

fn is_array_type(type_id: i64) -> bool {
    return type_id == TYPE_ARRAY_I64 || type_id == TYPE_ARRAY_STRING;
}

fn get_array_element_type(array_type: i64) -> i64 {
    if array_type == TYPE_ARRAY_I64 { return TYPE_I64; }
    if array_type == TYPE_ARRAY_STRING { return TYPE_STRING; }
    return TYPE_VOID;
}

// ============ Variable Tracking with Arrays ============

struct VarInfo {
    name: String,
    type_id: i64,
    is_array: bool,
    array_size: i64,
}

let mut variables: [VarInfo; 100];
let mut var_count = 0;

fn add_variable(name: String, type_id: i64, is_array: bool, array_size: i64) {
    if var_count < 100 {
        variables[var_count] = VarInfo {
            name: name,
            type_id: type_id,
            is_array: is_array,
            array_size: array_size,
        };
        var_count = var_count + 1;
    }
}

fn find_variable(name: String) -> i64 {
    let mut i = 0;
    while i < var_count {
        if string_eq(variables[i].name, name) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

// ============ Expression Parsing ============

// Parse array indexing expression (e.g., arr[i])
fn parse_array_index(expr: String, start: i64) -> String {
    let var_name = extract_identifier(expr, start);
    let i = start + string_len(var_name);
    
    if i >= string_len(expr) || string_char_at(expr, i) != 91 { // '['
        return var_name; // Not an array index
    }
    
    let close_bracket = find_matching_bracket(expr, i);
    if close_bracket < 0 {
        return var_name; // Error: no closing bracket
    }
    
    let index_expr = substring(expr, i + 1, close_bracket - 1);
    return string_concat(string_concat(string_concat(var_name, "["), index_expr), "]");
}

// Parse array literal [1, 2, 3]
fn parse_array_literal(line: String, start: i64) -> String {
    let close_bracket = find_matching_bracket(line, start);
    if close_bracket < 0 {
        return "// Error: unclosed array literal";
    }
    
    let mut result = "{";
    let mut i = start + 1; // Skip '['
    let mut first = true;
    
    while i < close_bracket {
        let ch = string_char_at(line, i);
        
        if ch == 44 { // ','
            result = string_concat(result, ", ");
            i = i + 1;
            i = skip_whitespace(line, i);
            first = false;
        } else if !is_whitespace(ch) {
            if !first && string_char_at(result, string_len(result) - 2) != 44 {
                result = string_concat(result, ", ");
            }
            
            // Parse element
            if is_digit(ch) || (ch == 45 && i + 1 < close_bracket && is_digit(string_char_at(line, i + 1))) {
                let num = extract_number(line, i);
                result = string_concat(result, num);
                i = i + string_len(num);
            } else if ch == 34 { // '"'
                // String literal
                let mut str_end = i + 1;
                while str_end < close_bracket && string_char_at(line, str_end) != 34 {
                    str_end = str_end + 1;
                }
                let str_literal = substring(line, i, str_end);
                result = string_concat(result, str_literal);
                i = str_end + 1;
            } else if is_alpha(ch) {
                // Variable or expression
                let id = extract_identifier(line, i);
                result = string_concat(result, parse_array_index(line, i));
                i = i + string_len(id);
                
                // Check for array indexing
                if i < close_bracket && string_char_at(line, i) == 91 {
                    let idx_end = find_matching_bracket(line, i);
                    if idx_end > 0 {
                        i = idx_end + 1;
                    }
                }
            } else {
                i = i + 1;
            }
            
            first = false;
        } else {
            i = i + 1;
        }
    }
    
    result = string_concat(result, "}");
    return result;
}

// ============ Statement Compilation ============

// Compile let statement with array support
fn compile_let_array(line: String, indent: String) -> String {
    let mut i = skip_whitespace(line, 4); // After "let "
    
    // Check for mut
    let is_mut = starts_with_at(line, "mut ", i);
    if is_mut {
        i = skip_whitespace(line, i + 4);
    }
    
    // Get variable name
    let var_name = extract_identifier(line, i);
    if string_len(var_name) == 0 {
        return string_concat(indent, "// Error: Expected variable name\n");
    }
    
    i = i + string_len(var_name);
    i = skip_whitespace(line, i);
    
    // Check for type annotation
    let mut var_type = TYPE_I64;
    let mut is_array = false;
    let mut array_size = 0;
    
    if i < string_len(line) && string_char_at(line, i) == 58 { // ':'
        i = skip_whitespace(line, i + 1);
        
        // Check for array type [type; size]
        if string_char_at(line, i) == 91 { // '['
            is_array = true;
            i = i + 1;
            
            // Get element type
            let elem_type = extract_identifier(line, i);
            if string_eq(elem_type, "i64") {
                var_type = TYPE_ARRAY_I64;
            } else if string_eq(elem_type, "String") {
                var_type = TYPE_ARRAY_STRING;
            }
            
            i = i + string_len(elem_type);
            i = skip_whitespace(line, i);
            
            // Skip semicolon
            if string_char_at(line, i) == 59 { // ';'
                i = skip_whitespace(line, i + 1);
                
                // Get array size
                let size_str = extract_number(line, i);
                array_size = string_to_int(size_str);
                i = i + string_len(size_str);
                
                // Skip closing bracket
                i = skip_whitespace(line, i);
                if string_char_at(line, i) == 93 { // ']'
                    i = i + 1;
                }
            }
        } else {
            // Regular type
            let type_name = extract_identifier(line, i);
            if string_eq(type_name, "i64") {
                var_type = TYPE_I64;
            } else if string_eq(type_name, "String") {
                var_type = TYPE_STRING;
            }
            i = i + string_len(type_name);
        }
        
        i = skip_whitespace(line, i);
    }
    
    // Add variable to symbol table
    add_variable(var_name, var_type, is_array, array_size);
    
    // Generate C code
    let mut result = indent;
    
    if is_array {
        result = string_concat(result, type_to_c(get_array_element_type(var_type)));
        result = string_concat(result, " ");
        result = string_concat(result, var_name);
        result = string_concat(result, "[");
        result = string_concat(result, int_to_string(array_size));
        result = string_concat(result, "]");
    } else {
        result = string_concat(result, type_to_c(var_type));
        result = string_concat(result, " ");
        result = string_concat(result, var_name);
    }
    
    // Check for initialization
    if i < string_len(line) && string_char_at(line, i) == 61 { // '='
        i = skip_whitespace(line, i + 1);
        
        if is_array && string_char_at(line, i) == 91 { // '[' - array literal
            result = string_concat(result, " = ");
            result = string_concat(result, parse_array_literal(line, i));
        } else {
            // Regular initialization
            let init_expr = substring(line, i, string_len(line) - 1);
            if string_char_at(init_expr, string_len(init_expr) - 1) == 59 {
                init_expr = substring(init_expr, 0, string_len(init_expr) - 2);
            }
            result = string_concat(result, " = ");
            result = string_concat(result, init_expr);
        }
    }
    
    result = string_concat(result, ";\n");
    return result;
}

// Compile array indexing in expressions
fn compile_expression_with_arrays(expr: String) -> String {
    let mut result = "";
    let mut i = 0;
    
    while i < string_len(expr) {
        let ch = string_char_at(expr, i);
        
        if is_alpha(ch) {
            let id = extract_identifier(expr, i);
            result = string_concat(result, id);
            i = i + string_len(id);
            
            // Check for array indexing
            if i < string_len(expr) && string_char_at(expr, i) == 91 { // '['
                let close = find_matching_bracket(expr, i);
                if close > 0 {
                    let index = substring(expr, i, close);
                    result = string_concat(result, index);
                    i = close + 1;
                }
            }
        } else {
            result = string_concat(result, string_from_char(ch));
            i = i + 1;
        }
    }
    
    return result;
}

// Main statement compiler
fn compile_statement(line: String, indent: String) -> String {
    let trimmed = trim(line);
    
    if string_len(trimmed) == 0 {
        return "";
    }
    
    // Array-aware let statement
    if starts_with_at(trimmed, "let ", 0) {
        return compile_let_array(trimmed, indent);
    }
    
    // Array element assignment (e.g., arr[i] = value)
    if is_alpha(string_char_at(trimmed, 0)) {
        let var_name = extract_identifier(trimmed, 0);
        let i = string_len(var_name);
        
        if i < string_len(trimmed) && string_char_at(trimmed, i) == 91 { // '['
            let close = find_matching_bracket(trimmed, i);
            if close > 0 {
                let eq_pos = skip_whitespace(trimmed, close + 1);
                if eq_pos < string_len(trimmed) && string_char_at(trimmed, eq_pos) == 61 { // '='
                    let lhs = substring(trimmed, 0, eq_pos - 1);
                    let rhs = substring(trimmed, eq_pos + 1, string_len(trimmed) - 1);
                    if string_char_at(rhs, string_len(rhs) - 1) == 59 {
                        rhs = substring(rhs, 0, string_len(rhs) - 2);
                    }
                    
                    return string_concat(string_concat(string_concat(string_concat(string_concat(indent, compile_expression_with_arrays(lhs)), " = "), compile_expression_with_arrays(trim(rhs))), ";\n"));
                }
            }
        }
    }
    
    // Print statements with array support
    if starts_with_at(trimmed, "print_int(", 0) {
        let start = 10;
        let mut end = start;
        let mut paren_count = 1;
        
        while end < string_len(trimmed) && paren_count > 0 {
            let ch = string_char_at(trimmed, end);
            if ch == 40 { paren_count = paren_count + 1; }
            if ch == 41 { paren_count = paren_count - 1; }
            end = end + 1;
        }
        
        let arg = substring(trimmed, start, end - 2);
        let compiled_arg = compile_expression_with_arrays(arg);
        return string_concat(string_concat(string_concat(indent, "printf(\"%lld\\n\", (long long)"), compiled_arg), ");\n");
    }
    
    if starts_with_at(trimmed, "print(", 0) {
        let start = 6;
        let mut end = start;
        let mut paren_count = 1;
        
        while end < string_len(trimmed) && paren_count > 0 {
            let ch = string_char_at(trimmed, end);
            if ch == 40 { paren_count = paren_count + 1; }
            if ch == 41 { paren_count = paren_count - 1; }
            end = end + 1;
        }
        
        let arg = substring(trimmed, start, end - 2);
        return string_concat(string_concat(string_concat(indent, "printf(\"%s\\n\", "), arg), ");\n");
    }
    
    // Regular assignment with array support
    let eq_pos = 0;
    while eq_pos < string_len(trimmed) && string_char_at(trimmed, eq_pos) != 61 {
        eq_pos = eq_pos + 1;
    }
    
    if eq_pos > 0 && eq_pos < string_len(trimmed) - 1 {
        let lhs = trim(substring(trimmed, 0, eq_pos - 1));
        let rhs = trim(substring(trimmed, eq_pos + 1, string_len(trimmed) - 1));
        if string_char_at(rhs, string_len(rhs) - 1) == 59 {
            rhs = substring(rhs, 0, string_len(rhs) - 2);
        }
        
        return string_concat(string_concat(string_concat(string_concat(string_concat(indent, compile_expression_with_arrays(lhs)), " = "), compile_expression_with_arrays(rhs)), ";\n"));
    }
    
    // Other statements
    return string_concat(string_concat(indent, trimmed), "\n");
}

// Helper to convert string to int
fn string_to_int(s: String) -> i64 {
    let mut result = 0;
    let mut i = 0;
    
    while i < string_len(s) {
        let ch = string_char_at(s, i);
        if is_digit(ch) {
            result = result * 10 + (ch - 48);
        }
        i = i + 1;
    }
    
    return result;
}

// ============ Main Compiler ============

fn compile_program(source: String) -> String {
    // Reset globals
    var_count = 0;
    
    let mut output = "#include <stdio.h>\n#include <string.h>\n\n";
    output = string_concat(output, "int main() {\n");
    
    // Process line by line
    let mut i = 0;
    let mut current_line = "";
    
    while i < string_len(source) {
        let ch = string_char_at(source, i);
        
        if ch == 10 { // newline
            if string_len(trim(current_line)) > 0 {
                output = string_concat(output, compile_statement(current_line, "    "));
            }
            current_line = "";
        } else if ch != 13 { // not carriage return
            current_line = string_concat(current_line, string_from_char(ch));
        }
        
        i = i + 1;
    }
    
    // Handle last line
    if string_len(trim(current_line)) > 0 {
        output = string_concat(output, compile_statement(current_line, "    "));
    }
    
    output = string_concat(output, "    return 0;\n");
    output = string_concat(output, "}\n");
    
    return output;
}

// ============ Test Program ============

fn main() {
    let test_program = "// Test program with arrays
let arr: [i64; 5] = [10, 20, 30, 40, 50];

print(\"Array elements:\");
print_int(arr[0]);
print_int(arr[1]);
print_int(arr[2]);
print_int(arr[3]);
print_int(arr[4]);

// Modify array element
arr[2] = 99;
print(\"After modification:\");
print_int(arr[2]);

// Array with loop
print(\"Loop through array:\");
let mut i = 0;
while i < 5 {
    print_int(arr[i]);
    i = i + 1;
}

// Sum array elements
let mut sum = 0;
i = 0;
while i < 5 {
    sum = sum + arr[i];
    i = i + 1;
}
print(\"Sum of array:\");
print_int(sum);

// String array
let names: [String; 3] = [\"Alice\", \"Bob\", \"Charlie\"];
print(\"Names:\");
print(names[0]);
print(names[1]);
print(names[2]);
";

    print("Array Support Compiler v12");
    print("===========================");
    print("");
    print("Input program:");
    print("--------------");
    print(test_program);
    print("");
    
    let compiled = compile_program(test_program);
    
    print("Compiled output:");
    print("----------------");
    print(compiled);
}