// AST (Abstract Syntax Tree) for Palladium
// "The blueprint of legends"

// Type representation
enum Type {
    I32,
    I64,
    Bool,
    String,
    Unit,
    Custom(String),
}

// Binary operators
enum BinOp {
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    Eq,
    Ne,
    Lt,
    Gt,
    Le,
    Ge,
    And,
    Or,
}

// Unary operators
enum UnaryOp {
    Neg,
    Not,
}

// Expressions
enum Expr {
    Integer(i64),
    String(String),
    Bool(bool),
    Ident(String),
    Binary {
        left: Box<Expr>,
        op: BinOp,
        right: Box<Expr>,
    },
    Unary {
        op: UnaryOp,
        operand: Box<Expr>,
    },
    Call {
        func: String,
        args: Vec<Expr>,
    },
    Index {
        array: Box<Expr>,
        index: Box<Expr>,
    },
    FieldAccess {
        object: Box<Expr>,
        field: String,
    },
}

// Statements
enum Stmt {
    Let {
        name: String,
        ty: Option<Type>,
        value: Expr,
        mutable: bool,
    },
    Assign {
        target: String,
        value: Expr,
    },
    Return(Option<Expr>),
    Expr(Expr),
    If {
        condition: Expr,
        then_branch: Vec<Stmt>,
        else_branch: Option<Vec<Stmt>>,
    },
    While {
        condition: Expr,
        body: Vec<Stmt>,
    },
    For {
        var: String,
        start: Expr,
        end: Expr,
        body: Vec<Stmt>,
    },
}

// Function parameter
struct Param {
    name: String,
    ty: Type,
    mutable: bool,
}

// Function definition
struct Function {
    name: String,
    params: Vec<Param>,
    return_type: Option<Type>,
    body: Vec<Stmt>,
    is_public: bool,
}

// Struct field
struct Field {
    name: String,
    ty: Type,
}

// Struct definition
struct StructDef {
    name: String,
    fields: Vec<Field>,
    is_public: bool,
}

// Top-level items
enum Item {
    Function(Function),
    Struct(StructDef),
    Import(String),
}

// Program - root of AST
struct Program {
    items: Vec<Item>,
}

// Helper functions for creating AST nodes
pub fn create_program() -> Program {
    return Program {
        items: Vec::new(),
    };
}

pub fn create_function(name: String, params: Vec<Param>, return_type: Option<Type>, body: Vec<Stmt>, is_public: bool) -> Function {
    return Function {
        name: name,
        params: params,
        return_type: return_type,
        body: body,
        is_public: is_public,
    };
}

pub fn create_param(name: String, ty: Type, mutable: bool) -> Param {
    return Param {
        name: name,
        ty: ty,
        mutable: mutable,
    };
}

pub fn create_let_stmt(name: String, ty: Option<Type>, value: Expr, mutable: bool) -> Stmt {
    return Stmt::Let {
        name: name,
        ty: ty,
        value: value,
        mutable: mutable,
    };
}

pub fn create_assign_stmt(target: String, value: Expr) -> Stmt {
    return Stmt::Assign {
        target: target,
        value: value,
    };
}

pub fn create_return_stmt(value: Option<Expr>) -> Stmt {
    return Stmt::Return(value);
}

pub fn create_if_stmt(condition: Expr, then_branch: Vec<Stmt>, else_branch: Option<Vec<Stmt>>) -> Stmt {
    return Stmt::If {
        condition: condition,
        then_branch: then_branch,
        else_branch: else_branch,
    };
}

pub fn create_while_stmt(condition: Expr, body: Vec<Stmt>) -> Stmt {
    return Stmt::While {
        condition: condition,
        body: body,
    };
}

pub fn create_binary_expr(left: Expr, op: BinOp, right: Expr) -> Expr {
    return Expr::Binary {
        left: Box::new(left),
        op: op,
        right: Box::new(right),
    };
}

pub fn create_unary_expr(op: UnaryOp, operand: Expr) -> Expr {
    return Expr::Unary {
        op: op,
        operand: Box::new(operand),
    };
}

pub fn create_call_expr(func: String, args: Vec<Expr>) -> Expr {
    return Expr::Call {
        func: func,
        args: args,
    };
}