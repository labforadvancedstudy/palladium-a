// Simple Parser - Minimal expression parser that compiles
// Demonstrates parsing in Palladium

// Token types
fn TK_EOF() -> i64 { return 0; }
fn TK_NUMBER() -> i64 { return 1; }
fn TK_PLUS() -> i64 { return 2; }
fn TK_STAR() -> i64 { return 3; }

// Simple expression evaluator
fn evaluate(tokens: [i64; 10], count: i64) -> i64 {
    if count == 0 {
        return 0;
    }
    
    // Just sum all numbers for now
    let mut result = 0;
    let mut i = 0;
    while i < count {
        if i % 2 == 0 {  // Even positions are numbers
            result = result + tokens[i];
        }
        i = i + 1;
    }
    return result;
}

fn main() {
    print("ðŸŒ³ Simple Palladium Parser\n");
    print("=========================\n\n");
    
    // Expression: 10 + 20 + 30
    let tokens = [10, TK_PLUS(), 20, TK_PLUS(), 30, 0, 0, 0, 0, 0];
    let count = 5;
    
    print("Expression: 10 + 20 + 30\n");
    print("Expected: 60\n");
    
    let result = evaluate(tokens, count);
    print("Result: ");
    print_int(result);
    print("\n");
    
    if result == 60 {
        print("\nâœ… Parser works correctly!\n");
    }
    
    print("\nðŸŽ¯ This parser is written in Palladium!\n");
}