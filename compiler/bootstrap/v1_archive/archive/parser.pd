// Palladium Parser - Complete Implementation
// Builds Abstract Syntax Tree from tokens

struct AstNode {
    kind: i64,
    value: String,
    children: [AstNode; 100],
    child_count: i64,
    ty: Type,
    line: i64,
    column: i64,
}

struct Type {
    kind: i64,
    name: String,
    element_type: i64,  // For arrays
    size: i64,          // For arrays
}

struct Parser {
    tokens: [Token; 10000],
    token_count: i64,
    current: i64,
    had_error: bool,
    error_msg: String,
}

// AST Node kinds
fn NODE_PROGRAM() -> i64 { return 1; }
fn NODE_FUNCTION() -> i64 { return 2; }
fn NODE_PARAM() -> i64 { return 3; }
fn NODE_BLOCK() -> i64 { return 4; }
fn NODE_STMT_LET() -> i64 { return 5; }
fn NODE_STMT_RETURN() -> i64 { return 6; }
fn NODE_STMT_IF() -> i64 { return 7; }
fn NODE_STMT_WHILE() -> i64 { return 8; }
fn NODE_STMT_FOR() -> i64 { return 9; }
fn NODE_STMT_EXPR() -> i64 { return 10; }
fn NODE_STMT_ASSIGN() -> i64 { return 11; }
fn NODE_EXPR_BINARY() -> i64 { return 20; }
fn NODE_EXPR_UNARY() -> i64 { return 21; }
fn NODE_EXPR_CALL() -> i64 { return 22; }
fn NODE_EXPR_IDENT() -> i64 { return 23; }
fn NODE_EXPR_INT() -> i64 { return 24; }
fn NODE_EXPR_STRING() -> i64 { return 25; }
fn NODE_EXPR_BOOL() -> i64 { return 26; }
fn NODE_EXPR_ARRAY() -> i64 { return 27; }
fn NODE_EXPR_INDEX() -> i64 { return 28; }
fn NODE_EXPR_FIELD() -> i64 { return 29; }
fn NODE_EXPR_STRUCT() -> i64 { return 30; }
fn NODE_TYPE() -> i64 { return 40; }
fn NODE_STRUCT_DEF() -> i64 { return 41; }
fn NODE_ENUM_DEF() -> i64 { return 42; }
fn NODE_MATCH() -> i64 { return 43; }
fn NODE_MATCH_ARM() -> i64 { return 44; }

// Type kinds
fn TYPE_UNKNOWN() -> i64 { return 0; }
fn TYPE_UNIT() -> i64 { return 1; }
fn TYPE_I32() -> i64 { return 2; }
fn TYPE_I64() -> i64 { return 3; }
fn TYPE_BOOL() -> i64 { return 4; }
fn TYPE_STRING() -> i64 { return 5; }
fn TYPE_ARRAY() -> i64 { return 6; }
fn TYPE_STRUCT() -> i64 { return 7; }
fn TYPE_ENUM() -> i64 { return 8; }

// Create parser
fn parser_new(tokens: [Token; 10000], count: i64) -> Parser {
    return Parser {
        tokens: tokens,
        token_count: count,
        current: 0,
        had_error: false,
        error_msg: "",
    };
}

// Check if at end
fn is_at_end(parser: Parser) -> bool {
    return parser.current >= parser.token_count || 
           parser.tokens[parser.current].kind == TK_EOF();
}

// Peek current token
fn peek(parser: Parser) -> Token {
    if is_at_end(parser) {
        return parser.tokens[parser.token_count - 1]; // EOF token
    }
    return parser.tokens[parser.current];
}

// Check if current token matches
fn check(parser: Parser, kind: i64) -> bool {
    if is_at_end(parser) {
        return false;
    }
    return parser.tokens[parser.current].kind == kind;
}

// Advance to next token
fn advance(mut parser: Parser) -> Token {
    if !is_at_end(parser) {
        parser.current = parser.current + 1;
    }
    return parser.tokens[parser.current - 1];
}

// Consume token of expected type
fn consume(mut parser: Parser, kind: i64, message: String) -> bool {
    if check(parser, kind) {
        advance(parser);
        return true;
    }
    
    parser.had_error = true;
    parser.error_msg = message;
    return false;
}

// Create empty AST node
fn empty_node() -> AstNode {
    let empty_child = AstNode {
        kind: 0,
        value: "",
        children: [empty_node(); 0],  // Will cause recursion - fix in real impl
        child_count: 0,
        ty: Type { kind: TYPE_UNKNOWN(), name: "", element_type: 0, size: 0 },
        line: 0,
        column: 0,
    };
    
    return AstNode {
        kind: 0,
        value: "",
        children: [empty_child; 100],
        child_count: 0,
        ty: Type { kind: TYPE_UNKNOWN(), name: "", element_type: 0, size: 0 },
        line: 0,
        column: 0,
    };
}

// Create AST node
fn create_node(kind: i64, value: String) -> AstNode {
    let mut node = empty_node();
    node.kind = kind;
    node.value = value;
    return node;
}

// Add child to node
fn add_child(mut parent: AstNode, child: AstNode) {
    if parent.child_count < 100 {
        parent.children[parent.child_count] = child;
        parent.child_count = parent.child_count + 1;
    }
}

// Parse type
fn parse_type(mut parser: Parser) -> Type {
    let token = peek(parser);
    
    if token.kind == TK_I32() {
        advance(parser);
        return Type { kind: TYPE_I32(), name: "i32", element_type: 0, size: 0 };
    }
    
    if token.kind == TK_I64() {
        advance(parser);
        return Type { kind: TYPE_I64(), name: "i64", element_type: 0, size: 0 };
    }
    
    if token.kind == TK_BOOL() {
        advance(parser);
        return Type { kind: TYPE_BOOL(), name: "bool", element_type: 0, size: 0 };
    }
    
    if token.kind == TK_STRING_TYPE() {
        advance(parser);
        return Type { kind: TYPE_STRING(), name: "String", element_type: 0, size: 0 };
    }
    
    if token.kind == TK_IDENT() {
        let name = token.value;
        advance(parser);
        
        // Check for array type
        if check(parser, TK_LBRACKET()) {
            advance(parser);
            consume(parser, TK_RBRACKET(), "Expected ']' after '['");
            return Type { kind: TYPE_ARRAY(), name: name, element_type: 0, size: 0 };
        }
        
        return Type { kind: TYPE_STRUCT(), name: name, element_type: 0, size: 0 };
    }
    
    parser.had_error = true;
    parser.error_msg = "Expected type";
    return Type { kind: TYPE_UNKNOWN(), name: "", element_type: 0, size: 0 };
}

// Parse primary expression
fn parse_primary(mut parser: Parser) -> AstNode {
    let token = peek(parser);
    
    // Integer literal
    if token.kind == TK_INTEGER() {
        advance(parser);
        let mut node = create_node(NODE_EXPR_INT(), token.value);
        node.ty = Type { kind: TYPE_I64(), name: "i64", element_type: 0, size: 0 };
        return node;
    }
    
    // String literal
    if token.kind == TK_STRING() {
        advance(parser);
        let mut node = create_node(NODE_EXPR_STRING(), token.value);
        node.ty = Type { kind: TYPE_STRING(), name: "String", element_type: 0, size: 0 };
        return node;
    }
    
    // Boolean literals
    if token.kind == TK_TRUE() || token.kind == TK_FALSE() {
        advance(parser);
        let mut node = create_node(NODE_EXPR_BOOL(), token.value);
        node.ty = Type { kind: TYPE_BOOL(), name: "bool", element_type: 0, size: 0 };
        return node;
    }
    
    // Identifier
    if token.kind == TK_IDENT() {
        let name = token.value;
        advance(parser);
        
        // Function call
        if check(parser, TK_LPAREN()) {
            return parse_call(parser, name);
        }
        
        // Struct literal
        if check(parser, TK_LBRACE()) {
            return parse_struct_literal(parser, name);
        }
        
        return create_node(NODE_EXPR_IDENT(), name);
    }
    
    // Parenthesized expression
    if token.kind == TK_LPAREN() {
        advance(parser);
        let expr = parse_expression(parser);
        consume(parser, TK_RPAREN(), "Expected ')' after expression");
        return expr;
    }
    
    // Array literal
    if token.kind == TK_LBRACKET() {
        return parse_array_literal(parser);
    }
    
    parser.had_error = true;
    parser.error_msg = "Expected expression";
    return empty_node();
}

// Parse function call
fn parse_call(mut parser: Parser, name: String) -> AstNode {
    let mut node = create_node(NODE_EXPR_CALL(), name);
    
    consume(parser, TK_LPAREN(), "Expected '(' after function name");
    
    // Parse arguments
    if !check(parser, TK_RPAREN()) {
        while true {
            let arg = parse_expression(parser);
            add_child(node, arg);
            
            if !check(parser, TK_COMMA()) {
                break;
            }
            advance(parser); // consume comma
        }
    }
    
    consume(parser, TK_RPAREN(), "Expected ')' after arguments");
    return node;
}

// Parse struct literal
fn parse_struct_literal(mut parser: Parser, name: String) -> AstNode {
    let mut node = create_node(NODE_EXPR_STRUCT(), name);
    
    consume(parser, TK_LBRACE(), "Expected '{' after struct name");
    
    // Parse fields
    while !check(parser, TK_RBRACE()) && !is_at_end(parser) {
        let field_name = peek(parser).value;
        consume(parser, TK_IDENT(), "Expected field name");
        consume(parser, TK_COLON(), "Expected ':' after field name");
        
        let value = parse_expression(parser);
        let mut field = create_node(NODE_EXPR_FIELD(), field_name);
        add_child(field, value);
        add_child(node, field);
        
        if !check(parser, TK_RBRACE()) {
            consume(parser, TK_COMMA(), "Expected ',' after field");
        }
    }
    
    consume(parser, TK_RBRACE(), "Expected '}' after struct fields");
    return node;
}

// Parse array literal
fn parse_array_literal(mut parser: Parser) -> AstNode {
    let mut node = create_node(NODE_EXPR_ARRAY(), "");
    
    consume(parser, TK_LBRACKET(), "Expected '['");
    
    // Parse elements
    if !check(parser, TK_RBRACKET()) {
        while true {
            let elem = parse_expression(parser);
            add_child(node, elem);
            
            // Check for array repeat syntax [value; count]
            if check(parser, TK_SEMICOLON()) {
                advance(parser);
                let count = parse_expression(parser);
                add_child(node, count);
                node.value = "repeat";
                break;
            }
            
            if !check(parser, TK_COMMA()) {
                break;
            }
            advance(parser); // consume comma
        }
    }
    
    consume(parser, TK_RBRACKET(), "Expected ']' after array elements");
    return node;
}

// Parse postfix expression (field access, array index)
fn parse_postfix(mut parser: Parser) -> AstNode {
    let mut expr = parse_primary(parser);
    
    while true {
        if check(parser, TK_DOT()) {
            advance(parser);
            let field = peek(parser).value;
            consume(parser, TK_IDENT(), "Expected field name after '.'");
            
            let mut field_access = create_node(NODE_EXPR_FIELD(), field);
            add_child(field_access, expr);
            expr = field_access;
        } else if check(parser, TK_LBRACKET()) {
            advance(parser);
            let index = parse_expression(parser);
            consume(parser, TK_RBRACKET(), "Expected ']' after array index");
            
            let mut index_expr = create_node(NODE_EXPR_INDEX(), "");
            add_child(index_expr, expr);
            add_child(index_expr, index);
            expr = index_expr;
        } else {
            break;
        }
    }
    
    return expr;
}

// Parse unary expression
fn parse_unary(mut parser: Parser) -> AstNode {
    let token = peek(parser);
    
    if token.kind == TK_MINUS() || token.kind == TK_NOT() {
        advance(parser);
        let operand = parse_unary(parser); // Right associative
        
        let mut node = create_node(NODE_EXPR_UNARY(), token.value);
        add_child(node, operand);
        return node;
    }
    
    return parse_postfix(parser);
}

// Parse binary expression with precedence
fn parse_binary(mut parser: Parser, min_precedence: i64) -> AstNode {
    let mut left = parse_unary(parser);
    
    while true {
        let token = peek(parser);
        let precedence = get_precedence(token.kind);
        
        if precedence < min_precedence {
            break;
        }
        
        advance(parser);
        let right = parse_binary(parser, precedence + 1);
        
        let mut node = create_node(NODE_EXPR_BINARY(), token.value);
        node.value = operator_string(token.kind);
        add_child(node, left);
        add_child(node, right);
        left = node;
    }
    
    return left;
}

// Get operator precedence
fn get_precedence(kind: i64) -> i64 {
    if kind == TK_OR_OR() { return 1; }
    if kind == TK_AND_AND() { return 2; }
    if kind == TK_EQ_EQ() || kind == TK_NE() { return 3; }
    if kind == TK_LT() || kind == TK_GT() || kind == TK_LE() || kind == TK_GE() { return 4; }
    if kind == TK_PLUS() || kind == TK_MINUS() { return 5; }
    if kind == TK_STAR() || kind == TK_SLASH() || kind == TK_PERCENT() { return 6; }
    return 0;
}

// Convert operator token to string
fn operator_string(kind: i64) -> String {
    if kind == TK_PLUS() { return "+"; }
    if kind == TK_MINUS() { return "-"; }
    if kind == TK_STAR() { return "*"; }
    if kind == TK_SLASH() { return "/"; }
    if kind == TK_PERCENT() { return "%"; }
    if kind == TK_EQ_EQ() { return "=="; }
    if kind == TK_NE() { return "!="; }
    if kind == TK_LT() { return "<"; }
    if kind == TK_GT() { return ">"; }
    if kind == TK_LE() { return "<="; }
    if kind == TK_GE() { return ">="; }
    if kind == TK_AND_AND() { return "&&"; }
    if kind == TK_OR_OR() { return "||"; }
    return "?";
}

// Parse expression
fn parse_expression(mut parser: Parser) -> AstNode {
    return parse_binary(parser, 1);
}

// Parse let statement
fn parse_let_statement(mut parser: Parser) -> AstNode {
    let mut node = create_node(NODE_STMT_LET(), "");
    
    consume(parser, TK_LET(), "Expected 'let'");
    
    // Check for 'mut'
    let mutable = check(parser, TK_MUT());
    if mutable {
        advance(parser);
        node.value = "mut";
    }
    
    let name = peek(parser).value;
    consume(parser, TK_IDENT(), "Expected variable name");
    
    let mut var_node = create_node(NODE_EXPR_IDENT(), name);
    add_child(node, var_node);
    
    // Optional type annotation
    if check(parser, TK_COLON()) {
        advance(parser);
        let ty = parse_type(parser);
        var_node.ty = ty;
    }
    
    consume(parser, TK_EQ(), "Expected '=' after variable name");
    
    let init = parse_expression(parser);
    add_child(node, init);
    
    consume(parser, TK_SEMICOLON(), "Expected ';' after let statement");
    
    return node;
}

// Parse return statement
fn parse_return_statement(mut parser: Parser) -> AstNode {
    let mut node = create_node(NODE_STMT_RETURN(), "");
    
    consume(parser, TK_RETURN(), "Expected 'return'");
    
    if !check(parser, TK_SEMICOLON()) {
        let value = parse_expression(parser);
        add_child(node, value);
    }
    
    consume(parser, TK_SEMICOLON(), "Expected ';' after return statement");
    
    return node;
}

// Parse if statement
fn parse_if_statement(mut parser: Parser) -> AstNode {
    let mut node = create_node(NODE_STMT_IF(), "");
    
    consume(parser, TK_IF(), "Expected 'if'");
    
    let condition = parse_expression(parser);
    add_child(node, condition);
    
    consume(parser, TK_LBRACE(), "Expected '{' after if condition");
    let then_block = parse_block(parser);
    add_child(node, then_block);
    
    // Optional else
    if check(parser, TK_ELSE()) {
        advance(parser);
        
        if check(parser, TK_IF()) {
            let else_if = parse_if_statement(parser);
            add_child(node, else_if);
        } else {
            consume(parser, TK_LBRACE(), "Expected '{' after else");
            let else_block = parse_block(parser);
            add_child(node, else_block);
        }
    }
    
    return node;
}

// Parse while statement
fn parse_while_statement(mut parser: Parser) -> AstNode {
    let mut node = create_node(NODE_STMT_WHILE(), "");
    
    consume(parser, TK_WHILE(), "Expected 'while'");
    
    let condition = parse_expression(parser);
    add_child(node, condition);
    
    consume(parser, TK_LBRACE(), "Expected '{' after while condition");
    let body = parse_block(parser);
    add_child(node, body);
    
    return node;
}

// Parse for statement
fn parse_for_statement(mut parser: Parser) -> AstNode {
    let mut node = create_node(NODE_STMT_FOR(), "");
    
    consume(parser, TK_FOR(), "Expected 'for'");
    
    let var = peek(parser).value;
    consume(parser, TK_IDENT(), "Expected loop variable");
    
    let mut var_node = create_node(NODE_EXPR_IDENT(), var);
    add_child(node, var_node);
    
    consume(parser, TK_IN(), "Expected 'in' after loop variable");
    
    // Parse range
    let start = parse_expression(parser);
    add_child(node, start);
    
    consume(parser, TK_DOT_DOT(), "Expected '..' in range");
    
    let end = parse_expression(parser);
    add_child(node, end);
    
    consume(parser, TK_LBRACE(), "Expected '{' after for range");
    let body = parse_block(parser);
    add_child(node, body);
    
    return node;
}

// Parse statement
fn parse_statement(mut parser: Parser) -> AstNode {
    let token = peek(parser);
    
    if token.kind == TK_LET() {
        return parse_let_statement(parser);
    }
    
    if token.kind == TK_RETURN() {
        return parse_return_statement(parser);
    }
    
    if token.kind == TK_IF() {
        return parse_if_statement(parser);
    }
    
    if token.kind == TK_WHILE() {
        return parse_while_statement(parser);
    }
    
    if token.kind == TK_FOR() {
        return parse_for_statement(parser);
    }
    
    if token.kind == TK_BREAK() {
        advance(parser);
        consume(parser, TK_SEMICOLON(), "Expected ';' after break");
        return create_node(NODE_STMT_EXPR(), "break");
    }
    
    if token.kind == TK_CONTINUE() {
        advance(parser);
        consume(parser, TK_SEMICOLON(), "Expected ';' after continue");
        return create_node(NODE_STMT_EXPR(), "continue");
    }
    
    // Expression statement or assignment
    let expr = parse_expression(parser);
    
    // Check for assignment
    if check(parser, TK_EQ()) {
        advance(parser);
        let value = parse_expression(parser);
        
        let mut assign = create_node(NODE_STMT_ASSIGN(), "");
        add_child(assign, expr);
        add_child(assign, value);
        
        consume(parser, TK_SEMICOLON(), "Expected ';' after assignment");
        return assign;
    }
    
    // Expression statement
    consume(parser, TK_SEMICOLON(), "Expected ';' after expression");
    let mut stmt = create_node(NODE_STMT_EXPR(), "");
    add_child(stmt, expr);
    return stmt;
}

// Parse block
fn parse_block(mut parser: Parser) -> AstNode {
    let mut block = create_node(NODE_BLOCK(), "");
    
    while !check(parser, TK_RBRACE()) && !is_at_end(parser) {
        let stmt = parse_statement(parser);
        add_child(block, stmt);
    }
    
    consume(parser, TK_RBRACE(), "Expected '}' after block");
    
    return block;
}

// Parse function parameter
fn parse_parameter(mut parser: Parser) -> AstNode {
    let mut param = create_node(NODE_PARAM(), "");
    
    // Check for 'mut'
    if check(parser, TK_MUT()) {
        advance(parser);
        param.value = "mut";
    }
    
    let name = peek(parser).value;
    consume(parser, TK_IDENT(), "Expected parameter name");
    
    let mut name_node = create_node(NODE_EXPR_IDENT(), name);
    add_child(param, name_node);
    
    consume(parser, TK_COLON(), "Expected ':' after parameter name");
    
    let ty = parse_type(parser);
    name_node.ty = ty;
    
    return param;
}

// Parse function
fn parse_function(mut parser: Parser) -> AstNode {
    let mut func = create_node(NODE_FUNCTION(), "");
    
    consume(parser, TK_FN(), "Expected 'fn'");
    
    let name = peek(parser).value;
    consume(parser, TK_IDENT(), "Expected function name");
    func.value = name;
    
    consume(parser, TK_LPAREN(), "Expected '(' after function name");
    
    // Parse parameters
    if !check(parser, TK_RPAREN()) {
        while true {
            let param = parse_parameter(parser);
            add_child(func, param);
            
            if !check(parser, TK_COMMA()) {
                break;
            }
            advance(parser); // consume comma
        }
    }
    
    consume(parser, TK_RPAREN(), "Expected ')' after parameters");
    
    // Optional return type
    if check(parser, TK_ARROW()) {
        advance(parser);
        let return_type = parse_type(parser);
        func.ty = return_type;
    } else {
        func.ty = Type { kind: TYPE_UNIT(), name: "()", element_type: 0, size: 0 };
    }
    
    consume(parser, TK_LBRACE(), "Expected '{' after function signature");
    
    let body = parse_block(parser);
    add_child(func, body);
    
    return func;
}

// Parse struct definition
fn parse_struct(mut parser: Parser) -> AstNode {
    let mut struct_def = create_node(NODE_STRUCT_DEF(), "");
    
    consume(parser, TK_STRUCT(), "Expected 'struct'");
    
    let name = peek(parser).value;
    consume(parser, TK_IDENT(), "Expected struct name");
    struct_def.value = name;
    
    consume(parser, TK_LBRACE(), "Expected '{' after struct name");
    
    // Parse fields
    while !check(parser, TK_RBRACE()) && !is_at_end(parser) {
        let field_name = peek(parser).value;
        consume(parser, TK_IDENT(), "Expected field name");
        
        consume(parser, TK_COLON(), "Expected ':' after field name");
        
        let field_type = parse_type(parser);
        
        let mut field = create_node(NODE_EXPR_FIELD(), field_name);
        field.ty = field_type;
        add_child(struct_def, field);
        
        if !check(parser, TK_RBRACE()) {
            consume(parser, TK_COMMA(), "Expected ',' after field");
        }
    }
    
    consume(parser, TK_RBRACE(), "Expected '}' after struct fields");
    
    return struct_def;
}

// Parse enum definition
fn parse_enum(mut parser: Parser) -> AstNode {
    let mut enum_def = create_node(NODE_ENUM_DEF(), "");
    
    consume(parser, TK_ENUM(), "Expected 'enum'");
    
    let name = peek(parser).value;
    consume(parser, TK_IDENT(), "Expected enum name");
    enum_def.value = name;
    
    consume(parser, TK_LBRACE(), "Expected '{' after enum name");
    
    // Parse variants
    while !check(parser, TK_RBRACE()) && !is_at_end(parser) {
        let variant_name = peek(parser).value;
        consume(parser, TK_IDENT(), "Expected variant name");
        
        let mut variant = create_node(NODE_EXPR_IDENT(), variant_name);
        
        // Optional associated data
        if check(parser, TK_LPAREN()) {
            advance(parser);
            let data_type = parse_type(parser);
            variant.ty = data_type;
            consume(parser, TK_RPAREN(), "Expected ')' after variant data");
        }
        
        add_child(enum_def, variant);
        
        if !check(parser, TK_RBRACE()) {
            consume(parser, TK_COMMA(), "Expected ',' after variant");
        }
    }
    
    consume(parser, TK_RBRACE(), "Expected '}' after enum variants");
    
    return enum_def;
}

// Parse top-level item
fn parse_item(mut parser: Parser) -> AstNode {
    let token = peek(parser);
    
    if token.kind == TK_FN() {
        return parse_function(parser);
    }
    
    if token.kind == TK_STRUCT() {
        return parse_struct(parser);
    }
    
    if token.kind == TK_ENUM() {
        return parse_enum(parser);
    }
    
    parser.had_error = true;
    parser.error_msg = "Expected function, struct, or enum";
    return empty_node();
}

// Parse program
fn parse_program(mut parser: Parser) -> AstNode {
    let mut program = create_node(NODE_PROGRAM(), "");
    
    while !is_at_end(parser) && !parser.had_error {
        let item = parse_item(parser);
        add_child(program, item);
    }
    
    return program;
}

// Public parse function
fn parse(tokens: [Token; 10000], token_count: i64) -> AstNode {
    let mut parser = parser_new(tokens, token_count);
    return parse_program(parser);
}