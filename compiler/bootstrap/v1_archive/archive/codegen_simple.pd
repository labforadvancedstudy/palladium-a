// Simplified Palladium Code Generator - Bootstrap version
// Generates C code from Palladium AST (using print for output)

// Code generator state
struct CodeGen {
    indent_level: i64,
    temp_counter: i64,
    in_main: bool,
}

// Create new code generator
fn codegen_new() -> CodeGen {
    return CodeGen {
        indent_level: 0,
        temp_counter: 0,
        in_main: false,
    };
}

// Print with indentation
fn print_indent(cg: CodeGen, code: String) {
    for i in 0..cg.indent_level {
        print("    ");
    }
    print(code);
}

// Print line with indentation
fn print_line(cg: CodeGen, code: String) {
    for i in 0..cg.indent_level {
        print("    ");
    }
    print(code);
    print("\n");
}

// Convert single digit to string
fn digit_to_string(n: i64) -> String {
    if n == 0 { return "0"; }
    if n == 1 { return "1"; }
    if n == 2 { return "2"; }
    if n == 3 { return "3"; }
    if n == 4 { return "4"; }
    if n == 5 { return "5"; }
    if n == 6 { return "6"; }
    if n == 7 { return "7"; }
    if n == 8 { return "8"; }
    if n == 9 { return "9"; }
    return "X";
}

// Generate temporary variable name
fn gen_temp(mut cg: CodeGen) -> String {
    let name = string_concat("_t", digit_to_string(cg.temp_counter));
    cg.temp_counter = cg.temp_counter + 1;
    return name;
}

// Convert type to C
fn type_to_c(ty_kind: i64) -> String {
    if ty_kind == 0 { return "void"; }
    if ty_kind == 1 { return "int"; }
    if ty_kind == 2 { return "int"; }
    if ty_kind == 3 { return "long long"; }
    if ty_kind == 4 { return "const char*"; }
    return "void*";
}

// Get C operator
fn get_c_operator(op_kind: i64) -> String {
    if op_kind == 40 { return " + "; }
    if op_kind == 41 { return " - "; }
    if op_kind == 42 { return " * "; }
    if op_kind == 43 { return " / "; }
    if op_kind == 44 { return " % "; }
    if op_kind == 46 { return " == "; }
    if op_kind == 47 { return " != "; }
    if op_kind == 48 { return " < "; }
    if op_kind == 49 { return " > "; }
    if op_kind == 50 { return " <= "; }
    if op_kind == 51 { return " >= "; }
    if op_kind == 52 { return " && "; }
    if op_kind == 53 { return " || "; }
    return " ? ";
}

// Generate headers
fn gen_headers() {
    print("#include <stdio.h>\n");
    print("#include <stdlib.h>\n");
    print("#include <string.h>\n");
    print("#include <stdbool.h>\n");
    print("\n");
    
    // Runtime functions
    print("// Runtime functions\n");
    print("void __pd_print(const char* str) {\n");
    print("    printf(\"%s\\n\", str);\n");
    print("}\n\n");
    
    print("void __pd_print_int(long long value) {\n");
    print("    printf(\"%lld\\n\", value);\n");
    print("}\n\n");
    
    print("const char* __pd_string_concat(const char* s1, const char* s2) {\n");
    print("    size_t len1 = strlen(s1);\n");
    print("    size_t len2 = strlen(s2);\n");
    print("    char* result = (char*)malloc(len1 + len2 + 1);\n");
    print("    strcpy(result, s1);\n");
    print("    strcat(result, s2);\n");
    print("    return result;\n");
    print("}\n\n");
    
    print("int __pd_string_eq(const char* s1, const char* s2) {\n");
    print("    return strcmp(s1, s2) == 0;\n");
    print("}\n\n");
}

// Generate expression (simplified)
fn gen_expr(mut cg: CodeGen, expr_kind: i64) {
    // Integer literal
    if expr_kind == 2000 {
        print("42");
        return;
    }
    
    // String literal
    if expr_kind == 2001 {
        print("\"hello\"");
        return;
    }
    
    // Bool literal
    if expr_kind == 2002 {
        print("1");
        return;
    }
    
    // Identifier
    if expr_kind == 2003 {
        print("var_name");
        return;
    }
    
    // Binary expression
    if expr_kind >= 3040 && expr_kind <= 3053 {
        print("(");
        gen_expr(cg, 2003);  // left
        print(get_c_operator(expr_kind - 3000));
        gen_expr(cg, 2000);  // right
        print(")");
        return;
    }
    
    // Unary expression
    if expr_kind == 3200 {  // Negation
        print("-(");
        gen_expr(cg, 2000);
        print(")");
        return;
    }
    
    if expr_kind == 3201 {  // Not
        print("!(");
        gen_expr(cg, 2002);
        print(")");
        return;
    }
    
    // Function call
    if expr_kind == 3100 {
        print("func_name(");
        gen_expr(cg, 2000);  // arg
        print(")");
        return;
    }
}

// Generate statement
fn gen_stmt(mut cg: CodeGen, stmt_kind: i64) {
    // Let statement
    if stmt_kind == 4000 {
        print_line(cg, "long long var_name = 42;");
        return;
    }
    
    // Expression statement
    if stmt_kind == 4010 {
        print_indent(cg, "");
        gen_expr(cg, 3100);
        print(";\n");
        return;
    }
    
    // Return statement
    if stmt_kind == 4001 {
        print_indent(cg, "return ");
        gen_expr(cg, 2000);
        print(";\n");
        return;
    }
    
    // If statement
    if stmt_kind == 4003 {
        print_indent(cg, "if (");
        gen_expr(cg, 3046);  // condition
        print(") {\n");
        cg.indent_level = cg.indent_level + 1;
        gen_stmt(cg, 4010);  // body
        cg.indent_level = cg.indent_level - 1;
        print_line(cg, "}");
        return;
    }
    
    // While loop
    if stmt_kind == 4005 {
        print_indent(cg, "while (");
        gen_expr(cg, 3048);  // condition
        print(") {\n");
        cg.indent_level = cg.indent_level + 1;
        gen_stmt(cg, 4010);  // body
        cg.indent_level = cg.indent_level - 1;
        print_line(cg, "}");
        return;
    }
}

// Generate function
fn gen_function(mut cg: CodeGen, name: String, return_type: i64) {
    print(type_to_c(return_type));
    print(" ");
    print(name);
    print("() {\n");
    
    cg.indent_level = cg.indent_level + 1;
    
    // Generate some statements
    gen_stmt(cg, 4000);  // let
    gen_stmt(cg, 4003);  // if
    gen_stmt(cg, 4010);  // expr
    
    if string_eq(name, "main") {
        print_line(cg, "return 0;");
    } else {
        gen_stmt(cg, 4001);  // return
    }
    
    cg.indent_level = cg.indent_level - 1;
    print("}\n\n");
}

// Generate struct
fn gen_struct(cg: CodeGen, name: String) {
    print("typedef struct ");
    print(name);
    print(" {\n");
    print("    long long x;\n");
    print("    long long y;\n");
    print("} ");
    print(name);
    print(";\n\n");
}

// Test the code generator
fn test_codegen() {
    print("=== Testing Code Generator ===\n\n");
    
    let mut cg = codegen_new();
    
    // Test basic features
    print("// Test 1: Type conversion\n");
    print("// i64 -> ");
    print(type_to_c(3));
    print("\n// bool -> ");
    print(type_to_c(1));
    print("\n\n");
    
    print("// Test 2: Operators\n");
    print("// Op 40 -> ");
    print(get_c_operator(40));
    print("\n// Op 48 -> ");
    print(get_c_operator(48));
    print("\n\n");
    
    print("// Test 3: Expression generation\n");
    print("// Integer: ");
    gen_expr(cg, 2000);
    print("\n// Binary: ");
    gen_expr(cg, 3040);
    print("\n// Unary neg: ");
    gen_expr(cg, 3200);
    print("\n// Unary not: ");
    gen_expr(cg, 3201);
    print("\n\n");
    
    print("// Test 4: Complete C program\n");
    print("=== Generated C Code ===\n");
    
    // Generate headers
    gen_headers();
    
    // Generate struct
    gen_struct(cg, "Point");
    
    // Generate functions
    gen_function(cg, "calculate", 3);
    gen_function(cg, "main", 0);
    
    print("\n=== Code Generation Complete! ===\n");
}

fn main() {
    test_codegen();
}