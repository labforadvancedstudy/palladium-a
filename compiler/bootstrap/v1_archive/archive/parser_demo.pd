// Parser Demo - Shows parser structure for bootstrapping
// Simplified to use only currently supported features

// Token types (from lexer)
struct Token {
    kind: i64,
    value: String,
}

// Parser state
struct Parser {
    tokens: Vec,
    current: i64,
}

// AST nodes
struct Expr {
    kind: i64,  // Expression type
    value: i64, // For literals
    name: String, // For identifiers
}

struct Stmt {
    kind: i64,  // Statement type
    expr: Expr, // For expression statements
}

// Expression types
fn EXPR_INT() -> i64 { return 1; }
fn EXPR_IDENT() -> i64 { return 2; }
fn EXPR_BINARY() -> i64 { return 3; }
fn EXPR_CALL() -> i64 { return 4; }

// Statement types  
fn STMT_EXPR() -> i64 { return 1; }
fn STMT_LET() -> i64 { return 2; }
fn STMT_RETURN() -> i64 { return 3; }

// Token types
fn TOK_INT() -> i64 { return 1; }
fn TOK_IDENT() -> i64 { return 2; }
fn TOK_PLUS() -> i64 { return 3; }
fn TOK_MINUS() -> i64 { return 4; }
fn TOK_STAR() -> i64 { return 5; }
fn TOK_SLASH() -> i64 { return 6; }
fn TOK_LPAREN() -> i64 { return 7; }
fn TOK_RPAREN() -> i64 { return 8; }
fn TOK_SEMICOLON() -> i64 { return 9; }
fn TOK_LET() -> i64 { return 10; }
fn TOK_RETURN() -> i64 { return 11; }
fn TOK_EQ() -> i64 { return 12; }
fn TOK_EOF() -> i64 { return 99; }

// Create parser
fn parser_new(tokens: Vec) -> Parser {
    return Parser {
        tokens: tokens,
        current: 0
    };
}

// Check if at end
fn is_at_end(parser: Parser) -> bool {
    if parser.current >= vec_len(parser.tokens) {
        return true;
    }
    let tok: Token = vec_get(parser.tokens, parser.current);
    return tok.kind == TOK_EOF();
}

// Peek current token
fn peek(parser: Parser) -> Token {
    if parser.current >= vec_len(parser.tokens) {
        return Token { kind: TOK_EOF(), value: "" };
    }
    return vec_get(parser.tokens, parser.current);
}

// Advance parser
fn advance(mut parser: Parser) -> Token {
    let tok = vec_get(parser.tokens, parser.current);
    parser.current = parser.current + 1;
    return tok;
}

// Check token type
fn check(parser: Parser, kind: i64) -> bool {
    let tok = peek(parser);
    return tok.kind == kind;
}

// Parse primary expression
fn parse_primary(mut parser: Parser) -> Expr {
    let tok = peek(parser);
    
    // Integer literal
    if tok.kind == TOK_INT() {
        advance(parser);
        let value = string_to_int(tok.value);
        return Expr {
            kind: EXPR_INT(),
            value: value,
            name: ""
        };
    }
    
    // Identifier
    if tok.kind == TOK_IDENT() {
        advance(parser);
        
        // Check for function call
        if check(parser, TOK_LPAREN()) {
            advance(parser); // consume (
            
            // For now, just skip to )
            while true {
                if check(parser, TOK_RPAREN()) {
                    advance(parser);
                    break;
                }
                if is_at_end(parser) {
                    break;
                }
                advance(parser);
            }
            
            return Expr {
                kind: EXPR_CALL(),
                value: 0,
                name: tok.value
            };
        }
        
        return Expr {
            kind: EXPR_IDENT(),
            value: 0,
            name: tok.value
        };
    }
    
    // Parenthesized expression
    if tok.kind == TOK_LPAREN() {
        advance(parser); // consume (
        let expr = parse_expression(parser);
        if check(parser, TOK_RPAREN()) {
            advance(parser); // consume )
        }
        return expr;
    }
    
    // Error - return dummy expression
    return Expr {
        kind: 0,
        value: 0,
        name: "error"
    };
}

// Parse multiplicative expression
fn parse_multiplicative(mut parser: Parser) -> Expr {
    let mut left = parse_primary(parser);
    
    while true {
        let tok = peek(parser);
        if tok.kind == TOK_STAR() || tok.kind == TOK_SLASH() {
            advance(parser);
            let right = parse_primary(parser);
            
            // Create binary expression
            left = Expr {
                kind: EXPR_BINARY(),
                value: tok.kind,
                name: ""
            };
        } else {
            break;
        }
    }
    
    return left;
}

// Parse additive expression
fn parse_additive(mut parser: Parser) -> Expr {
    let mut left = parse_multiplicative(parser);
    
    while true {
        let tok = peek(parser);
        if tok.kind == TOK_PLUS() || tok.kind == TOK_MINUS() {
            advance(parser);
            let right = parse_multiplicative(parser);
            
            // Create binary expression
            left = Expr {
                kind: EXPR_BINARY(),
                value: tok.kind,
                name: ""
            };
        } else {
            break;
        }
    }
    
    return left;
}

// Parse expression
fn parse_expression(mut parser: Parser) -> Expr {
    return parse_additive(parser);
}

// Parse let statement
fn parse_let_stmt(mut parser: Parser) -> Stmt {
    advance(parser); // consume 'let'
    
    let name_tok = advance(parser); // get identifier
    
    if check(parser, TOK_EQ()) {
        advance(parser); // consume '='
    }
    
    let expr = parse_expression(parser);
    
    if check(parser, TOK_SEMICOLON()) {
        advance(parser); // consume ';'
    }
    
    return Stmt {
        kind: STMT_LET(),
        expr: expr
    };
}

// Parse return statement
fn parse_return_stmt(mut parser: Parser) -> Stmt {
    advance(parser); // consume 'return'
    
    let expr = parse_expression(parser);
    
    if check(parser, TOK_SEMICOLON()) {
        advance(parser); // consume ';'
    }
    
    return Stmt {
        kind: STMT_RETURN(),
        expr: expr
    };
}

// Parse statement
fn parse_statement(mut parser: Parser) -> Stmt {
    let tok = peek(parser);
    
    if tok.kind == TOK_LET() {
        return parse_let_stmt(parser);
    }
    
    if tok.kind == TOK_RETURN() {
        return parse_return_stmt(parser);
    }
    
    // Expression statement
    let expr = parse_expression(parser);
    
    if check(parser, TOK_SEMICOLON()) {
        advance(parser); // consume ';'
    }
    
    return Stmt {
        kind: STMT_EXPR(),
        expr: expr
    };
}

// Demo parser
fn demo_parser() {
    print("=== Parser Demo ===\n");
    
    // Create some test tokens
    let mut tokens = vec_new();
    
    // "let x = 42;"
    tokens = vec_push(tokens, Token { kind: TOK_LET(), value: "let" });
    tokens = vec_push(tokens, Token { kind: TOK_IDENT(), value: "x" });
    tokens = vec_push(tokens, Token { kind: TOK_EQ(), value: "=" });
    tokens = vec_push(tokens, Token { kind: TOK_INT(), value: "42" });
    tokens = vec_push(tokens, Token { kind: TOK_SEMICOLON(), value: ";" });
    
    // "print_int(x);"
    tokens = vec_push(tokens, Token { kind: TOK_IDENT(), value: "print_int" });
    tokens = vec_push(tokens, Token { kind: TOK_LPAREN(), value: "(" });
    tokens = vec_push(tokens, Token { kind: TOK_IDENT(), value: "x" });
    tokens = vec_push(tokens, Token { kind: TOK_RPAREN(), value: ")" });
    tokens = vec_push(tokens, Token { kind: TOK_SEMICOLON(), value: ";" });
    
    // "return x + 1;"
    tokens = vec_push(tokens, Token { kind: TOK_RETURN(), value: "return" });
    tokens = vec_push(tokens, Token { kind: TOK_IDENT(), value: "x" });
    tokens = vec_push(tokens, Token { kind: TOK_PLUS(), value: "+" });
    tokens = vec_push(tokens, Token { kind: TOK_INT(), value: "1" });
    tokens = vec_push(tokens, Token { kind: TOK_SEMICOLON(), value: ";" });
    
    // EOF
    tokens = vec_push(tokens, Token { kind: TOK_EOF(), value: "" });
    
    // Parse tokens
    let mut parser = parser_new(tokens);
    
    print("Parsing statements:");
    let mut stmt_count = 0;
    
    while is_at_end(parser) == false {
        let stmt = parse_statement(parser);
        stmt_count = stmt_count + 1;
        
        print("Statement");
        print_int(stmt_count);
        print("- kind:");
        print_int(stmt.kind);
        
        if stmt.kind == STMT_LET() {
            print("  (let statement)");
        } else if stmt.kind == STMT_RETURN() {
            print("  (return statement)");
        } else if stmt.kind == STMT_EXPR() {
            print("  (expression statement)");
        }
    }
    
    print("\nTotal statements parsed:");
    print_int(stmt_count);
    
    print("\n=== Parser Structure Demonstrated! ===");
}

fn main() {
    demo_parser();
}