// Simple parser for Palladium - building on the lexer
// This parser validates syntax and can parse basic expressions

// AST node types (as integers since we can't return structs)
fn ast_program() -> i64 { return 1; }
fn ast_let_stmt() -> i64 { return 2; }
fn ast_expr_stmt() -> i64 { return 3; }
fn ast_int_literal() -> i64 { return 4; }
fn ast_ident() -> i64 { return 5; }
fn ast_binary_op() -> i64 { return 6; }
fn ast_call() -> i64 { return 7; }
fn ast_string_literal() -> i64 { return 8; }

// Token types (from lexer)
fn tok_eof() -> i64 { return 0; }
fn tok_ident() -> i64 { return 1; }
fn tok_number() -> i64 { return 2; }
fn tok_string() -> i64 { return 3; }
fn tok_let() -> i64 { return 4; }
fn tok_fn() -> i64 { return 5; }
fn tok_return() -> i64 { return 6; }
fn tok_if() -> i64 { return 7; }
fn tok_lparen() -> i64 { return 8; }
fn tok_rparen() -> i64 { return 9; }
fn tok_lbrace() -> i64 { return 10; }
fn tok_rbrace() -> i64 { return 11; }
fn tok_semi() -> i64 { return 12; }
fn tok_eq() -> i64 { return 13; }
fn tok_plus() -> i64 { return 14; }
fn tok_minus() -> i64 { return 15; }
fn tok_star() -> i64 { return 16; }
fn tok_slash() -> i64 { return 17; }
fn tok_comma() -> i64 { return 18; }
fn tok_unknown() -> i64 { return 99; }

// Token name for debugging
fn token_name(t: i64) -> String {
    if t == 0 { return "EOF"; }
    if t == 1 { return "IDENT"; }
    if t == 2 { return "NUMBER"; }
    if t == 3 { return "STRING"; }
    if t == 4 { return "LET"; }
    if t == 5 { return "FN"; }
    if t == 6 { return "RETURN"; }
    if t == 7 { return "IF"; }
    if t == 8 { return "LPAREN"; }
    if t == 9 { return "RPAREN"; }
    if t == 10 { return "LBRACE"; }
    if t == 11 { return "RBRACE"; }
    if t == 12 { return "SEMI"; }
    if t == 13 { return "EQ"; }
    if t == 14 { return "PLUS"; }
    if t == 15 { return "MINUS"; }
    if t == 16 { return "STAR"; }
    if t == 17 { return "SLASH"; }
    if t == 18 { return "COMMA"; }
    return "UNKNOWN";
}

// Lexer functions (simplified from lexer_final.pd)
fn skip_whitespace(input: String, pos: i64) -> i64 {
    let len = string_len(input);
    let mut i = pos;
    
    while i < len {
        let c = string_char_at(input, i);
        if c == 32 { i = i + 1; continue; }  // space
        if c == 9 { i = i + 1; continue; }   // tab
        if c == 10 { i = i + 1; continue; }  // newline
        break;
    }
    
    return i;
}

fn is_letter(c: i64) -> bool {
    if c >= 65 {
        if c <= 90 { return true; }  // A-Z
    }
    if c >= 97 {
        if c <= 122 { return true; } // a-z
    }
    if c == 95 { return true; }      // underscore
    return false;
}

fn get_ident_len(input: String, start: i64) -> i64 {
    let len = string_len(input);
    let mut i = start;
    
    if i >= len { return 0; }
    if is_letter(string_char_at(input, i)) == false { return 0; }
    
    i = i + 1;
    
    while i < len {
        let c = string_char_at(input, i);
        if is_letter(c) {
            i = i + 1;
            continue;
        }
        if char_is_digit(c) {
            i = i + 1;
            continue;
        }
        break;
    }
    
    return i - start;
}

fn check_keyword(s: String) -> i64 {
    if string_eq(s, "let") { return tok_let(); }
    if string_eq(s, "fn") { return tok_fn(); }
    if string_eq(s, "return") { return tok_return(); }
    if string_eq(s, "if") { return tok_if(); }
    return tok_ident();
}

// Get next token at position
fn get_token_at(input: String, pos: i64) -> i64 {
    let start = skip_whitespace(input, pos);
    let len = string_len(input);
    
    if start >= len {
        return tok_eof();
    }
    
    let c = string_char_at(input, start);
    
    // Single character tokens
    if c == 40 { return tok_lparen(); }   // (
    if c == 41 { return tok_rparen(); }   // )
    if c == 123 { return tok_lbrace(); }  // {
    if c == 125 { return tok_rbrace(); }  // }
    if c == 59 { return tok_semi(); }     // ;
    if c == 61 { return tok_eq(); }       // =
    if c == 43 { return tok_plus(); }     // +
    if c == 45 { return tok_minus(); }    // -
    if c == 42 { return tok_star(); }     // *
    if c == 47 { return tok_slash(); }    // /
    if c == 44 { return tok_comma(); }    // ,
    
    // Numbers
    if char_is_digit(c) {
        return tok_number();
    }
    
    // Identifiers/keywords
    if is_letter(c) {
        let ident_len = get_ident_len(input, start);
        if ident_len > 0 {
            let ident = string_substring(input, start, start + ident_len);
            return check_keyword(ident);
        }
    }
    
    // Strings
    if c == 34 { // quote
        return tok_string();
    }
    
    return tok_unknown();
}

// Get token length
fn get_token_len(input: String, pos: i64) -> i64 {
    let start = skip_whitespace(input, pos);
    let len = string_len(input);
    
    if start >= len {
        return 0;
    }
    
    let c = string_char_at(input, start);
    
    // Single chars
    if c == 40 { return 1; }  // (
    if c == 41 { return 1; }  // )
    if c == 123 { return 1; } // {
    if c == 125 { return 1; } // }
    if c == 59 { return 1; }  // ;
    if c == 61 { return 1; }  // =
    if c == 43 { return 1; }  // +
    if c == 45 { return 1; }  // -
    if c == 42 { return 1; }  // *
    if c == 47 { return 1; }  // /
    if c == 44 { return 1; }  // ,
    
    // Numbers
    if char_is_digit(c) {
        let mut i = start;
        while i < len {
            if char_is_digit(string_char_at(input, i)) == false {
                break;
            }
            i = i + 1;
        }
        return i - start;
    }
    
    // Identifiers
    if is_letter(c) {
        return get_ident_len(input, start);
    }
    
    // Strings (simple - find closing quote)
    if c == 34 { // quote
        let mut i = start + 1;
        while i < len {
            if string_char_at(input, i) == 34 {
                return i - start + 1;
            }
            i = i + 1;
        }
        return 1; // unterminated
    }
    
    return 1; // unknown
}

// Parser state - using global position since we can't return structs
let mut parser_pos: i64 = 0;
let mut parser_input: String = "";
let mut parser_error: String = "";

// Initialize parser
fn parser_init(input: String) {
    parser_pos = 0;
    parser_input = input;
    parser_error = "";
}

// Peek at current token
fn peek_token() -> i64 {
    return get_token_at(parser_input, parser_pos);
}

// Consume current token and advance
fn consume_token() {
    let tok_len = get_token_len(parser_input, parser_pos);
    parser_pos = skip_whitespace(parser_input, parser_pos + tok_len);
}

// Expect a specific token
fn expect_token(expected: i64) -> bool {
    let tok = peek_token();
    if tok != expected {
        parser_error = string_concat("Expected ", string_concat(token_name(expected), string_concat(" but got ", token_name(tok))));
        return false;
    }
    consume_token();
    return true;
}

// Get current token text
fn get_token_text() -> String {
    let start = skip_whitespace(parser_input, parser_pos);
    let tok_len = get_token_len(parser_input, parser_pos);
    if tok_len == 0 {
        return "";
    }
    return string_substring(parser_input, start, start + tok_len);
}

// Parse an integer literal
fn parse_int_literal() -> bool {
    if peek_token() != tok_number() {
        parser_error = "Expected number";
        return false;
    }
    
    let num_text = get_token_text();
    print(string_concat("  Integer: ", num_text));
    consume_token();
    return true;
}

// Parse an identifier
fn parse_identifier() -> bool {
    if peek_token() != tok_ident() {
        parser_error = "Expected identifier";
        return false;
    }
    
    let ident_text = get_token_text();
    print(string_concat("  Identifier: ", ident_text));
    consume_token();
    return true;
}

// Parse a string literal
fn parse_string_literal() -> bool {
    if peek_token() != tok_string() {
        parser_error = "Expected string";
        return false;
    }
    
    let str_text = get_token_text();
    print(string_concat("  String: ", str_text));
    consume_token();
    return true;
}

// Parse a primary expression
fn parse_primary() -> bool {
    let tok = peek_token();
    
    if tok == tok_number() {
        return parse_int_literal();
    }
    
    if tok == tok_ident() {
        return parse_identifier();
    }
    
    if tok == tok_string() {
        return parse_string_literal();
    }
    
    if tok == tok_lparen() {
        consume_token(); // (
        print("  (");
        if parse_expression() == false {
            return false;
        }
        print("  )");
        return expect_token(tok_rparen());
    }
    
    parser_error = "Expected expression";
    return false;
}

// Parse a multiplication/division expression
fn parse_term() -> bool {
    if parse_primary() == false {
        return false;
    }
    
    while true {
        let tok = peek_token();
        if tok == tok_star() {
            consume_token();
            print("  Operator: *");
            if parse_primary() == false {
                return false;
            }
        } else if tok == tok_slash() {
            consume_token();
            print("  Operator: /");
            if parse_primary() == false {
                return false;
            }
        } else {
            break;
        }
    }
    
    return true;
}

// Parse an expression
fn parse_expression() -> bool {
    if parse_term() == false {
        return false;
    }
    
    while true {
        let tok = peek_token();
        if tok == tok_plus() {
            consume_token();
            print("  Operator: +");
            if parse_term() == false {
                return false;
            }
        } else if tok == tok_minus() {
            consume_token();
            print("  Operator: -");
            if parse_term() == false {
                return false;
            }
        } else {
            break;
        }
    }
    
    return true;
}

// Parse a let statement
fn parse_let_statement() -> bool {
    print("Let Statement:");
    
    if expect_token(tok_let()) == false {
        return false;
    }
    
    if parse_identifier() == false {
        return false;
    }
    
    if expect_token(tok_eq()) == false {
        return false;
    }
    
    if parse_expression() == false {
        return false;
    }
    
    if expect_token(tok_semi()) == false {
        return false;
    }
    
    return true;
}

// Parse a function call
fn parse_call_expr(func_name: String) -> bool {
    print(string_concat("Call: ", func_name));
    
    if expect_token(tok_lparen()) == false {
        return false;
    }
    
    // Parse arguments
    if peek_token() != tok_rparen() {
        print("  Arguments:");
        if parse_expression() == false {
            return false;
        }
        
        while peek_token() == tok_comma() {
            consume_token(); // ,
            if parse_expression() == false {
                return false;
            }
        }
    }
    
    if expect_token(tok_rparen()) == false {
        return false;
    }
    
    return true;
}

// Parse an expression statement
fn parse_expr_statement() -> bool {
    print("Expression Statement:");
    
    // Check for function call
    if peek_token() == tok_ident() {
        let ident = get_token_text();
        consume_token();
        
        if peek_token() == tok_lparen() {
            if parse_call_expr(ident) == false {
                return false;
            }
        } else {
            // Just an identifier, put it back conceptually
            print(string_concat("  Identifier: ", ident));
        }
    } else {
        if parse_expression() == false {
            return false;
        }
    }
    
    if expect_token(tok_semi()) == false {
        return false;
    }
    
    return true;
}

// Parse a statement
fn parse_statement() -> bool {
    let tok = peek_token();
    
    if tok == tok_let() {
        return parse_let_statement();
    }
    
    if tok == tok_eof() {
        return false;
    }
    
    return parse_expr_statement();
}

// Parse a program
fn parse_program(input: String) -> bool {
    parser_init(input);
    
    print("=== Parsing ===");
    print("Input:");
    print(input);
    print("\nAST:");
    
    let mut stmt_count = 0;
    
    while peek_token() != tok_eof() {
        if parse_statement() == false {
            if string_len(parser_error) > 0 {
                print(string_concat("\nError: ", parser_error));
            }
            return false;
        }
        stmt_count = stmt_count + 1;
        print(""); // blank line between statements
    }
    
    print("=== Parse complete ===");
    print(string_concat("Statements parsed: ", string_from_char(48 + stmt_count)));
    return true;
}

// Test the parser
fn test_parser() {
    // Test 1: Variable declaration
    print("\n=== Test 1: Variable Declaration ===");
    if parse_program("let x = 42;") {
        print("✓ Success");
    } else {
        print("✗ Failed");
    }
    
    // Test 2: Expression
    print("\n=== Test 2: Expression ===");
    if parse_program("x + y * 2;") {
        print("✓ Success");
    } else {
        print("✗ Failed");
    }
    
    // Test 3: Function call
    print("\n=== Test 3: Function Call ===");
    if parse_program("print(123);") {
        print("✓ Success");
    } else {
        print("✗ Failed");
    }
    
    // Test 4: Multiple statements
    print("\n=== Test 4: Multiple Statements ===");
    let multi = "let a = 10;\nlet b = 20;\nprint(a + b);";
    if parse_program(multi) {
        print("✓ Success");
    } else {
        print("✗ Failed");
    }
    
    // Test 5: Complex expression
    print("\n=== Test 5: Complex Expression ===");
    if parse_program("result = (x + y) * (a - b) / 2;") {
        print("✓ Success");
    } else {
        print("✗ Failed");
    }
    
    // Test 6: String literal
    print("\n=== Test 6: String Literal ===");
    if parse_program("let msg = \"Hello, Palladium!\";") {
        print("✓ Success");
    } else {
        print("✗ Failed");
    }
}

fn main() {
    print("=== Palladium Bootstrap Parser ===\n");
    print("This parser validates Palladium syntax and shows the parse tree.");
    print("Working within current limitations (no struct returns).\n");
    
    test_parser();
    
    print("\n=== Parser Demo Complete ===");
    print("Next step: Build full AST representation!");
}