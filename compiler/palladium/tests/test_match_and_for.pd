// Test match expressions and for loops
// Demonstrates new compiler features

// Define a simple enum-like structure using constants
const SHAPE_CIRCLE: i64 = 0;
const SHAPE_SQUARE: i64 = 1;
const SHAPE_TRIANGLE: i64 = 2;

fn shape_name(shape: i64) -> String {
    // Test match expression with simple patterns
    match shape {
        x => {
            if x == SHAPE_CIRCLE {
                return "Circle";
            } else if x == SHAPE_SQUARE {
                return "Square";
            } else if x == SHAPE_TRIANGLE {
                return "Triangle";
            } else {
                return "Unknown";
            }
        }
    }
}

fn calculate_area(shape: i64, size: i64) -> i64 {
    match shape {
        s if s == SHAPE_CIRCLE => {
            // Area = π * r² (using 3 as approximation for π)
            return 3 * size * size;
        }
        s if s == SHAPE_SQUARE => {
            // Area = side²
            return size * size;
        }
        s if s == SHAPE_TRIANGLE => {
            // Area = base * height / 2 (assuming equilateral)
            return size * size / 2;
        }
        _ => {
            return 0;
        }
    }
}

fn test_for_loops() {
    print("Testing for loops:");
    
    // Test basic for loop (when range is implemented)
    // for i in 0..5 {
    //     print_int(i);
    // }
    
    // For now, use while loop
    let mut i = 0;
    while i < 5 {
        print(string_concat("  Iteration ", int_to_string(i)));
        i = i + 1;
    }
    
    // Test sum calculation
    let mut sum = 0;
    i = 1;
    while i <= 10 {
        sum = sum + i;
        i = i + 1;
    }
    print(string_concat("Sum 1..10 = ", int_to_string(sum)));
}

fn test_match_expressions() {
    print("Testing match expressions:");
    
    let shapes = [SHAPE_CIRCLE, SHAPE_SQUARE, SHAPE_TRIANGLE, 99];
    let mut i = 0;
    
    while i < 4 {
        let shape = shapes[i];
        let name = shape_name(shape);
        let area = calculate_area(shape, 5);
        
        print(string_concat(
            string_concat("  Shape: ", name),
            string_concat(", Area with size 5: ", int_to_string(area))
        ));
        
        i = i + 1;
    }
}

fn test_nested_match() {
    print("Testing nested patterns:");
    
    let x = 42;
    let y = 7;
    
    let result = match x {
        n if n > 50 => "x is large",
        n if n > 25 => {
            match y {
                m if m > 5 => "x is medium and y is significant",
                _ => "x is medium but y is small"
            }
        }
        _ => "x is small"
    };
    
    print(string_concat("  Result: ", result));
}

fn main() {
    print("=== Match and For Loop Test ===");
    print("");
    
    test_match_expressions();
    print("");
    
    test_for_loops();
    print("");
    
    test_nested_match();
    print("");
    
    print("All tests completed!");
}