// Test the improved parse_expr function
fn main() {
    let expr1 = "string_len(text) > 0";
    let result1 = parse_expr(expr1);
    print("Input: string_len(text) > 0");
    print("Output:");
    print(result1);
    print("");
    
    let expr2 = "string_len(text) == len";
    let result2 = parse_expr(expr2);
    print("Input: string_len(text) == len");
    print("Output:");
    print(result2);
    print("");
    
    let expr3 = "string_len(name) + 5";
    let result3 = parse_expr(expr3);
    print("Input: string_len(name) + 5");
    print("Output:");
    print(result3);
}

// Minimal parse_expr for testing
fn is_same_string(s1: String, s2: String) -> bool {
    let len1 = string_len(s1);
    let len2 = string_len(s2);
    
    if len1 != len2 {
        return false;
    }
    
    let mut i = 0;
    while i < len1 {
        if string_char_at(s1, i) != string_char_at(s2, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

// Parse an expression with operators, array indexing, and struct support
fn parse_expr(expr: String) -> String {
    let mut result = "";
    let mut i = 0;
    let len = string_len(expr);
    
    while i < len {
        let ch = string_char_at(expr, i);
        
        // Skip leading whitespace
        if (ch == 32 || ch == 9 || ch == 10) && string_len(result) == 0 {
            i = i + 1;
            continue;
        }
        
        // Check if this is the start of an identifier or function call
        if (ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90) || ch == 95 { // a-z, A-Z, _
            let mut identifier = "";
            let start_i = i;
            
            // Collect the identifier
            while i < len {
                let id_ch = string_char_at(expr, i);
                if (id_ch >= 97 && id_ch <= 122) || (id_ch >= 65 && id_ch <= 90) || 
                   (id_ch >= 48 && id_ch <= 57) || id_ch == 95 { // a-z, A-Z, 0-9, _
                    identifier = identifier + string_from_char(id_ch);
                    i = i + 1;
                } else {
                    break;
                }
            }
            
            // Skip whitespace after identifier
            let mut j = i;
            while j < len && (string_char_at(expr, j) == 32 || string_char_at(expr, j) == 9) {
                j = j + 1;
            }
            
            // Check if it's a function call
            if j < len && string_char_at(expr, j) == 40 { // (
                // It's a function call - translate the function name
                if is_same_string(identifier, "string_len") {
                    result = result + "__pd_string_len";
                } else if is_same_string(identifier, "string_char_at") {
                    result = result + "__pd_string_char_at";
                } else if is_same_string(identifier, "string_from_char") {
                    result = result + "__pd_string_from_char";
                } else if is_same_string(identifier, "int_to_string") {
                    result = result + "__pd_int_to_string";
                } else if is_same_string(identifier, "file_open") {
                    result = result + "__pd_file_open";
                } else if is_same_string(identifier, "file_read_all") {
                    result = result + "__pd_file_read_all";
                } else if is_same_string(identifier, "file_write") {
                    result = result + "__pd_file_write";
                } else if is_same_string(identifier, "file_close") {
                    result = result + "__pd_file_close";
                } else if is_same_string(identifier, "file_exists") {
                    result = result + "__pd_file_exists";
                } else {
                    // Regular function call - keep as is
                    result = result + identifier;
                }
                
                // Copy whitespace
                while i < j {
                    result = result + string_from_char(string_char_at(expr, i));
                    i = i + 1;
                }
                
                // Copy the opening parenthesis
                result = result + "(";
                i = j + 1;
                
                // Parse the arguments recursively
                let mut paren_depth = 1;
                let mut arg_expr = "";
                while i < len && paren_depth > 0 {
                    let arg_ch = string_char_at(expr, i);
                    if arg_ch == 40 { // (
                        paren_depth = paren_depth + 1;
                        arg_expr = arg_expr + string_from_char(arg_ch);
                    } else if arg_ch == 41 { // )
                        paren_depth = paren_depth - 1;
                        if paren_depth == 0 {
                            // End of arguments
                            if string_len(arg_expr) > 0 {
                                result = result + parse_expr(arg_expr);
                            }
                            result = result + ")";
                        } else {
                            arg_expr = arg_expr + string_from_char(arg_ch);
                        }
                    } else if arg_ch == 44 && paren_depth == 1 { // , at top level
                        // Process current argument
                        if string_len(arg_expr) > 0 {
                            result = result + parse_expr(arg_expr);
                        }
                        result = result + ", ";
                        arg_expr = "";
                    } else {
                        arg_expr = arg_expr + string_from_char(arg_ch);
                    }
                    i = i + 1;
                }
            } else {
                // Not a function call, just an identifier
                result = result + identifier;
                i = j;
            }
            continue;
        }
        
        // Look for == operator
        if i + 1 < len && ch == 61 && string_char_at(expr, i + 1) == 61 { // ==
            result = result + "==";
            i = i + 2;
            continue;
        }
        
        // Look for != operator  
        if i + 1 < len && ch == 33 && string_char_at(expr, i + 1) == 61 { // !=
            result = result + "!=";
            i = i + 2;
            continue;
        }
        
        // Look for <= operator
        if i + 1 < len && ch == 60 && string_char_at(expr, i + 1) == 61 { // <=
            result = result + "<=";
            i = i + 2;
            continue;
        }
        
        // Look for >= operator
        if i + 1 < len && ch == 62 && string_char_at(expr, i + 1) == 61 { // >=
            result = result + ">=";
            i = i + 2;
            continue;
        }
        
        // Handle strings with quotes
        if ch == 34 { // "
            result = result + string_from_char(ch);
            i = i + 1;
            // Copy string content
            while i < len && string_char_at(expr, i) != 34 {
                let sc = string_char_at(expr, i);
                if sc == 92 && i + 1 < len { // \ escape
                    result = result + string_from_char(sc);
                    i = i + 1;
                    if i < len {
                        result = result + string_from_char(string_char_at(expr, i));
                        i = i + 1;
                    }
                } else {
                    result = result + string_from_char(sc);
                    i = i + 1;
                }
            }
            if i < len {
                result = result + string_from_char(34); // closing "
                i = i + 1;
            }
            continue;
        }
        
        // Copy character as-is
        result = result + string_from_char(ch);
        i = i + 1;
    }
    
    return result;
}