// Tiny Compiler Improvements
// Focusing on practical enhancements that work with current Rust compiler

// Helper to check if character is whitespace
fn is_whitespace(ch: i64) -> bool {
    return ch == 32 || ch == 9 || ch == 10 || ch == 13;
}

// Helper to check if character is a digit
fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57;
}

// Helper to check if character is alphabetic
fn is_alpha(ch: i64) -> bool {
    return (ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90);
}

// Helper to check if character can be part of identifier
fn is_ident_char(ch: i64) -> bool {
    return is_alpha(ch) || is_digit(ch) || ch == 95; // underscore
}

// Compare two strings for equality
fn str_eq(s1: String, s2: String) -> bool {
    let len1 = string_len(s1);
    let len2 = string_len(s2);
    
    if len1 != len2 {
        return false;
    }
    
    let mut i = 0;
    while i < len1 {
        if string_char_at(s1, i) != string_char_at(s2, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

// Skip whitespace in source
fn skip_whitespace(source: String, pos: i64) -> i64 {
    let mut p = pos;
    let len = string_len(source);
    
    while p < len && is_whitespace(string_char_at(source, p)) {
        p = p + 1;
    }
    
    return p;
}

// Parse an identifier starting at pos
fn parse_identifier(source: String, pos: i64) -> String {
    let mut ident = "";
    let mut p = pos;
    let len = string_len(source);
    
    while p < len && is_ident_char(string_char_at(source, p)) {
        ident = ident + string_from_char(string_char_at(source, p));
        p = p + 1;
    }
    
    return ident;
}

// Parse a number starting at pos
fn parse_number(source: String, pos: i64) -> String {
    let mut num = "";
    let mut p = pos;
    let len = string_len(source);
    
    while p < len && is_digit(string_char_at(source, p)) {
        num = num + string_from_char(string_char_at(source, p));
        p = p + 1;
    }
    
    return num;
}

// Enhanced expression parser with better operator support
fn parse_expression(expr: String) -> String {
    let mut result = "";
    let mut i = 0;
    let len = string_len(expr);
    
    while i < len {
        let ch = string_char_at(expr, i);
        
        // Skip whitespace
        if is_whitespace(ch) {
            if string_len(result) > 0 {
                result = result + " ";
            }
            i = skip_whitespace(expr, i);
            continue;
        }
        
        // Handle identifiers and keywords
        if is_alpha(ch) || ch == 95 {
            let ident = parse_identifier(expr, i);
            i = i + string_len(ident);
            
            // Check for boolean literals
            if str_eq(ident, "true") {
                result = result + "1";
            } else {
                if str_eq(ident, "false") {
                    result = result + "0";
                } else {
                    // Check if it's a function call
                    let next_pos = skip_whitespace(expr, i);
                    if next_pos < len && string_char_at(expr, next_pos) == 40 { // (
                        // Translate built-in functions
                        if str_eq(ident, "string_len") {
                            result = result + "__pd_string_len";
                        } else {
                            if str_eq(ident, "string_char_at") {
                                result = result + "__pd_string_char_at";
                            } else {
                                if str_eq(ident, "string_from_char") {
                                    result = result + "__pd_string_from_char";
                                } else {
                                    if str_eq(ident, "int_to_string") {
                                        result = result + "__pd_int_to_string";
                                    } else {
                                        result = result + ident;
                                    }
                                }
                            }
                        }
                    } else {
                        result = result + ident;
                    }
                }
            }
        } else {
            if is_digit(ch) {
                // Parse number
                let num = parse_number(expr, i);
                result = result + num;
                i = i + string_len(num);
            } else {
                if ch == 34 { // "
                    // String literal
                    result = result + "\"";
                    i = i + 1;
                    while i < len {
                        let str_ch = string_char_at(expr, i);
                        if str_ch == 92 { // backslash
                            result = result + "\\";
                            i = i + 1;
                            if i < len {
                                result = result + string_from_char(string_char_at(expr, i));
                                i = i + 1;
                            }
                        } else {
                            if str_ch == 34 { // "
                                result = result + "\"";
                                i = i + 1;
                                break;
                            } else {
                                result = result + string_from_char(str_ch);
                                i = i + 1;
                            }
                        }
                    }
                } else {
                    // Operators and other characters
                    result = result + string_from_char(ch);
                    i = i + 1;
                }
            }
        }
    }
    
    return result;
}

// Parse variable declaration with type inference
fn parse_let_statement(source: String, pos: i64) -> String {
    let mut p = pos + 3; // Skip "let"
    let mut output = "";
    let len = string_len(source);
    
    p = skip_whitespace(source, p);
    
    // Check for mut
    let mut is_mutable = false;
    if p + 3 < len {
        let mut_check = parse_identifier(source, p);
        if str_eq(mut_check, "mut") {
            is_mutable = true;
            p = p + 3;
            p = skip_whitespace(source, p);
        }
    }
    
    // Get variable name
    let var_name = parse_identifier(source, p);
    p = p + string_len(var_name);
    p = skip_whitespace(source, p);
    
    // Check for type annotation
    let mut var_type = "";
    if p < len && string_char_at(source, p) == 58 { // :
        p = p + 1;
        p = skip_whitespace(source, p);
        
        let type_name = parse_identifier(source, p);
        if str_eq(type_name, "String") {
            var_type = "const char*";
        } else {
            if str_eq(type_name, "bool") {
                var_type = "int";
            } else {
                if str_eq(type_name, "i64") {
                    var_type = "long long";
                } else {
                    var_type = type_name;
                }
            }
        }
        p = p + string_len(type_name);
        p = skip_whitespace(source, p);
    }
    
    // Expect =
    if p >= len || string_char_at(source, p) != 61 { // =
        output = output + "    // Error: expected '=' in let statement\n";
        return output;
    }
    p = p + 1;
    p = skip_whitespace(source, p);
    
    // Get initialization expression
    let mut init_expr = "";
    while p < len && string_char_at(source, p) != 59 { // ;
        init_expr = init_expr + string_from_char(string_char_at(source, p));
        p = p + 1;
    }
    
    // Infer type if not specified
    if string_len(var_type) == 0 {
        if string_char_at(init_expr, skip_whitespace(init_expr, 0)) == 34 { // "
            var_type = "const char*";
        } else {
            var_type = "long long"; // Default to i64
        }
    }
    
    output = output + "    " + var_type + " " + var_name + " = " + parse_expression(init_expr) + ";\n";
    
    return output;
}

// Parse return statement
fn parse_return_statement(source: String, pos: i64) -> String {
    let mut p = pos + 6; // Skip "return"
    let mut output = "    return";
    let len = string_len(source);
    
    p = skip_whitespace(source, p);
    
    if p < len && string_char_at(source, p) != 59 { // ;
        // Has return value
        let mut ret_expr = "";
        while p < len && string_char_at(source, p) != 59 { // ;
            ret_expr = ret_expr + string_from_char(string_char_at(source, p));
            p = p + 1;
        }
        output = output + " " + parse_expression(ret_expr);
    }
    
    output = output + ";\n";
    return output;
}

// Parse print statement
fn parse_print_statement(source: String, pos: i64) -> String {
    let mut p = pos + 5; // Skip "print"
    let mut output = "";
    let len = string_len(source);
    
    p = skip_whitespace(source, p);
    
    if p >= len || string_char_at(source, p) != 40 { // (
        output = output + "    // Error: expected '(' after print\n";
        return output;
    }
    p = p + 1;
    
    // Get print argument
    let mut arg = "";
    let mut paren_depth = 1;
    while p < len && paren_depth > 0 {
        let ch = string_char_at(source, p);
        if ch == 40 { // (
            paren_depth = paren_depth + 1;
            arg = arg + "(";
        } else {
            if ch == 41 { // )
                paren_depth = paren_depth - 1;
                if paren_depth > 0 {
                    arg = arg + ")";
                }
            } else {
                arg = arg + string_from_char(ch);
            }
        }
        p = p + 1;
    }
    
    output = output + "    __pd_print(" + parse_expression(arg) + ");\n";
    return output;
}

// Parse a single statement
fn parse_statement(source: String, pos: i64) -> String {
    let p = skip_whitespace(source, pos);
    let len = string_len(source);
    
    if p >= len {
        return "";
    }
    
    // Check what kind of statement
    let first_word = parse_identifier(source, p);
    
    if str_eq(first_word, "let") {
        return parse_let_statement(source, p);
    }
    
    if str_eq(first_word, "return") {
        return parse_return_statement(source, p);
    }
    
    if str_eq(first_word, "print") {
        return parse_print_statement(source, p);
    }
    
    // For now, treat as expression statement
    let mut expr = "";
    let mut i = p;
    while i < len && string_char_at(source, i) != 59 { // ;
        expr = expr + string_from_char(string_char_at(source, i));
        i = i + 1;
    }
    
    return "    " + parse_expression(expr) + ";\n";
}

// Main compilation function
fn compile_simple_program(source: String) -> String {
    let mut output = "";
    let len = string_len(source);
    
    // Add headers
    output = output + "#include <stdio.h>\n";
    output = output + "#include <string.h>\n";
    output = output + "#include <stdlib.h>\n\n";
    
    // Add runtime functions
    output = output + "// Runtime functions\n";
    output = output + "void __pd_print(const char* str) { printf(\"%s\\n\", str); }\n";
    output = output + "long long __pd_string_len(const char* str) { return strlen(str); }\n";
    output = output + "long long __pd_string_char_at(const char* str, long long idx) { return (long long)str[idx]; }\n";
    output = output + "const char* __pd_string_from_char(long long ch) {\n";
    output = output + "    char* result = malloc(2);\n";
    output = output + "    result[0] = (char)ch;\n";
    output = output + "    result[1] = '\\0';\n";
    output = output + "    return result;\n";
    output = output + "}\n";
    output = output + "const char* __pd_int_to_string(long long n) {\n";
    output = output + "    char* buf = malloc(32);\n";
    output = output + "    sprintf(buf, \"%lld\", n);\n";
    output = output + "    return buf;\n";
    output = output + "}\n\n";
    
    // For simplicity, just look for main function
    let mut pos = 0;
    while pos < len {
        let p = skip_whitespace(source, pos);
        if p >= len {
            break;
        }
        
        let word = parse_identifier(source, p);
        if str_eq(word, "fn") {
            let fn_pos = p + 2;
            let fn_p = skip_whitespace(source, fn_pos);
            let fn_name = parse_identifier(source, fn_p);
            
            if str_eq(fn_name, "main") {
                output = output + "int main(void) {\n";
                
                // Find opening brace
                let mut i = fn_p + string_len(fn_name);
                while i < len && string_char_at(source, i) != 123 { // {
                    i = i + 1;
                }
                i = i + 1; // Skip {
                
                // Parse statements until closing brace
                while i < len && string_char_at(source, i) != 125 { // }
                    let stmt_start = skip_whitespace(source, i);
                    if stmt_start >= len {
                        break;
                    }
                    
                    let stmt = parse_statement(source, stmt_start);
                    output = output + stmt;
                    
                    // Skip to next statement
                    while i < len && string_char_at(source, i) != 59 { // ;
                        i = i + 1;
                    }
                    i = i + 1; // Skip ;
                }
                
                output = output + "    return 0;\n}\n";
                break;
            }
        }
        
        pos = p + 1;
    }
    
    return output;
}

fn main() {
    print("Tiny Compiler - Improved Version");
    print("Supports: let, print, return, basic expressions");
    
    // Simple test program
    let test_program = "fn main() {
    let msg = \"Hello from improved tiny compiler!\";
    print(msg);
    let x = 42;
    let y = 58;
    let sum = x + y;
    print(\"The sum is: \" + int_to_string(sum));
    return;
}";
    
    print("Compiling test program...");
    let c_code = compile_simple_program(test_program);
    
    print("Generated C code:");
    print(c_code);
}