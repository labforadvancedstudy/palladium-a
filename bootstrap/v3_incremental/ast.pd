// Simplified AST for bootstrap compiler
// No Vec, Box, or Option - using fixed-size arrays

// Maximum sizes for arrays
const MAX_PARAMS: i64 = 10;
const MAX_STMTS: i64 = 100;
const MAX_ITEMS: i64 = 50;
const MAX_FIELDS: i64 = 20;
const MAX_ARGS: i64 = 10;

// Basic types
enum Type {
    I64,
    Bool,
    String,
    Custom(String),
    Array(i64),  // Just store size, assume i64 elements for simplicity
}

// Expressions
enum Expr {
    Integer(i64),
    String(String),
    Bool(bool),
    Ident(String),
    Binary(BinaryExpr),
    Call(CallExpr),
    ArrayLiteral(ArrayLiteralExpr),
    Index(IndexExpr),
    FieldAccess(FieldAccessExpr),
}

struct BinaryExpr {
    left_kind: ExprKind,
    left_int: i64,
    left_str: String,
    left_bool: bool,
    op: BinOp,
    right_kind: ExprKind,
    right_int: i64,
    right_str: String,
    right_bool: bool,
}

struct CallExpr {
    func: String,
    args: [Expr; MAX_ARGS],
    arg_count: i64,
}

struct ArrayLiteralExpr {
    elements: [i64; 100],  // Simplified: only i64 arrays
    count: i64,
}

struct IndexExpr {
    array: String,  // Simplified: only variable names
    index: i64,     // Simplified: only literal indices
}

struct FieldAccessExpr {
    object: String,  // Simplified: only variable names
    field: String,
}

// Helper to track expression type
enum ExprKind {
    Integer,
    String,
    Bool,
    Ident,
    Binary,
    Call,
    Array,
    Index,
    Field,
}

// Binary operators
enum BinOp {
    Add,
    Sub,
    Mul,
    Div,
    Eq,
    Ne,
    Lt,
    Gt,
    Le,
    Ge,
    And,
    Or,
}

// Statements
enum StmtKind {
    Let,
    Assign,
    Return,
    Expr,
    If,
    While,
    For,
}

struct Stmt {
    kind: StmtKind,
    // Let statement fields
    let_name: String,
    let_type: Type,
    let_value_kind: ExprKind,
    let_value_int: i64,
    let_value_str: String,
    let_value_bool: bool,
    let_value_ident: String,
    
    // Assign statement fields  
    assign_target: String,
    assign_value_kind: ExprKind,
    assign_value_int: i64,
    assign_value_str: String,
    assign_value_bool: bool,
    assign_value_ident: String,
    
    // Return statement fields
    return_value_kind: ExprKind,
    return_value_int: i64,
    return_value_str: String,
    return_value_bool: bool,
    return_value_ident: String,
    
    // Expression statement fields
    expr_kind: ExprKind,
    expr_call: CallExpr,
    
    // If statement fields
    if_cond_kind: ExprKind,
    if_cond_binary: BinaryExpr,
    if_then: [Stmt; MAX_STMTS],
    if_then_count: i64,
    if_else: [Stmt; MAX_STMTS],
    if_else_count: i64,
    if_has_else: bool,
    
    // While statement fields
    while_cond_kind: ExprKind,
    while_cond_binary: BinaryExpr,
    while_body: [Stmt; MAX_STMTS],
    while_body_count: i64,
    
    // For statement fields
    for_var: String,
    for_start: i64,
    for_end: i64,
    for_body: [Stmt; MAX_STMTS],
    for_body_count: i64,
}

// Function parameter
struct Param {
    name: String,
    ty: Type,
}

// Function definition
struct Function {
    name: String,
    params: [Param; MAX_PARAMS],
    param_count: i64,
    return_type: Type,
    has_return_type: bool,
    body: [Stmt; MAX_STMTS],
    body_count: i64,
    is_public: bool,
}

// Struct field
struct Field {
    name: String,
    ty: Type,
}

// Struct definition
struct Struct {
    name: String,
    fields: [Field; MAX_FIELDS],
    field_count: i64,
    is_public: bool,
}

// Import statement
struct Import {
    module: String,
}

// Top-level item
enum ItemKind {
    Function,
    Struct,
    Import,
}

struct Item {
    kind: ItemKind,
    func: Function,
    struct_def: Struct,
    import: Import,
}

// Program (root of AST)
struct Program {
    items: [Item; MAX_ITEMS],
    item_count: i64,
}

// Helper functions to create AST nodes
fn create_program() -> Program {
    return Program {
        items: [Item { kind: ItemKind::Function, func: Function { name: "", params: [], param_count: 0, return_type: Type::I64, has_return_type: false, body: [], body_count: 0, is_public: false }, struct_def: Struct { name: "", fields: [], field_count: 0, is_public: false }, import: Import { module: "" } }; MAX_ITEMS],
        item_count: 0,
    };
}

fn create_let_stmt(name: String, ty: Type, value: Expr) -> Stmt {
    let mut stmt = Stmt {
        kind: StmtKind::Let,
        let_name: name,
        let_type: ty,
        let_value_kind: ExprKind::Integer,
        let_value_int: 0,
        let_value_str: "",
        let_value_bool: false,
        let_value_ident: "",
        assign_target: "",
        assign_value_kind: ExprKind::Integer,
        assign_value_int: 0,
        assign_value_str: "",
        assign_value_bool: false,
        assign_value_ident: "",
        return_value_kind: ExprKind::Integer,
        return_value_int: 0,
        return_value_str: "",
        return_value_bool: false,
        return_value_ident: "",
        expr_kind: ExprKind::Integer,
        expr_call: CallExpr { func: "", args: [], arg_count: 0 },
        if_cond_kind: ExprKind::Integer,
        if_cond_binary: BinaryExpr { left_kind: ExprKind::Integer, left_int: 0, left_str: "", left_bool: false, op: BinOp::Add, right_kind: ExprKind::Integer, right_int: 0, right_str: "", right_bool: false },
        if_then: [],
        if_then_count: 0,
        if_else: [],
        if_else_count: 0,
        if_has_else: false,
        while_cond_kind: ExprKind::Integer,
        while_cond_binary: BinaryExpr { left_kind: ExprKind::Integer, left_int: 0, left_str: "", left_bool: false, op: BinOp::Add, right_kind: ExprKind::Integer, right_int: 0, right_str: "", right_bool: false },
        while_body: [],
        while_body_count: 0,
        for_var: "",
        for_start: 0,
        for_end: 0,
        for_body: [],
        for_body_count: 0,
    };
    
    // Set the value based on expression type
    // (Simplified - would need full implementation)
    return stmt;
}