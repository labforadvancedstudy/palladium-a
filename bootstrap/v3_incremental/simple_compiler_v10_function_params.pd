// Simple Palladium Compiler v10 with Function Parameters
// Adds support for function parameters and proper function calls
// Based on v7 with type checking

// ============ Helper Functions ============

fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57; // '0' to '9'
}

fn is_alpha(ch: i64) -> bool {
    return (ch >= 97 && ch <= 122) || // 'a' to 'z'
           (ch >= 65 && ch <= 90);     // 'A' to 'Z'
}

fn is_alphanum(ch: i64) -> bool {
    return is_alpha(ch) || is_digit(ch) || ch == 95; // underscore
}

fn is_whitespace(ch: i64) -> bool {
    return ch == 32 || ch == 9 || ch == 10 || ch == 13;
}

// Skip whitespace and return new position
fn skip_whitespace(line: String, start: i64) -> i64 {
    let mut i = start;
    let len = string_len(line);
    while i < len {
        let ch = string_char_at(line, i);
        if !is_whitespace(ch) {
            break;
        }
        i = i + 1;
    }
    return i;
}

// Extract identifier starting at position
fn extract_identifier(line: String, start: i64) -> String {
    let mut result = "";
    let mut i = start;
    let len = string_len(line);
    
    while i < len {
        let ch = string_char_at(line, i);
        if is_alphanum(ch) {
            result = string_concat(result, string_from_char(ch));
        } else {
            break;
        }
        i = i + 1;
    }
    
    return result;
}

// Simple string equality check
fn string_eq(a: String, b: String) -> bool {
    let len_a = string_len(a);
    let len_b = string_len(b);
    
    if len_a != len_b {
        return false;
    }
    
    let mut i = 0;
    while i < len_a {
        if string_char_at(a, i) != string_char_at(b, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

// Find matching closing parenthesis
fn find_closing_paren(line: String, start: i64) -> i64 {
    let mut depth = 0;
    let mut i = start;
    let len = string_len(line);
    
    while i < len {
        let ch = string_char_at(line, i);
        if ch == 40 { // '('
            depth = depth + 1;
        } else if ch == 41 { // ')'
            depth = depth - 1;
            if depth == 0 {
                return i;
            }
        }
        i = i + 1;
    }
    
    return -1;
}

// Extract substring
fn substring(str: String, start: i64, end: i64) -> String {
    let mut result = "";
    let mut i = start;
    
    while i <= end && i < string_len(str) {
        result = string_concat(result, string_from_char(string_char_at(str, i)));
        i = i + 1;
    }
    
    return result;
}

// Trim whitespace from string
fn trim(str: String) -> String {
    let len = string_len(str);
    if len == 0 {
        return str;
    }
    
    // Find start
    let mut start = 0;
    while start < len && is_whitespace(string_char_at(str, start)) {
        start = start + 1;
    }
    
    // Find end
    let mut end = len - 1;
    while end >= 0 && is_whitespace(string_char_at(str, end)) {
        end = end - 1;
    }
    
    if start > end {
        return "";
    }
    
    return substring(str, start, end);
}

// Split string by delimiter (simple version for comma-separated)
fn split_by_comma(str: String) -> [String; 10] {
    let mut result: [String; 10] = [""; 10];
    let mut count = 0;
    let mut current = "";
    let mut i = 0;
    let mut paren_depth = 0;
    
    while i < string_len(str) && count < 10 {
        let ch = string_char_at(str, i);
        
        if ch == 40 { // '('
            paren_depth = paren_depth + 1;
        } else if ch == 41 { // ')'
            paren_depth = paren_depth - 1;
        }
        
        if ch == 44 && paren_depth == 0 { // ',' at top level
            result[count] = trim(current);
            count = count + 1;
            current = "";
        } else {
            current = string_concat(current, string_from_char(ch));
        }
        
        i = i + 1;
    }
    
    // Add last part
    if string_len(current) > 0 && count < 10 {
        result[count] = trim(current);
    }
    
    return result;
}

// ============ Type System ============

// Type IDs (same as v7)
const TYPE_VOID: i64 = 0;
const TYPE_I64: i64 = 1;
const TYPE_STRING: i64 = 2;
const TYPE_BOOL: i64 = 3;
const TYPE_F64: i64 = 4;

// Convert type ID to string
fn type_to_string(type_id: i64) -> String {
    if type_id == TYPE_VOID { return "void"; }
    if type_id == TYPE_I64 { return "i64"; }
    if type_id == TYPE_STRING { return "String"; }
    if type_id == TYPE_BOOL { return "bool"; }
    if type_id == TYPE_F64 { return "f64"; }
    return "unknown";
}

// Convert type name to type ID
fn type_name_to_id(type_name: String) -> i64 {
    if string_eq(type_name, "i64") { return TYPE_I64; }
    if string_eq(type_name, "String") { return TYPE_STRING; }
    if string_eq(type_name, "bool") { return TYPE_BOOL; }
    if string_eq(type_name, "f64") { return TYPE_F64; }
    if string_eq(type_name, "void") { return TYPE_VOID; }
    return -1;
}

// Convert type ID to C type
fn type_to_c(type_id: i64) -> String {
    if type_id == TYPE_VOID { return "void"; }
    if type_id == TYPE_I64 { return "long long"; }
    if type_id == TYPE_STRING { return "const char*"; }
    if type_id == TYPE_BOOL { return "int"; }
    if type_id == TYPE_F64 { return "double"; }
    return "void*";
}

// ============ Symbol Table ============

// Function information
struct FunctionInfo {
    name: String,
    return_type: i64,
    param_count: i64,
    param_names: [String; 10],
    param_types: [i64; 10],
}

// Global symbol table
let mut functions: [FunctionInfo; 100];
let mut function_count = 0;

let mut variables: [String; 100];
let mut var_types: [i64; 100];
let mut var_count = 0;

// Current function context
let mut current_function: String = "";
let mut current_return_type: i64 = TYPE_VOID;

// Initialize symbol table
fn init_symbol_table() {
    function_count = 0;
    var_count = 0;
    current_function = "";
    
    // Add built-in functions
    add_builtin_function("print", TYPE_VOID, 1, ["s"], [TYPE_STRING]);
    add_builtin_function("print_int", TYPE_VOID, 1, ["n"], [TYPE_I64]);
    add_builtin_function("string_len", TYPE_I64, 1, ["s"], [TYPE_STRING]);
    add_builtin_function("string_char_at", TYPE_I64, 2, ["s", "i"], [TYPE_STRING, TYPE_I64]);
    add_builtin_function("string_from_char", TYPE_STRING, 1, ["c"], [TYPE_I64]);
    add_builtin_function("int_to_string", TYPE_STRING, 1, ["n"], [TYPE_I64]);
    add_builtin_function("string_concat", TYPE_STRING, 2, ["a", "b"], [TYPE_STRING, TYPE_STRING]);
}

// Add built-in function
fn add_builtin_function(name: String, ret_type: i64, param_count: i64, 
                       param_names: [String; 10], param_types: [i64; 10]) {
    if function_count < 100 {
        functions[function_count] = FunctionInfo {
            name: name,
            return_type: ret_type,
            param_count: param_count,
            param_names: param_names,
            param_types: param_types,
        };
        function_count = function_count + 1;
    }
}

// Add user-defined function
fn add_function(name: String, ret_type: i64) {
    if function_count < 100 {
        functions[function_count] = FunctionInfo {
            name: name,
            return_type: ret_type,
            param_count: 0,
            param_names: [""; 10],
            param_types: [0; 10],
        };
        function_count = function_count + 1;
    }
}

// Find function
fn find_function(name: String) -> i64 {
    let mut i = 0;
    while i < function_count {
        if string_eq(functions[i].name, name) {
            return i;
        }
        i = i + 1;
    }
    return -1;
}

// Add parameter to current function
fn add_parameter(func_index: i64, param_name: String, param_type: i64) {
    if func_index >= 0 && func_index < function_count {
        let func = &mut functions[func_index];
        if func.param_count < 10 {
            func.param_names[func.param_count] = param_name;
            func.param_types[func.param_count] = param_type;
            func.param_count = func.param_count + 1;
        }
    }
}

// Add variable
fn add_variable(name: String, type_id: i64) {
    // Check if exists and update
    let mut i = 0;
    while i < var_count {
        if string_eq(variables[i], name) {
            var_types[i] = type_id;
            return;
        }
        i = i + 1;
    }
    
    // Add new
    if var_count < 100 {
        variables[var_count] = name;
        var_types[var_count] = type_id;
        var_count = var_count + 1;
    }
}

// Get variable type
fn get_variable_type(name: String) -> i64 {
    let mut i = 0;
    while i < var_count {
        if string_eq(variables[i], name) {
            return var_types[i];
        }
        i = i + 1;
    }
    return -1;
}

// ============ Expression Type Inference ============

fn infer_type_from_literal(expr: String) -> i64 {
    let trimmed = trim(expr);
    if string_len(trimmed) == 0 {
        return -1;
    }
    
    let ch = string_char_at(trimmed, 0);
    
    // String literal
    if ch == 34 { // '"'
        return TYPE_STRING;
    }
    
    // Boolean literals
    if string_eq(trimmed, "true") || string_eq(trimmed, "false") {
        return TYPE_BOOL;
    }
    
    // Number literal
    if is_digit(ch) || (ch == 45 && string_len(trimmed) > 1) { // negative number
        // Check for decimal point
        let mut i = 0;
        while i < string_len(trimmed) {
            if string_char_at(trimmed, i) == 46 { // '.'
                return TYPE_F64;
            }
            i = i + 1;
        }
        return TYPE_I64;
    }
    
    return -1;
}

fn infer_expression_type(expr: String) -> i64 {
    let trimmed = trim(expr);
    
    // Try literal first
    let literal_type = infer_type_from_literal(trimmed);
    if literal_type >= 0 {
        return literal_type;
    }
    
    // Check for function call
    let mut i = 0;
    while i < string_len(trimmed) && is_alphanum(string_char_at(trimmed, i)) {
        i = i + 1;
    }
    
    if i > 0 {
        let name = substring(trimmed, 0, i - 1);
        i = skip_whitespace(trimmed, i);
        
        if i < string_len(trimmed) && string_char_at(trimmed, i) == 40 { // '('
            // It's a function call
            let func_idx = find_function(name);
            if func_idx >= 0 {
                return functions[func_idx].return_type;
            }
        } else {
            // It's a variable
            return get_variable_type(name);
        }
    }
    
    return -1;
}

// ============ Function Parsing ============

// Parse function signature
fn parse_function_signature(sig: String) -> i64 {
    let mut i = skip_whitespace(sig, 2); // Skip "fn"
    
    // Get function name
    let func_name = extract_identifier(sig, i);
    if string_len(func_name) == 0 {
        print("Error: Expected function name");
        return -1;
    }
    
    i = i + string_len(func_name);
    i = skip_whitespace(sig, i);
    
    // Expect '('
    if i >= string_len(sig) || string_char_at(sig, i) != 40 {
        print("Error: Expected '(' after function name");
        return -1;
    }
    i = i + 1;
    
    // Find closing ')'
    let close_paren = find_closing_paren(sig, i - 1);
    if close_paren < 0 {
        print("Error: Missing closing parenthesis");
        return -1;
    }
    
    // Default return type
    let mut return_type = TYPE_VOID;
    
    // Check for return type
    let after_params = skip_whitespace(sig, close_paren + 1);
    if after_params < string_len(sig) - 1 {
        // Check for ->
        if string_char_at(sig, after_params) == 45 && 
           string_char_at(sig, after_params + 1) == 62 { // "->"
            let ret_type_start = skip_whitespace(sig, after_params + 2);
            let ret_type_name = extract_identifier(sig, ret_type_start);
            return_type = type_name_to_id(ret_type_name);
            if return_type < 0 {
                print(string_concat("Error: Unknown return type: ", ret_type_name));
                return_type = TYPE_VOID;
            }
        }
    }
    
    // Add function to symbol table
    add_function(func_name, return_type);
    let func_idx = function_count - 1;
    
    // Parse parameters
    let params_str = substring(sig, i, close_paren - 1);
    if string_len(trim(params_str)) > 0 {
        let params = split_by_comma(params_str);
        let mut param_idx = 0;
        
        while param_idx < 10 && string_len(params[param_idx]) > 0 {
            let param = params[param_idx];
            let mut j = 0;
            
            // Get parameter name
            let param_name = extract_identifier(param, j);
            if string_len(param_name) == 0 {
                break;
            }
            
            j = j + string_len(param_name);
            j = skip_whitespace(param, j);
            
            // Expect ':'
            if j >= string_len(param) || string_char_at(param, j) != 58 {
                print(string_concat("Error: Expected ':' after parameter ", param_name));
                break;
            }
            j = j + 1;
            j = skip_whitespace(param, j);
            
            // Get parameter type
            let param_type_name = extract_identifier(param, j);
            let param_type = type_name_to_id(param_type_name);
            if param_type < 0 {
                print(string_concat("Error: Unknown parameter type: ", param_type_name));
                param_type = TYPE_I64; // Default
            }
            
            // Add parameter
            add_parameter(func_idx, param_name, param_type);
            
            // Also add as local variable
            add_variable(param_name, param_type);
            
            param_idx = param_idx + 1;
        }
    }
    
    // Set current function context
    current_function = func_name;
    current_return_type = return_type;
    
    return func_idx;
}

// ============ Code Generation ============

// Generate C function signature
fn generate_c_signature(func_idx: i64) -> String {
    if func_idx < 0 || func_idx >= function_count {
        return "";
    }
    
    let func = functions[func_idx];
    let mut sig = type_to_c(func.return_type) + " " + func.name + "(";
    
    if func.param_count == 0 {
        sig = string_concat(sig, "void");
    } else {
        let mut i = 0;
        while i < func.param_count {
            if i > 0 {
                sig = string_concat(sig, ", ");
            }
            sig = string_concat(sig, type_to_c(func.param_types[i]));
            sig = string_concat(sig, " ");
            sig = string_concat(sig, func.param_names[i]);
            i = i + 1;
        }
    }
    
    sig = string_concat(sig, ")");
    return sig;
}

// Compile function call
fn compile_function_call(line: String, start: i64, indent: String) -> String {
    let func_name = extract_identifier(line, start);
    let func_idx = find_function(func_name);
    
    if func_idx < 0 {
        return indent + "// Error: Unknown function '" + func_name + "'\n";
    }
    
    let func = functions[func_idx];
    let i = start + string_len(func_name);
    let open_paren = skip_whitespace(line, i);
    
    if open_paren >= string_len(line) || string_char_at(line, open_paren) != 40 {
        return indent + "// Error: Expected '(' after function name\n";
    }
    
    let close_paren = find_closing_paren(line, open_paren);
    if close_paren < 0 {
        return indent + "// Error: Missing closing parenthesis\n";
    }
    
    // Extract arguments
    let args_str = substring(line, open_paren + 1, close_paren - 1);
    let args = split_by_comma(args_str);
    
    // Count actual arguments
    let mut arg_count = 0;
    while arg_count < 10 && string_len(args[arg_count]) > 0 {
        arg_count = arg_count + 1;
    }
    
    // Check argument count
    if arg_count != func.param_count {
        return indent + "// Error: Function '" + func_name + 
               "' expects " + int_to_string(func.param_count) + 
               " arguments, got " + int_to_string(arg_count) + "\n";
    }
    
    // Type check arguments
    let mut j = 0;
    while j < arg_count {
        let arg_type = infer_expression_type(args[j]);
        if arg_type >= 0 && arg_type != func.param_types[j] {
            return indent + "// Error: Type mismatch in argument " + 
                   int_to_string(j + 1) + " of '" + func_name + 
                   "'. Expected " + type_to_string(func.param_types[j]) + 
                   " but got " + type_to_string(arg_type) + "\n";
        }
        j = j + 1;
    }
    
    // Generate call
    let mut result = indent;
    
    // Special handling for built-in functions
    if string_eq(func_name, "print") {
        result = result + "printf(\"%s\\n\", " + args[0] + ");\n";
    } else if string_eq(func_name, "print_int") {
        result = result + "printf(\"%lld\\n\", (long long)" + args[0] + ");\n";
    } else {
        // Regular function call
        result = result + func_name + "(";
        let mut k = 0;
        while k < arg_count {
            if k > 0 {
                result = string_concat(result, ", ");
            }
            result = string_concat(result, args[k]);
            k = k + 1;
        }
        result = result + ");\n";
    }
    
    return result;
}

// Compile return statement
fn compile_return(line: String, start: i64, indent: String) -> String {
    let i = skip_whitespace(line, start);
    
    // Extract return expression
    let mut expr = "";
    let mut j = i;
    while j < string_len(line) {
        let ch = string_char_at(line, j);
        if ch == 59 { // ';'
            break;
        }
        expr = string_concat(expr, string_from_char(ch));
        j = j + 1;
    }
    
    expr = trim(expr);
    
    // Type check return value
    if string_len(expr) == 0 {
        // Empty return
        if current_return_type != TYPE_VOID {
            return indent + "// Error: Function '" + current_function + 
                   "' must return " + type_to_string(current_return_type) + "\n";
        }
        return indent + "return;\n";
    } else {
        // Return with value
        if current_return_type == TYPE_VOID {
            return indent + "// Error: Void function '" + current_function + 
                   "' cannot return a value\n";
        }
        
        let expr_type = infer_expression_type(expr);
        if expr_type >= 0 && expr_type != current_return_type {
            return indent + "// Error: Return type mismatch in '" + current_function + 
                   "'. Expected " + type_to_string(current_return_type) + 
                   " but got " + type_to_string(expr_type) + "\n";
        }
        
        return indent + "return " + expr + ";\n";
    }
}

// Compile statement
fn compile_statement(line: String, indent: String) -> String {
    let i = skip_whitespace(line, 0);
    
    if i >= string_len(line) {
        return "";
    }
    
    // Check statement type
    if starts_with_at(line, "print(", i) {
        return compile_function_call(line, i, indent);
    } else if starts_with_at(line, "print_int(", i) {
        return compile_function_call(line, i, indent);
    } else if starts_with_at(line, "let ", i) {
        return compile_let(line, i + 4, indent);
    } else if starts_with_at(line, "return", i) {
        return compile_return(line, i + 6, indent);
    } else {
        // Check for function call or assignment
        let id = extract_identifier(line, i);
        if string_len(id) > 0 {
            let after_id = i + string_len(id);
            let next_pos = skip_whitespace(line, after_id);
            
            if next_pos < string_len(line) {
                let next_ch = string_char_at(line, next_pos);
                if next_ch == 40 { // '(' - function call
                    return compile_function_call(line, i, indent);
                } else if next_ch == 61 { // '=' - assignment
                    return compile_assignment(line, i, indent);
                }
            }
        }
    }
    
    return indent + "// Unknown statement: " + line + "\n";
}

// Helper function for starts_with_at
fn starts_with_at(str: String, prefix: String, pos: i64) -> bool {
    let str_len = string_len(str);
    let prefix_len = string_len(prefix);
    
    if pos + prefix_len > str_len {
        return false;
    }
    
    let mut i = 0;
    while i < prefix_len {
        if string_char_at(str, pos + i) != string_char_at(prefix, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

// Compile let statement (simplified from v7)
fn compile_let(line: String, start: i64, indent: String) -> String {
    let i = skip_whitespace(line, start);
    
    // Check for 'mut'
    let is_mut = starts_with_at(line, "mut ", i);
    if is_mut {
        i = skip_whitespace(line, i + 4);
    }
    
    // Extract variable name
    let var_name = extract_identifier(line, i);
    if string_len(var_name) == 0 {
        return indent + "// Error: Expected variable name after 'let'\n";
    }
    
    i = i + string_len(var_name);
    i = skip_whitespace(line, i);
    
    // Check for type annotation
    let mut explicit_type = -1;
    if i < string_len(line) && string_char_at(line, i) == 58 { // ':'
        i = skip_whitespace(line, i + 1);
        let type_name = extract_identifier(line, i);
        explicit_type = type_name_to_id(type_name);
        i = i + string_len(type_name);
        i = skip_whitespace(line, i);
    }
    
    // Expect '='
    if i >= string_len(line) || string_char_at(line, i) != 61 { // '='
        return indent + "// Error: Expected '=' in let statement\n";
    }
    
    i = skip_whitespace(line, i + 1);
    
    // Get the initialization expression
    let init_expr = substring(line, i, string_len(line) - 1);
    if string_char_at(init_expr, string_len(init_expr) - 1) == 59 { // ';'
        init_expr = substring(init_expr, 0, string_len(init_expr) - 2);
    }
    
    // Infer type if not explicit
    let var_type = explicit_type;
    if var_type < 0 {
        var_type = infer_expression_type(init_expr);
        if var_type < 0 {
            var_type = TYPE_I64; // Default
        }
    }
    
    // Add variable to symbol table
    add_variable(var_name, var_type);
    
    // Generate C code
    let c_type = type_to_c(var_type);
    return indent + c_type + " " + var_name + " = " + init_expr + ";\n";
}

// Compile assignment
fn compile_assignment(line: String, start: i64, indent: String) -> String {
    let var_name = extract_identifier(line, start);
    let var_type = get_variable_type(var_name);
    
    if var_type < 0 {
        return indent + "// Error: Unknown variable '" + var_name + "'\n";
    }
    
    let i = start + string_len(var_name);
    i = skip_whitespace(line, i);
    
    if string_char_at(line, i) != 61 { // '='
        return indent + "// Error: Expected '=' in assignment\n";
    }
    
    i = skip_whitespace(line, i + 1);
    
    let expr = substring(line, i, string_len(line) - 1);
    if string_char_at(expr, string_len(expr) - 1) == 59 { // ';'
        expr = substring(expr, 0, string_len(expr) - 2);
    }
    
    // Type check
    let expr_type = infer_expression_type(expr);
    if expr_type >= 0 && expr_type != var_type {
        return indent + "// Error: Type mismatch in assignment to '" + var_name + 
               "'. Expected " + type_to_string(var_type) + 
               " but got " + type_to_string(expr_type) + "\n";
    }
    
    return indent + var_name + " = " + expr + ";\n";
}

// ============ Main Compiler ============

fn compile_program(source: String) -> String {
    init_symbol_table();
    
    let mut output = "#include <stdio.h>\n#include <string.h>\n\n";
    
    // Forward declarations
    let mut forward_decls = "";
    
    // First pass: collect function signatures
    let mut i = 0;
    let mut current_line = "";
    let mut in_function = false;
    let mut brace_count = 0;
    
    while i < string_len(source) {
        let ch = string_char_at(source, i);
        
        if ch == 10 { // newline
            if starts_with_at(current_line, "fn ", 0) && !in_function {
                let func_idx = parse_function_signature(current_line);
                if func_idx >= 0 {
                    forward_decls = forward_decls + generate_c_signature(func_idx) + ";\n";
                    in_function = true;
                }
            } else if in_function {
                // Track braces
                let mut j = 0;
                while j < string_len(current_line) {
                    let line_ch = string_char_at(current_line, j);
                    if line_ch == 123 { brace_count = brace_count + 1; }
                    if line_ch == 125 { 
                        brace_count = brace_count - 1;
                        if brace_count == 0 { in_function = false; }
                    }
                    j = j + 1;
                }
            }
            current_line = "";
        } else if ch != 13 {
            current_line = string_concat(current_line, string_from_char(ch));
        }
        
        i = i + 1;
    }
    
    output = output + forward_decls + "\n";
    
    // Second pass: generate code
    i = 0;
    current_line = "";
    in_function = false;
    brace_count = 0;
    let mut current_func_idx = -1;
    
    while i < string_len(source) {
        let ch = string_char_at(source, i);
        
        if ch == 10 { // newline
            if starts_with_at(current_line, "fn ", 0) && !in_function {
                current_func_idx = find_function(extract_identifier(current_line, 3));
                if current_func_idx >= 0 {
                    output = output + generate_c_signature(current_func_idx) + " {\n";
                    in_function = true;
                    brace_count = 1;
                    
                    // Reset local variables but keep parameters
                    let func = functions[current_func_idx];
                    var_count = 0;
                    // Re-add parameters as local variables
                    let mut k = 0;
                    while k < func.param_count {
                        add_variable(func.param_names[k], func.param_types[k]);
                        k = k + 1;
                    }
                }
            } else if in_function {
                // Check for closing brace
                let mut has_closing_brace = false;
                let mut j = 0;
                while j < string_len(current_line) {
                    let line_ch = string_char_at(current_line, j);
                    if line_ch == 123 { brace_count = brace_count + 1; }
                    if line_ch == 125 { 
                        brace_count = brace_count - 1;
                        if brace_count == 0 { 
                            in_function = false;
                            has_closing_brace = true;
                        }
                    }
                    j = j + 1;
                }
                
                if !has_closing_brace && string_len(trim(current_line)) > 0 {
                    output = output + compile_statement(current_line, "    ");
                }
            }
            current_line = "";
        } else if ch != 13 {
            current_line = string_concat(current_line, string_from_char(ch));
        }
        
        i = i + 1;
    }
    
    // Add main function if not present
    if find_function("main") < 0 {
        output = output + "\nint main() {\n    return 0;\n}\n";
    }
    
    return output;
}

// ============ Test Program ============

fn main() {
    let test_program = "// Test program with function parameters
fn add(a: i64, b: i64) -> i64 {
    return a + b;
}

fn greet(name: String) {
    print(string_concat(\"Hello, \", name));
}

fn factorial(n: i64) -> i64 {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

fn main() {
    let x = 10;
    let y = 20;
    let sum = add(x, y);
    
    print(\"Testing function parameters:\");
    print_int(sum);
    
    greet(\"World\");
    
    let fact = factorial(5);
    print(\"5! =\");
    print_int(fact);
    
    // Type checking test - these would error:
    // add(\"hello\", 42);  // Type mismatch
    // greet(123);         // Wrong type
    // let bad = add(1);   // Wrong argument count
    
    return 0;
}";

    print("Function Parameters Compiler v10");
    print("================================");
    print("");
    print("Input program:");
    print("--------------");
    print(test_program);
    print("");
    
    let compiled = compile_program(test_program);
    
    print("Compiled output:");
    print("----------------");
    print(compiled);
}