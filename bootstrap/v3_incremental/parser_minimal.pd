// Minimal parser for bootstrap - no references, no Vec, no match
// Uses global state and the lexer from lexer_minimal.pd

// Import lexer (assume it's compiled together)
// We'll use the global TOKENS array from lexer

// Constants for AST nodes
const MAX_AST_NODES: i64 = 5000;
const MAX_CHILDREN: i64 = 20;
const MAX_PARAMS: i64 = 10;
const MAX_STMTS: i64 = 100;

// AST Node types
const AST_PROGRAM: i64 = 0;
const AST_FUNCTION: i64 = 1;
const AST_PARAM: i64 = 2;
const AST_STMT_LET: i64 = 3;
const AST_STMT_ASSIGN: i64 = 4;
const AST_STMT_RETURN: i64 = 5;
const AST_STMT_EXPR: i64 = 6;
const AST_STMT_IF: i64 = 7;
const AST_STMT_WHILE: i64 = 8;
const AST_STMT_FOR: i64 = 9;
const AST_EXPR_IDENT: i64 = 10;
const AST_EXPR_NUMBER: i64 = 11;
const AST_EXPR_STRING: i64 = 12;
const AST_EXPR_BOOL: i64 = 13;
const AST_EXPR_BINARY: i64 = 14;
const AST_EXPR_UNARY: i64 = 15;
const AST_EXPR_CALL: i64 = 16;
const AST_EXPR_INDEX: i64 = 17;
const AST_EXPR_FIELD: i64 = 18;
const AST_EXPR_ARRAY: i64 = 19;
const AST_EXPR_STRUCT: i64 = 20;
const AST_TYPE_I64: i64 = 21;
const AST_TYPE_I32: i64 = 22;
const AST_TYPE_BOOL: i64 = 23;
const AST_TYPE_STRING: i64 = 24;
const AST_TYPE_CUSTOM: i64 = 25;
const AST_TYPE_ARRAY: i64 = 26;
const AST_STRUCT_DEF: i64 = 27;
const AST_FIELD: i64 = 28;
const AST_IMPORT: i64 = 29;

// Binary operators (reuse token types)
// PLUS, MINUS, STAR, SLASH, etc. from lexer

// AST Node structure
struct ASTNode {
    type: i64,
    value: i64,              // Number value or string table offset
    children: [i64; MAX_CHILDREN],  // Indices to other nodes
    child_count: i64,
    line: i64,
    column: i64,
}

// Global parser state
let mut AST_NODES: [ASTNode; MAX_AST_NODES] = [ASTNode { 
    type: AST_PROGRAM, 
    value: 0, 
    children: [0; MAX_CHILDREN], 
    child_count: 0,
    line: 0,
    column: 0
}; MAX_AST_NODES];
let mut AST_NODE_COUNT: i64 = 0;
let mut CURRENT_TOKEN: i64 = 0;

// External lexer globals (defined in lexer_minimal.pd)
extern {
    let TOKENS: [Token; MAX_TOKENS];
    let TOKEN_COUNT: i64;
    let STRING_TABLE: [i64; MAX_STRING_TABLE];
    fn get_string_from_table(offset: i64) -> String;
}

// Create a new AST node
fn new_node(type: i64, value: i64) -> i64 {
    if AST_NODE_COUNT >= MAX_AST_NODES {
        print("Error: AST node limit reached");
        return -1;
    }
    
    let node_id = AST_NODE_COUNT;
    let tok = TOKENS[CURRENT_TOKEN];
    
    AST_NODES[node_id] = ASTNode {
        type: type,
        value: value,
        children: [0; MAX_CHILDREN],
        child_count: 0,
        line: tok.line,
        column: tok.column,
    };
    
    AST_NODE_COUNT = AST_NODE_COUNT + 1;
    return node_id;
}

// Add child to node
fn add_child(parent: i64, child: i64) {
    if parent >= 0 && parent < AST_NODE_COUNT && child >= 0 {
        let mut node = AST_NODES[parent];
        if node.child_count < MAX_CHILDREN {
            node.children[node.child_count] = child;
            node.child_count = node.child_count + 1;
            AST_NODES[parent] = node;
        }
    }
}

// Parser utilities
fn current_token_type() -> i64 {
    if CURRENT_TOKEN < TOKEN_COUNT {
        return TOKENS[CURRENT_TOKEN].type;
    }
    return TOK_EOF;
}

fn current_token_value() -> i64 {
    if CURRENT_TOKEN < TOKEN_COUNT {
        return TOKENS[CURRENT_TOKEN].value;
    }
    return 0;
}

fn advance_token() {
    if CURRENT_TOKEN < TOKEN_COUNT {
        CURRENT_TOKEN = CURRENT_TOKEN + 1;
    }
}

fn expect_token(expected: i64) -> bool {
    if current_token_type() == expected {
        advance_token();
        return true;
    }
    print("Parse error: expected token type " + int_to_string(expected) + " but got " + int_to_string(current_token_type()));
    return false;
}

fn check_token(type: i64) -> bool {
    return current_token_type() == type;
}

// Forward declarations (would be needed in C)
fn parse_expression() -> i64;
fn parse_statement() -> i64;
fn parse_type() -> i64;

// Parse primary expression
fn parse_primary() -> i64 {
    let tok_type = current_token_type();
    let tok_value = current_token_value();
    
    if tok_type == TOK_NUMBER {
        advance_token();
        return new_node(AST_EXPR_NUMBER, tok_value);
    } else if tok_type == TOK_STRING {
        advance_token();
        return new_node(AST_EXPR_STRING, tok_value);
    } else if tok_type == TOK_TRUE {
        advance_token();
        return new_node(AST_EXPR_BOOL, 1);
    } else if tok_type == TOK_FALSE {
        advance_token();
        return new_node(AST_EXPR_BOOL, 0);
    } else if tok_type == TOK_IDENT {
        let ident_node = new_node(AST_EXPR_IDENT, tok_value);
        advance_token();
        
        // Check for function call
        if check_token(TOK_LPAREN) {
            advance_token();
            let call_node = new_node(AST_EXPR_CALL, 0);
            add_child(call_node, ident_node);
            
            // Parse arguments
            while !check_token(TOK_RPAREN) && !check_token(TOK_EOF) {
                let arg = parse_expression();
                add_child(call_node, arg);
                
                if check_token(TOK_COMMA) {
                    advance_token();
                } else {
                    break;
                }
            }
            
            expect_token(TOK_RPAREN);
            return call_node;
        }
        
        // Check for array index
        if check_token(TOK_LBRACKET) {
            advance_token();
            let index_node = new_node(AST_EXPR_INDEX, 0);
            add_child(index_node, ident_node);
            add_child(index_node, parse_expression());
            expect_token(TOK_RBRACKET);
            return index_node;
        }
        
        // Check for field access
        if check_token(TOK_DOT) {
            advance_token();
            let field_node = new_node(AST_EXPR_FIELD, current_token_value());
            add_child(field_node, ident_node);
            expect_token(TOK_IDENT);
            return field_node;
        }
        
        return ident_node;
    } else if tok_type == TOK_LPAREN {
        advance_token();
        let expr = parse_expression();
        expect_token(TOK_RPAREN);
        return expr;
    } else if tok_type == TOK_LBRACKET {
        // Array literal
        advance_token();
        let array_node = new_node(AST_EXPR_ARRAY, 0);
        
        while !check_token(TOK_RBRACKET) && !check_token(TOK_EOF) {
            add_child(array_node, parse_expression());
            if check_token(TOK_COMMA) {
                advance_token();
            } else {
                break;
            }
        }
        
        expect_token(TOK_RBRACKET);
        return array_node;
    } else if tok_type == TOK_BANG || tok_type == TOK_MINUS {
        // Unary expression
        advance_token();
        let unary_node = new_node(AST_EXPR_UNARY, tok_type);
        add_child(unary_node, parse_primary());
        return unary_node;
    }
    
    print("Parse error: unexpected token in expression");
    return -1;
}

// Parse binary expression (simplified - no precedence)
fn parse_expression() -> i64 {
    let mut left = parse_primary();
    
    while true {
        let op = current_token_type();
        if op == TOK_PLUS || op == TOK_MINUS || op == TOK_STAR || op == TOK_SLASH || 
           op == TOK_PERCENT || op == TOK_EQEQ || op == TOK_NE || op == TOK_LT || 
           op == TOK_GT || op == TOK_LE || op == TOK_GE || op == TOK_AMPAMP || 
           op == TOK_PIPEPIPE {
            advance_token();
            let binary_node = new_node(AST_EXPR_BINARY, op);
            add_child(binary_node, left);
            add_child(binary_node, parse_primary());
            left = binary_node;
        } else {
            break;
        }
    }
    
    return left;
}

// Parse type
fn parse_type() -> i64 {
    let tok_type = current_token_type();
    
    if tok_type == TOK_I64 {
        advance_token();
        return new_node(AST_TYPE_I64, 0);
    } else if tok_type == TOK_I32 {
        advance_token();
        return new_node(AST_TYPE_I32, 0);
    } else if tok_type == TOK_BOOL {
        advance_token();
        return new_node(AST_TYPE_BOOL, 0);
    } else if tok_type == TOK_STRING_TYPE {
        advance_token();
        return new_node(AST_TYPE_STRING, 0);
    } else if tok_type == TOK_IDENT {
        let type_node = new_node(AST_TYPE_CUSTOM, current_token_value());
        advance_token();
        return type_node;
    } else if tok_type == TOK_LBRACKET {
        // Array type
        advance_token();
        let elem_type = parse_type();
        expect_token(TOK_SEMICOLON);
        let size = 0;
        if check_token(TOK_NUMBER) {
            size = current_token_value();
            advance_token();
        }
        expect_token(TOK_RBRACKET);
        let array_type = new_node(AST_TYPE_ARRAY, size);
        add_child(array_type, elem_type);
        return array_type;
    }
    
    print("Parse error: expected type");
    return -1;
}

// Parse let statement
fn parse_let_statement() -> i64 {
    expect_token(TOK_LET);
    
    let is_mut = 0;
    if check_token(TOK_MUT) {
        is_mut = 1;
        advance_token();
    }
    
    let name = current_token_value();
    expect_token(TOK_IDENT);
    
    let let_node = new_node(AST_STMT_LET, name);
    
    // Optional type annotation
    if check_token(TOK_COLON) {
        advance_token();
        add_child(let_node, parse_type());
    }
    
    // Optional initialization
    if check_token(TOK_EQ) {
        advance_token();
        add_child(let_node, parse_expression());
    }
    
    expect_token(TOK_SEMICOLON);
    return let_node;
}

// Parse if statement
fn parse_if_statement() -> i64 {
    expect_token(TOK_IF);
    
    let if_node = new_node(AST_STMT_IF, 0);
    
    // Condition
    add_child(if_node, parse_expression());
    
    // Then block
    expect_token(TOK_LBRACE);
    while !check_token(TOK_RBRACE) && !check_token(TOK_EOF) {
        add_child(if_node, parse_statement());
    }
    expect_token(TOK_RBRACE);
    
    // Optional else
    if check_token(TOK_ELSE) {
        advance_token();
        expect_token(TOK_LBRACE);
        // Mark where else statements start by adding a special marker node
        let else_marker = new_node(AST_PROGRAM, -1); // Special marker
        add_child(if_node, else_marker);
        
        while !check_token(TOK_RBRACE) && !check_token(TOK_EOF) {
            add_child(if_node, parse_statement());
        }
        expect_token(TOK_RBRACE);
    }
    
    return if_node;
}

// Parse while statement
fn parse_while_statement() -> i64 {
    expect_token(TOK_WHILE);
    
    let while_node = new_node(AST_STMT_WHILE, 0);
    
    // Condition
    add_child(while_node, parse_expression());
    
    // Body
    expect_token(TOK_LBRACE);
    while !check_token(TOK_RBRACE) && !check_token(TOK_EOF) {
        add_child(while_node, parse_statement());
    }
    expect_token(TOK_RBRACE);
    
    return while_node;
}

// Parse for statement
fn parse_for_statement() -> i64 {
    expect_token(TOK_FOR);
    
    let for_node = new_node(AST_STMT_FOR, 0);
    
    // Variable
    let var_name = current_token_value();
    expect_token(TOK_IDENT);
    add_child(for_node, new_node(AST_EXPR_IDENT, var_name));
    
    expect_token(TOK_IN);
    
    // Range or expression
    add_child(for_node, parse_expression());
    
    // Body
    expect_token(TOK_LBRACE);
    while !check_token(TOK_RBRACE) && !check_token(TOK_EOF) {
        add_child(for_node, parse_statement());
    }
    expect_token(TOK_RBRACE);
    
    return for_node;
}

// Parse statement
fn parse_statement() -> i64 {
    let tok_type = current_token_type();
    
    if tok_type == TOK_LET {
        return parse_let_statement();
    } else if tok_type == TOK_IF {
        return parse_if_statement();
    } else if tok_type == TOK_WHILE {
        return parse_while_statement();
    } else if tok_type == TOK_FOR {
        return parse_for_statement();
    } else if tok_type == TOK_RETURN {
        advance_token();
        let return_node = new_node(AST_STMT_RETURN, 0);
        if !check_token(TOK_SEMICOLON) {
            add_child(return_node, parse_expression());
        }
        expect_token(TOK_SEMICOLON);
        return return_node;
    } else if tok_type == TOK_IDENT {
        // Could be assignment or expression statement
        let start_pos = CURRENT_TOKEN;
        let expr = parse_expression();
        
        if check_token(TOK_EQ) {
            // Assignment
            advance_token();
            let assign_node = new_node(AST_STMT_ASSIGN, 0);
            add_child(assign_node, expr);
            add_child(assign_node, parse_expression());
            expect_token(TOK_SEMICOLON);
            return assign_node;
        } else {
            // Expression statement
            expect_token(TOK_SEMICOLON);
            let expr_stmt = new_node(AST_STMT_EXPR, 0);
            add_child(expr_stmt, expr);
            return expr_stmt;
        }
    } else {
        // Try to parse as expression statement
        let expr = parse_expression();
        expect_token(TOK_SEMICOLON);
        let expr_stmt = new_node(AST_STMT_EXPR, 0);
        add_child(expr_stmt, expr);
        return expr_stmt;
    }
}

// Parse function parameter
fn parse_param() -> i64 {
    let is_mut = 0;
    if check_token(TOK_MUT) {
        is_mut = 1;
        advance_token();
    }
    
    let name = current_token_value();
    expect_token(TOK_IDENT);
    
    expect_token(TOK_COLON);
    
    let param_node = new_node(AST_PARAM, name);
    add_child(param_node, parse_type());
    
    return param_node;
}

// Parse function
fn parse_function() -> i64 {
    let is_pub = 0;
    if check_token(TOK_PUB) {
        is_pub = 1;
        advance_token();
    }
    
    expect_token(TOK_FN);
    
    let name = current_token_value();
    expect_token(TOK_IDENT);
    
    let func_node = new_node(AST_FUNCTION, name);
    
    // Parameters
    expect_token(TOK_LPAREN);
    while !check_token(TOK_RPAREN) && !check_token(TOK_EOF) {
        add_child(func_node, parse_param());
        if check_token(TOK_COMMA) {
            advance_token();
        } else {
            break;
        }
    }
    expect_token(TOK_RPAREN);
    
    // Return type
    if check_token(TOK_ARROW) {
        advance_token();
        add_child(func_node, parse_type());
    }
    
    // Body
    expect_token(TOK_LBRACE);
    while !check_token(TOK_RBRACE) && !check_token(TOK_EOF) {
        add_child(func_node, parse_statement());
    }
    expect_token(TOK_RBRACE);
    
    return func_node;
}

// Parse struct
fn parse_struct() -> i64 {
    let is_pub = 0;
    if check_token(TOK_PUB) {
        is_pub = 1;
        advance_token();
    }
    
    expect_token(TOK_STRUCT);
    
    let name = current_token_value();
    expect_token(TOK_IDENT);
    
    let struct_node = new_node(AST_STRUCT_DEF, name);
    
    expect_token(TOK_LBRACE);
    
    // Fields
    while !check_token(TOK_RBRACE) && !check_token(TOK_EOF) {
        let field_name = current_token_value();
        expect_token(TOK_IDENT);
        expect_token(TOK_COLON);
        
        let field_node = new_node(AST_FIELD, field_name);
        add_child(field_node, parse_type());
        add_child(struct_node, field_node);
        
        if check_token(TOK_COMMA) {
            advance_token();
        }
    }
    
    expect_token(TOK_RBRACE);
    return struct_node;
}

// Parse import
fn parse_import() -> i64 {
    expect_token(TOK_IMPORT);
    
    let mut path = "";
    
    // Parse module path
    while true {
        if check_token(TOK_IDENT) {
            let name = get_string_from_table(current_token_value());
            path = string_concat(path, name);
            advance_token();
            
            if check_token(TOK_COLONCOLON) {
                advance_token();
                path = string_concat(path, "::");
            } else {
                break;
            }
        } else {
            break;
        }
    }
    
    expect_token(TOK_SEMICOLON);
    
    // For simplicity, store the module name in value field
    return new_node(AST_IMPORT, 0); // Would need to store path properly
}

// Main parse function
fn parse() -> i64 {
    CURRENT_TOKEN = 0;
    AST_NODE_COUNT = 0;
    
    let program_node = new_node(AST_PROGRAM, 0);
    
    while !check_token(TOK_EOF) {
        if check_token(TOK_FN) || (check_token(TOK_PUB) && TOKENS[CURRENT_TOKEN + 1].type == TOK_FN) {
            add_child(program_node, parse_function());
        } else if check_token(TOK_STRUCT) || (check_token(TOK_PUB) && TOKENS[CURRENT_TOKEN + 1].type == TOK_STRUCT) {
            add_child(program_node, parse_struct());
        } else if check_token(TOK_IMPORT) {
            add_child(program_node, parse_import());
        } else {
            print("Parse error: unexpected top-level token");
            advance_token();
        }
    }
    
    return program_node;
}

// Test the parser
fn test_parser() {
    print("Testing parser...");
    
    // Assume lexer has been run
    let root = parse();
    
    print("Parse complete!");
    print("AST nodes created: " + int_to_string(AST_NODE_COUNT));
}