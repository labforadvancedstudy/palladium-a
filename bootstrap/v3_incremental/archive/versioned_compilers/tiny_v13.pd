// Tiny Palladium Compiler v13 - Reads from command-line files!
// Getting closer to true self-hosting

fn is_same_string(s1: String, s2: String) -> bool {
    let len1 = string_len(s1);
    let len2 = string_len(s2);
    
    if len1 != len2 {
        return false;
    }
    
    let mut i = 0;
    while i < len1 {
        if string_char_at(s1, i) != string_char_at(s2, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

// Parse an expression with operators and function calls
fn parse_expr(expr: String) -> String {
    let mut result = "";
    let mut i = 0;
    let len = string_len(expr);
    
    while i < len {
        let ch = string_char_at(expr, i);
        
        // Look for == operator
        if i + 1 < len && ch == 61 && string_char_at(expr, i + 1) == 61 { // ==
            result = result + "==";
            i = i + 2;
            continue;
        }
        
        // Look for != operator  
        if i + 1 < len && ch == 33 && string_char_at(expr, i + 1) == 61 { // !=
            result = result + "!=";
            i = i + 2;
            continue;
        }
        
        // Look for <= operator
        if i + 1 < len && ch == 60 && string_char_at(expr, i + 1) == 61 { // <=
            result = result + "<=";
            i = i + 2;
            continue;
        }
        
        // Look for >= operator
        if i + 1 < len && ch == 62 && string_char_at(expr, i + 1) == 61 { // >=
            result = result + ">=";
            i = i + 2;
            continue;
        }
        
        // Look for function names
        if i + 13 <= len {
            let mut func_name = "";
            let mut m = 0;
            while m < 13 && i + m < len {
                func_name = func_name + string_from_char(string_char_at(expr, i + m));
                m = m + 1;
            }
            
            if is_same_string(func_name, "int_to_string") {
                result = result + "__pd_int_to_string";
                i = i + 13;
                continue;
            }
        }
        
        if i + 10 <= len {
            let mut func_name = "";
            let mut m = 0;
            while m < 10 && i + m < len {
                func_name = func_name + string_from_char(string_char_at(expr, i + m));
                m = m + 1;
            }
            
            if is_same_string(func_name, "string_len") {
                result = result + "__pd_string_len";
                i = i + 10;
                continue;
            }
        }
        
        // Look for __pd_read_file (already prefixed)
        if i + 14 <= len {
            let mut func_name = "";
            let mut m = 0;
            while m < 14 && i + m < len {
                func_name = func_name + string_from_char(string_char_at(expr, i + m));
                m = m + 1;
            }
            
            if is_same_string(func_name, "__pd_read_file") {
                result = result + "__pd_read_file";
                i = i + 14;
                continue;
            }
        }
        
        // Handle strings with quotes
        if ch == 34 { // "
            result = result + string_from_char(ch);
            i = i + 1;
            // Copy string content
            while i < len && string_char_at(expr, i) != 34 {
                let sc = string_char_at(expr, i);
                if sc == 92 && i + 1 < len { // \ escape
                    result = result + string_from_char(sc);
                    i = i + 1;
                    if i < len {
                        result = result + string_from_char(string_char_at(expr, i));
                        i = i + 1;
                    }
                } else {
                    result = result + string_from_char(sc);
                    i = i + 1;
                }
            }
            if i < len {
                result = result + string_from_char(34); // closing "
                i = i + 1;
            }
            continue;
        }
        
        // Copy character as-is
        result = result + string_from_char(ch);
        i = i + 1;
    }
    
    return result;
}

// Skip whitespace and return new position
fn skip_whitespace(source: String, pos: i64, len: i64) -> i64 {
    let mut p = pos;
    while p < len && (string_char_at(source, p) == 32 || 
                     string_char_at(source, p) == 10 ||
                     string_char_at(source, p) == 9) {
        p = p + 1;
    }
    return p;
}

// Parse a single statement - simplified for bootstrap
fn parse_statement(source: String, pos: i64, len: i64, indent: String) -> String {
    let mut p = pos;
    let mut output = "";
    
    p = skip_whitespace(source, p, len);
    
    if p >= len {
        return output;
    }
    
    // Look for "return"
    if p + 6 < len &&
       string_char_at(source, p) == 114 &&    // r
       string_char_at(source, p+1) == 101 &&  // e
       string_char_at(source, p+2) == 116 &&  // t
       string_char_at(source, p+3) == 117 &&  // u
       string_char_at(source, p+4) == 114 &&  // r
       string_char_at(source, p+5) == 110 {   // n
        
        output = output + indent + "return";
        p = p + 6;
        
        p = skip_whitespace(source, p, len);
        
        // Copy return value
        if p < len && string_char_at(source, p) != 59 { // ;
            output = output + " ";
            let mut expr = "";
            while p < len && string_char_at(source, p) != 59 {
                expr = expr + string_from_char(string_char_at(source, p));
                p = p + 1;
            }
            output = output + parse_expr(expr);
        }
        
        output = output + ";\n";
        return output;
    }
    
    // Look for "let"
    if p + 3 < len &&
       string_char_at(source, p) == 108 &&     // l
       string_char_at(source, p+1) == 101 &&   // e
       string_char_at(source, p+2) == 116 &&   // t
       (string_char_at(source, p+3) == 32 ||   // space
        string_char_at(source, p+3) == 9) {    // tab
        
        output = output + indent;
        p = p + 3;
        
        p = skip_whitespace(source, p, len);
        
        // Skip "mut" if present
        if p + 3 < len &&
           string_char_at(source, p) == 109 &&     // m
           string_char_at(source, p+1) == 117 &&   // u
           string_char_at(source, p+2) == 116 {    // t
            p = p + 3;
            p = skip_whitespace(source, p, len);
        }
        
        // Get variable name
        let mut var_name = "";
        while p < len && string_char_at(source, p) != 58 && // :
                        string_char_at(source, p) != 32 &&  // space
                        string_char_at(source, p) != 61 &&  // =
                        string_char_at(source, p) != 9 {    // tab
            var_name = var_name + string_from_char(string_char_at(source, p));
            p = p + 1;
        }
        
        p = skip_whitespace(source, p, len);
        
        // Parse type if present
        let mut c_type = "long long"; // default
        if p < len && string_char_at(source, p) == 58 { // :
            p = p + 1;
            p = skip_whitespace(source, p, len);
            
            // Read type
            let mut type_name = "";
            while p < len && string_char_at(source, p) != 32 &&
                            string_char_at(source, p) != 61 &&
                            string_char_at(source, p) != 9 {
                type_name = type_name + string_from_char(string_char_at(source, p));
                p = p + 1;
            }
            
            if is_same_string(type_name, "String") {
                c_type = "const char*";
            }
            if is_same_string(type_name, "bool") {
                c_type = "int";
            }
            if is_same_string(type_name, "i64") {
                c_type = "long long";
            }
        }
        
        output = output + c_type + " " + var_name;
        
        p = skip_whitespace(source, p, len);
        
        // Parse initialization
        if p < len && string_char_at(source, p) == 61 { // =
            p = p + 1;
            output = output + " = ";
            p = skip_whitespace(source, p, len);
            
            // Copy value
            let mut expr = "";
            let mut paren_depth = 0;
            while p < len && (string_char_at(source, p) != 59 || paren_depth > 0) {
                let ch = string_char_at(source, p);
                if ch == 40 { // (
                    paren_depth = paren_depth + 1;
                }
                if ch == 41 { // )
                    paren_depth = paren_depth - 1;
                }
                expr = expr + string_from_char(ch);
                p = p + 1;
            }
            output = output + parse_expr(expr);
        }
        
        output = output + ";\n";
        return output;
    }
    
    // Function call (like print)
    output = output + indent;
    let mut stmt = "";
    let mut paren_depth = 0;
    
    // Parse the statement
    while p < len && (string_char_at(source, p) != 59 || paren_depth > 0) {
        let ch = string_char_at(source, p);
        if ch == 40 { // (
            paren_depth = paren_depth + 1;
        }
        if ch == 41 { // )
            paren_depth = paren_depth - 1;
        }
        stmt = stmt + string_from_char(ch);
        p = p + 1;
    }
    
    // Check for print
    if string_len(stmt) >= 5 {
        let mut prefix = "";
        let mut i = 0;
        while i < 5 {
            prefix = prefix + string_from_char(string_char_at(stmt, i));
            i = i + 1;
        }
        
        if is_same_string(prefix, "print") {
            if string_len(stmt) >= 9 {
                let mut print_prefix = "";
                let mut j = 0;
                while j < 9 {
                    print_prefix = print_prefix + string_from_char(string_char_at(stmt, j));
                    j = j + 1;
                }
                
                if is_same_string(print_prefix, "print_int") {
                    output = output + "__pd_print_int";
                    let mut k = 9;
                    while k < string_len(stmt) {
                        output = output + string_from_char(string_char_at(stmt, k));
                        k = k + 1;
                    }
                } else {
                    output = output + "__pd_print";
                    let mut k = 5;
                    while k < string_len(stmt) {
                        output = output + string_from_char(string_char_at(stmt, k));
                        k = k + 1;
                    }
                }
            } else {
                output = output + "__pd_print";
                let mut k = 5;
                while k < string_len(stmt) {
                    output = output + string_from_char(string_char_at(stmt, k));
                    k = k + 1;
                }
            }
        } else {
            output = output + parse_expr(stmt);
        }
    } else {
        output = output + parse_expr(stmt);
    }
    
    output = output + ";\n";
    return output;
}

// Compile a simple function (just main for now)
fn compile_function(source: String, start_pos: i64, len: i64) -> String {
    let mut pos = start_pos;
    let mut output = "";
    
    // Skip "fn"
    pos = pos + 2;
    pos = skip_whitespace(source, pos, len);
    
    // Get function name
    let mut func_name = "";
    while pos < len && string_char_at(source, pos) != 40 && // (
                      string_char_at(source, pos) != 32 &&  // space
                      string_char_at(source, pos) != 9 {    // tab
        func_name = func_name + string_from_char(string_char_at(source, pos));
        pos = pos + 1;
    }
    
    // Skip to opening brace
    while pos < len && string_char_at(source, pos) != 123 { // {
        pos = pos + 1;
    }
    
    if is_same_string(func_name, "main") {
        output = output + "int main(int argc, char** argv) {\n";
    } else {
        output = output + "void " + func_name + "(void) {\n";
    }
    
    pos = pos + 1; // Skip {
    
    // Parse function body
    pos = skip_whitespace(source, pos, len);
    while pos < len && string_char_at(source, pos) != 125 { // }
        let stmt = parse_statement(source, pos, len, "    ");
        output = output + stmt;
        
        // Skip to next statement
        while pos < len && string_char_at(source, pos) != 59 && // ;
                          string_char_at(source, pos) != 125 { // }
            pos = pos + 1;
        }
        if pos < len && string_char_at(source, pos) == 59 {
            pos = pos + 1; // Skip ;
        }
        pos = skip_whitespace(source, pos, len);
    }
    
    if is_same_string(func_name, "main") {
        output = output + "    return 0;\n";
    }
    output = output + "}\n\n";
    
    return output;
}

// Main compiler function
fn compile_program(source: String) -> String {
    let mut output = "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n";
    
    // Runtime functions
    output = output + "void __pd_print(const char* s) { printf(\"%s\\n\", s); }\n";
    output = output + "void __pd_print_int(long long n) { printf(\"%lld\\n\", n); }\n";
    output = output + "long long __pd_string_len(const char* s) { return strlen(s); }\n";
    output = output + "const char* __pd_string_concat(const char* a, const char* b) {\n";
    output = output + "    char* r = malloc(strlen(a) + strlen(b) + 1);\n";
    output = output + "    strcpy(r, a); strcat(r, b); return r;\n";
    output = output + "}\n";
    output = output + "const char* __pd_int_to_string(long long n) {\n";
    output = output + "    char* buf = malloc(32);\n";
    output = output + "    snprintf(buf, 32, \"%lld\", n);\n";
    output = output + "    return buf;\n";
    output = output + "}\n";
    
    // File I/O runtime functions
    output = output + "int __pd_file_exists(const char* path) {\n";
    output = output + "    FILE* f = fopen(path, \"r\");\n";
    output = output + "    if (f) { fclose(f); return 1; }\n";
    output = output + "    return 0;\n";
    output = output + "}\n";
    output = output + "const char* __pd_read_file(const char* path) {\n";
    output = output + "    FILE* f = fopen(path, \"r\");\n";
    output = output + "    if (!f) return \"\";\n";
    output = output + "    fseek(f, 0, SEEK_END);\n";
    output = output + "    long size = ftell(f);\n";
    output = output + "    fseek(f, 0, SEEK_SET);\n";
    output = output + "    char* buf = malloc(size + 1);\n";
    output = output + "    fread(buf, 1, size, f);\n";
    output = output + "    buf[size] = 0;\n";
    output = output + "    fclose(f);\n";
    output = output + "    return buf;\n";
    output = output + "}\n\n";
    
    let len = string_len(source);
    let mut pos = 0;
    
    // Parse all functions
    while pos < len {
        pos = skip_whitespace(source, pos, len);
        
        if pos >= len {
            break;
        }
        
        // Look for "fn"
        if pos + 2 < len &&
           string_char_at(source, pos) == 102 &&    // f
           string_char_at(source, pos+1) == 110 &&  // n
           (string_char_at(source, pos+2) == 32 ||  // space
            string_char_at(source, pos+2) == 9) {   // tab
            
            output = output + compile_function(source, pos, len);
            
            // Skip to end of function
            let mut brace_count = 0;
            let mut found_brace = false;
            while pos < len {
                if string_char_at(source, pos) == 123 { // {
                    brace_count = brace_count + 1;
                    found_brace = true;
                }
                if string_char_at(source, pos) == 125 { // }
                    brace_count = brace_count - 1;
                    if brace_count == 0 && found_brace {
                        pos = pos + 1;
                        break;
                    }
                }
                pos = pos + 1;
            }
        } else {
            pos = pos + 1;
        }
    }
    
    return output;
}

fn main() {
    print("Tiny Palladium Compiler v13");
    print("============================");
    
    // For now, use a hardcoded test file since we don't have argv support yet
    let filename = "test.pd";
    
    // Read the source file
    print("Reading " + filename + "...");
    let source = __pd_read_file(filename);
    
    if string_len(source) == 0 {
        print("Error: Could not read file or file is empty");
        return;
    }
    
    print("Compiling...");
    let c_code = compile_program(source);
    
    // For now, just print the generated code
    print("Generated C code:");
    print("=================");
    print(c_code);
    print("");
    print("Note: File writing will be added in the next version.");
}