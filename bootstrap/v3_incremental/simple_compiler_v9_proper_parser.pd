// Simple Palladium Compiler v9 with Proper Parser
// Recursive descent parser with AST generation
// Works with v8 lexer for complete parsing

// ============ AST Node Types ============

// Program and declarations
const AST_PROGRAM: i64 = 0;
const AST_FUNCTION: i64 = 1;
const AST_STRUCT: i64 = 2;
const AST_ENUM: i64 = 3;
const AST_IMPL: i64 = 4;
const AST_TRAIT: i64 = 5;
const AST_USE: i64 = 6;
const AST_TYPE_ALIAS: i64 = 7;
const AST_CONST: i64 = 8;
const AST_STATIC: i64 = 9;

// Function components
const AST_PARAM: i64 = 10;
const AST_PARAM_LIST: i64 = 11;
const AST_BLOCK: i64 = 12;

// Statements
const AST_STMT_LET: i64 = 20;
const AST_STMT_ASSIGN: i64 = 21;
const AST_STMT_RETURN: i64 = 22;
const AST_STMT_EXPR: i64 = 23;
const AST_STMT_IF: i64 = 24;
const AST_STMT_WHILE: i64 = 25;
const AST_STMT_FOR: i64 = 26;
const AST_STMT_LOOP: i64 = 27;
const AST_STMT_BREAK: i64 = 28;
const AST_STMT_CONTINUE: i64 = 29;
const AST_STMT_MATCH: i64 = 30;

// Expressions
const AST_EXPR_IDENT: i64 = 40;
const AST_EXPR_INTEGER: i64 = 41;
const AST_EXPR_FLOAT: i64 = 42;
const AST_EXPR_STRING: i64 = 43;
const AST_EXPR_CHAR: i64 = 44;
const AST_EXPR_BOOL: i64 = 45;
const AST_EXPR_BINARY: i64 = 46;
const AST_EXPR_UNARY: i64 = 47;
const AST_EXPR_CALL: i64 = 48;
const AST_EXPR_INDEX: i64 = 49;
const AST_EXPR_FIELD: i64 = 50;
const AST_EXPR_ARRAY: i64 = 51;
const AST_EXPR_STRUCT_LIT: i64 = 52;
const AST_EXPR_IF: i64 = 53;
const AST_EXPR_MATCH: i64 = 54;
const AST_EXPR_CLOSURE: i64 = 55;
const AST_EXPR_CAST: i64 = 56;
const AST_EXPR_QUESTION: i64 = 57;
const AST_EXPR_RANGE: i64 = 58;

// Patterns
const AST_PAT_IDENT: i64 = 60;
const AST_PAT_WILDCARD: i64 = 61;
const AST_PAT_LITERAL: i64 = 62;
const AST_PAT_STRUCT: i64 = 63;
const AST_PAT_TUPLE: i64 = 64;
const AST_PAT_ARRAY: i64 = 65;
const AST_PAT_ENUM: i64 = 66;

// Types
const AST_TYPE_I8: i64 = 70;
const AST_TYPE_I16: i64 = 71;
const AST_TYPE_I32: i64 = 72;
const AST_TYPE_I64: i64 = 73;
const AST_TYPE_U8: i64 = 74;
const AST_TYPE_U16: i64 = 75;
const AST_TYPE_U32: i64 = 76;
const AST_TYPE_U64: i64 = 77;
const AST_TYPE_F32: i64 = 78;
const AST_TYPE_F64: i64 = 79;
const AST_TYPE_BOOL: i64 = 80;
const AST_TYPE_CHAR: i64 = 81;
const AST_TYPE_STRING: i64 = 82;
const AST_TYPE_CUSTOM: i64 = 83;
const AST_TYPE_ARRAY: i64 = 84;
const AST_TYPE_REF: i64 = 85;
const AST_TYPE_PTR: i64 = 86;
const AST_TYPE_TUPLE: i64 = 87;
const AST_TYPE_FN: i64 = 88;

// Binary operators
const BINOP_ADD: i64 = 100;
const BINOP_SUB: i64 = 101;
const BINOP_MUL: i64 = 102;
const BINOP_DIV: i64 = 103;
const BINOP_REM: i64 = 104;
const BINOP_AND: i64 = 105;
const BINOP_OR: i64 = 106;
const BINOP_BITAND: i64 = 107;
const BINOP_BITOR: i64 = 108;
const BINOP_BITXOR: i64 = 109;
const BINOP_SHL: i64 = 110;
const BINOP_SHR: i64 = 111;
const BINOP_EQ: i64 = 112;
const BINOP_NE: i64 = 113;
const BINOP_LT: i64 = 114;
const BINOP_LE: i64 = 115;
const BINOP_GT: i64 = 116;
const BINOP_GE: i64 = 117;

// Unary operators
const UNOP_NOT: i64 = 120;
const UNOP_NEG: i64 = 121;
const UNOP_DEREF: i64 = 122;
const UNOP_REF: i64 = 123;
const UNOP_REFMUT: i64 = 124;

// ============ AST Node Structure ============

struct ASTNode {
    node_type: i64,
    value: String,
    children: [i64; 20],
    child_count: i64,
    line: i64,
    column: i64,
    // Additional fields for specific node types
    op_type: i64,     // For binary/unary operators
    is_mut: bool,     // For let statements, references
    type_id: i64,     // For type nodes
}

// ============ Parser State ============

struct Parser {
    tokens: [Token; 10000],
    token_count: i64,
    current: i64,
    // AST storage
    nodes: [ASTNode; 5000],
    node_count: i64,
}

// Import token types from lexer
// Assuming these are defined in v8 lexer
extern {
    const TOK_EOF: i64;
    const TOK_IDENT: i64;
    const TOK_INTEGER: i64;
    const TOK_FLOAT: i64;
    const TOK_STRING: i64;
    const TOK_CHAR: i64;
    const TOK_FN: i64;
    const TOK_LET: i64;
    const TOK_MUT: i64;
    const TOK_IF: i64;
    const TOK_ELSE: i64;
    const TOK_WHILE: i64;
    const TOK_FOR: i64;
    const TOK_RETURN: i64;
    const TOK_STRUCT: i64;
    const TOK_TRUE: i64;
    const TOK_FALSE: i64;
    // ... more token types
}

// ============ Parser Implementation ============

// Create a new parser
fn new_parser(tokens: [Token; 10000], token_count: i64) -> Parser {
    let parser = Parser {
        tokens: tokens,
        token_count: token_count,
        current: 0,
        nodes: [ASTNode {
            node_type: AST_PROGRAM,
            value: "",
            children: [0; 20],
            child_count: 0,
            line: 0,
            column: 0,
            op_type: 0,
            is_mut: false,
            type_id: 0,
        }; 5000],
        node_count: 0,
    };
    return parser;
}

// Create a new AST node
fn new_node(parser: &mut Parser, node_type: i64, value: String) -> i64 {
    if parser.node_count >= 5000 {
        print("Error: AST node limit reached");
        return -1;
    }
    
    let node_id = parser.node_count;
    let tok = parser.tokens[parser.current];
    
    parser.nodes[node_id] = ASTNode {
        node_type: node_type,
        value: value,
        children: [0; 20],
        child_count: 0,
        line: tok.line,
        column: tok.column,
        op_type: 0,
        is_mut: false,
        type_id: 0,
    };
    
    parser.node_count = parser.node_count + 1;
    return node_id;
}

// Add child to node
fn add_child(parser: &mut Parser, parent_id: i64, child_id: i64) {
    if parent_id < 0 || child_id < 0 {
        return;
    }
    
    let parent = &mut parser.nodes[parent_id];
    if parent.child_count < 20 {
        parent.children[parent.child_count] = child_id;
        parent.child_count = parent.child_count + 1;
    }
}

// ============ Token Helpers ============

fn is_at_end(parser: &Parser) -> bool {
    return parser.current >= parser.token_count || 
           parser.tokens[parser.current].type == TOK_EOF;
}

fn peek(parser: &Parser) -> Token {
    if parser.current < parser.token_count {
        return parser.tokens[parser.current];
    }
    return Token { type: TOK_EOF, value: "", line: 0, column: 0, length: 0 };
}

fn peek_type(parser: &Parser) -> i64 {
    return peek(parser).type;
}

fn advance(parser: &mut Parser) -> Token {
    if !is_at_end(parser) {
        parser.current = parser.current + 1;
    }
    return parser.tokens[parser.current - 1];
}

fn match_token(parser: &mut Parser, token_type: i64) -> bool {
    if peek_type(parser) == token_type {
        advance(parser);
        return true;
    }
    return false;
}

fn consume(parser: &mut Parser, token_type: i64, message: String) -> bool {
    if peek_type(parser) == token_type {
        advance(parser);
        return true;
    }
    
    let tok = peek(parser);
    print(string_concat("Parse error at line ", int_to_string(tok.line)));
    print(string_concat("Expected ", message));
    print(string_concat("Got ", tok.value));
    return false;
}

// ============ Expression Parsing ============

// Parse primary expression
fn parse_primary(parser: &mut Parser) -> i64 {
    let tok = peek(parser);
    
    // Literals
    if tok.type == TOK_INTEGER {
        advance(parser);
        return new_node(parser, AST_EXPR_INTEGER, tok.value);
    }
    
    if tok.type == TOK_FLOAT {
        advance(parser);
        return new_node(parser, AST_EXPR_FLOAT, tok.value);
    }
    
    if tok.type == TOK_STRING {
        advance(parser);
        return new_node(parser, AST_EXPR_STRING, tok.value);
    }
    
    if tok.type == TOK_CHAR {
        advance(parser);
        return new_node(parser, AST_EXPR_CHAR, tok.value);
    }
    
    if tok.type == TOK_TRUE || tok.type == TOK_FALSE {
        advance(parser);
        return new_node(parser, AST_EXPR_BOOL, tok.value);
    }
    
    // Identifier
    if tok.type == TOK_IDENT {
        advance(parser);
        return new_node(parser, AST_EXPR_IDENT, tok.value);
    }
    
    // Parenthesized expression
    if match_token(parser, TOK_LPAREN) {
        let expr = parse_expression(parser);
        consume(parser, TOK_RPAREN, ")");
        return expr;
    }
    
    // Array literal
    if match_token(parser, TOK_LBRACKET) {
        let array_node = new_node(parser, AST_EXPR_ARRAY, "");
        
        if !match_token(parser, TOK_RBRACKET) {
            // Parse elements
            loop {
                let elem = parse_expression(parser);
                add_child(parser, array_node, elem);
                
                if !match_token(parser, TOK_COMMA) {
                    break;
                }
            }
            consume(parser, TOK_RBRACKET, "]");
        }
        
        return array_node;
    }
    
    print("Error: Expected expression");
    return -1;
}

// Parse postfix expression (calls, indexing, field access)
fn parse_postfix(parser: &mut Parser) -> i64 {
    let mut expr = parse_primary(parser);
    
    loop {
        if match_token(parser, TOK_LPAREN) {
            // Function call
            let call_node = new_node(parser, AST_EXPR_CALL, "");
            add_child(parser, call_node, expr);
            
            // Parse arguments
            if !match_token(parser, TOK_RPAREN) {
                loop {
                    let arg = parse_expression(parser);
                    add_child(parser, call_node, arg);
                    
                    if !match_token(parser, TOK_COMMA) {
                        break;
                    }
                }
                consume(parser, TOK_RPAREN, ")");
            }
            
            expr = call_node;
        } else if match_token(parser, TOK_LBRACKET) {
            // Array indexing
            let index_node = new_node(parser, AST_EXPR_INDEX, "");
            add_child(parser, index_node, expr);
            
            let index = parse_expression(parser);
            add_child(parser, index_node, index);
            
            consume(parser, TOK_RBRACKET, "]");
            expr = index_node;
        } else if match_token(parser, TOK_DOT) {
            // Field access
            let field_name = advance(parser).value;
            let field_node = new_node(parser, AST_EXPR_FIELD, field_name);
            add_child(parser, field_node, expr);
            expr = field_node;
        } else {
            break;
        }
    }
    
    return expr;
}

// Parse unary expression
fn parse_unary(parser: &mut Parser) -> i64 {
    let tok = peek(parser);
    
    if tok.type == TOK_BANG {
        advance(parser);
        let expr = parse_unary(parser);
        let unary_node = new_node(parser, AST_EXPR_UNARY, "!");
        parser.nodes[unary_node].op_type = UNOP_NOT;
        add_child(parser, unary_node, expr);
        return unary_node;
    }
    
    if tok.type == TOK_MINUS {
        advance(parser);
        let expr = parse_unary(parser);
        let unary_node = new_node(parser, AST_EXPR_UNARY, "-");
        parser.nodes[unary_node].op_type = UNOP_NEG;
        add_child(parser, unary_node, expr);
        return unary_node;
    }
    
    if tok.type == TOK_STAR {
        advance(parser);
        let expr = parse_unary(parser);
        let unary_node = new_node(parser, AST_EXPR_UNARY, "*");
        parser.nodes[unary_node].op_type = UNOP_DEREF;
        add_child(parser, unary_node, expr);
        return unary_node;
    }
    
    if tok.type == TOK_AMP {
        advance(parser);
        let is_mut = match_token(parser, TOK_MUT);
        let expr = parse_unary(parser);
        let unary_node = new_node(parser, AST_EXPR_UNARY, "&");
        parser.nodes[unary_node].op_type = if is_mut { UNOP_REFMUT } else { UNOP_REF };
        add_child(parser, unary_node, expr);
        return unary_node;
    }
    
    return parse_postfix(parser);
}

// Parse binary expression with precedence
fn parse_binary_expr(parser: &mut Parser, min_prec: i64) -> i64 {
    let mut left = parse_unary(parser);
    
    loop {
        let tok = peek(parser);
        let prec = get_precedence(tok.type);
        if prec < min_prec {
            break;
        }
        
        advance(parser);
        let op_type = token_to_binop(tok.type);
        
        let right = parse_binary_expr(parser, prec + 1);
        
        let binary_node = new_node(parser, AST_EXPR_BINARY, tok.value);
        parser.nodes[binary_node].op_type = op_type;
        add_child(parser, binary_node, left);
        add_child(parser, binary_node, right);
        
        left = binary_node;
    }
    
    return left;
}

// Get operator precedence
fn get_precedence(token_type: i64) -> i64 {
    if token_type == TOK_STAR || token_type == TOK_SLASH || token_type == TOK_PERCENT {
        return 12;
    }
    if token_type == TOK_PLUS || token_type == TOK_MINUS {
        return 11;
    }
    if token_type == TOK_SHL || token_type == TOK_SHR {
        return 10;
    }
    if token_type == TOK_LT || token_type == TOK_GT || 
       token_type == TOK_LE || token_type == TOK_GE {
        return 9;
    }
    if token_type == TOK_EQEQ || token_type == TOK_NE {
        return 8;
    }
    if token_type == TOK_AMP {
        return 7;
    }
    if token_type == TOK_CARET {
        return 6;
    }
    if token_type == TOK_PIPE {
        return 5;
    }
    if token_type == TOK_AMPAMP {
        return 4;
    }
    if token_type == TOK_PIPEPIPE {
        return 3;
    }
    if token_type == TOK_DOTDOT || token_type == TOK_DOTDOTEQ {
        return 2;
    }
    return 0;
}

// Convert token type to binary operator
fn token_to_binop(token_type: i64) -> i64 {
    if token_type == TOK_PLUS { return BINOP_ADD; }
    if token_type == TOK_MINUS { return BINOP_SUB; }
    if token_type == TOK_STAR { return BINOP_MUL; }
    if token_type == TOK_SLASH { return BINOP_DIV; }
    if token_type == TOK_PERCENT { return BINOP_REM; }
    if token_type == TOK_AMPAMP { return BINOP_AND; }
    if token_type == TOK_PIPEPIPE { return BINOP_OR; }
    if token_type == TOK_AMP { return BINOP_BITAND; }
    if token_type == TOK_PIPE { return BINOP_BITOR; }
    if token_type == TOK_CARET { return BINOP_BITXOR; }
    if token_type == TOK_SHL { return BINOP_SHL; }
    if token_type == TOK_SHR { return BINOP_SHR; }
    if token_type == TOK_EQEQ { return BINOP_EQ; }
    if token_type == TOK_NE { return BINOP_NE; }
    if token_type == TOK_LT { return BINOP_LT; }
    if token_type == TOK_LE { return BINOP_LE; }
    if token_type == TOK_GT { return BINOP_GT; }
    if token_type == TOK_GE { return BINOP_GE; }
    return 0;
}

// Parse expression
fn parse_expression(parser: &mut Parser) -> i64 {
    return parse_assignment(parser);
}

// Parse assignment expression
fn parse_assignment(parser: &mut Parser) -> i64 {
    let expr = parse_binary_expr(parser, 1);
    
    if match_token(parser, TOK_EQ) {
        let value = parse_assignment(parser);
        let assign_node = new_node(parser, AST_STMT_ASSIGN, "=");
        add_child(parser, assign_node, expr);
        add_child(parser, assign_node, value);
        return assign_node;
    }
    
    return expr;
}

// ============ Statement Parsing ============

// Parse statement
fn parse_statement(parser: &mut Parser) -> i64 {
    if match_token(parser, TOK_LET) {
        return parse_let_statement(parser);
    }
    
    if match_token(parser, TOK_RETURN) {
        return parse_return_statement(parser);
    }
    
    if match_token(parser, TOK_IF) {
        return parse_if_statement(parser);
    }
    
    if match_token(parser, TOK_WHILE) {
        return parse_while_statement(parser);
    }
    
    if match_token(parser, TOK_FOR) {
        return parse_for_statement(parser);
    }
    
    if match_token(parser, TOK_LOOP) {
        return parse_loop_statement(parser);
    }
    
    if match_token(parser, TOK_BREAK) {
        let break_node = new_node(parser, AST_STMT_BREAK, "break");
        consume(parser, TOK_SEMICOLON, ";");
        return break_node;
    }
    
    if match_token(parser, TOK_CONTINUE) {
        let continue_node = new_node(parser, AST_STMT_CONTINUE, "continue");
        consume(parser, TOK_SEMICOLON, ";");
        return continue_node;
    }
    
    // Expression statement
    let expr = parse_expression(parser);
    consume(parser, TOK_SEMICOLON, ";");
    
    let stmt_node = new_node(parser, AST_STMT_EXPR, "");
    add_child(parser, stmt_node, expr);
    return stmt_node;
}

// Parse let statement
fn parse_let_statement(parser: &mut Parser) -> i64 {
    let let_node = new_node(parser, AST_STMT_LET, "let");
    
    // Check for mut
    if match_token(parser, TOK_MUT) {
        parser.nodes[let_node].is_mut = true;
    }
    
    // Parse pattern (for now, just identifier)
    let name_tok = advance(parser);
    if name_tok.type != TOK_IDENT {
        print("Error: Expected identifier after let");
        return -1;
    }
    
    let pat_node = new_node(parser, AST_PAT_IDENT, name_tok.value);
    add_child(parser, let_node, pat_node);
    
    // Optional type annotation
    if match_token(parser, TOK_COLON) {
        let type_node = parse_type(parser);
        add_child(parser, let_node, type_node);
    }
    
    // Optional initialization
    if match_token(parser, TOK_EQ) {
        let init_expr = parse_expression(parser);
        add_child(parser, let_node, init_expr);
    }
    
    consume(parser, TOK_SEMICOLON, ";");
    return let_node;
}

// Parse return statement
fn parse_return_statement(parser: &mut Parser) -> i64 {
    let return_node = new_node(parser, AST_STMT_RETURN, "return");
    
    // Optional return value
    if peek_type(parser) != TOK_SEMICOLON {
        let expr = parse_expression(parser);
        add_child(parser, return_node, expr);
    }
    
    consume(parser, TOK_SEMICOLON, ";");
    return return_node;
}

// Parse if statement
fn parse_if_statement(parser: &mut Parser) -> i64 {
    let if_node = new_node(parser, AST_STMT_IF, "if");
    
    // Condition
    let cond = parse_expression(parser);
    add_child(parser, if_node, cond);
    
    // Then block
    let then_block = parse_block(parser);
    add_child(parser, if_node, then_block);
    
    // Optional else
    if match_token(parser, TOK_ELSE) {
        if peek_type(parser) == TOK_IF {
            // else if
            let else_if = parse_if_statement(parser);
            add_child(parser, if_node, else_if);
        } else {
            // else block
            let else_block = parse_block(parser);
            add_child(parser, if_node, else_block);
        }
    }
    
    return if_node;
}

// Parse while statement
fn parse_while_statement(parser: &mut Parser) -> i64 {
    let while_node = new_node(parser, AST_STMT_WHILE, "while");
    
    // Condition
    let cond = parse_expression(parser);
    add_child(parser, while_node, cond);
    
    // Body
    let body = parse_block(parser);
    add_child(parser, while_node, body);
    
    return while_node;
}

// Parse for statement
fn parse_for_statement(parser: &mut Parser) -> i64 {
    let for_node = new_node(parser, AST_STMT_FOR, "for");
    
    // Pattern (for now, just identifier)
    let var_name = advance(parser).value;
    let pat_node = new_node(parser, AST_PAT_IDENT, var_name);
    add_child(parser, for_node, pat_node);
    
    consume(parser, TOK_IN, "in");
    
    // Iterator expression
    let iter_expr = parse_expression(parser);
    add_child(parser, for_node, iter_expr);
    
    // Body
    let body = parse_block(parser);
    add_child(parser, for_node, body);
    
    return for_node;
}

// Parse loop statement
fn parse_loop_statement(parser: &mut Parser) -> i64 {
    let loop_node = new_node(parser, AST_STMT_LOOP, "loop");
    
    let body = parse_block(parser);
    add_child(parser, loop_node, body);
    
    return loop_node;
}

// Parse block
fn parse_block(parser: &mut Parser) -> i64 {
    consume(parser, TOK_LBRACE, "{");
    
    let block_node = new_node(parser, AST_BLOCK, "");
    
    while !match_token(parser, TOK_RBRACE) && !is_at_end(parser) {
        let stmt = parse_statement(parser);
        add_child(parser, block_node, stmt);
    }
    
    return block_node;
}

// ============ Type Parsing ============

// Parse type
fn parse_type(parser: &mut Parser) -> i64 {
    let tok = advance(parser);
    
    // Primitive types
    if tok.type == TOK_I8 { return new_node(parser, AST_TYPE_I8, "i8"); }
    if tok.type == TOK_I16 { return new_node(parser, AST_TYPE_I16, "i16"); }
    if tok.type == TOK_I32 { return new_node(parser, AST_TYPE_I32, "i32"); }
    if tok.type == TOK_I64 { return new_node(parser, AST_TYPE_I64, "i64"); }
    if tok.type == TOK_U8 { return new_node(parser, AST_TYPE_U8, "u8"); }
    if tok.type == TOK_U16 { return new_node(parser, AST_TYPE_U16, "u16"); }
    if tok.type == TOK_U32 { return new_node(parser, AST_TYPE_U32, "u32"); }
    if tok.type == TOK_U64 { return new_node(parser, AST_TYPE_U64, "u64"); }
    if tok.type == TOK_F32 { return new_node(parser, AST_TYPE_F32, "f32"); }
    if tok.type == TOK_F64 { return new_node(parser, AST_TYPE_F64, "f64"); }
    if tok.type == TOK_BOOL { return new_node(parser, AST_TYPE_BOOL, "bool"); }
    if tok.type == TOK_CHAR_TYPE { return new_node(parser, AST_TYPE_CHAR, "char"); }
    if tok.type == TOK_STRING_TYPE { return new_node(parser, AST_TYPE_STRING, "String"); }
    
    // Custom type
    if tok.type == TOK_IDENT {
        return new_node(parser, AST_TYPE_CUSTOM, tok.value);
    }
    
    // Array type
    if tok.type == TOK_LBRACKET {
        let elem_type = parse_type(parser);
        consume(parser, TOK_SEMICOLON, ";");
        let size_tok = advance(parser);
        consume(parser, TOK_RBRACKET, "]");
        
        let array_type = new_node(parser, AST_TYPE_ARRAY, size_tok.value);
        add_child(parser, array_type, elem_type);
        return array_type;
    }
    
    // Reference type
    if tok.type == TOK_AMP {
        let is_mut = match_token(parser, TOK_MUT);
        let inner_type = parse_type(parser);
        
        let ref_type = new_node(parser, AST_TYPE_REF, "&");
        parser.nodes[ref_type].is_mut = is_mut;
        add_child(parser, ref_type, inner_type);
        return ref_type;
    }
    
    print("Error: Expected type");
    return -1;
}

// ============ Declaration Parsing ============

// Parse function
fn parse_function(parser: &mut Parser) -> i64 {
    let fn_node = new_node(parser, AST_FUNCTION, "fn");
    
    // Function name
    let name_tok = advance(parser);
    if name_tok.type != TOK_IDENT {
        print("Error: Expected function name");
        return -1;
    }
    parser.nodes[fn_node].value = name_tok.value;
    
    // Parameters
    consume(parser, TOK_LPAREN, "(");
    let params_node = new_node(parser, AST_PARAM_LIST, "");
    
    if !match_token(parser, TOK_RPAREN) {
        loop {
            // Parameter name
            let param_name = advance(parser).value;
            consume(parser, TOK_COLON, ":");
            
            // Parameter type
            let param_type = parse_type(parser);
            
            let param_node = new_node(parser, AST_PARAM, param_name);
            add_child(parser, param_node, param_type);
            add_child(parser, params_node, param_node);
            
            if !match_token(parser, TOK_COMMA) {
                break;
            }
        }
        consume(parser, TOK_RPAREN, ")");
    }
    
    add_child(parser, fn_node, params_node);
    
    // Return type
    if match_token(parser, TOK_ARROW) {
        let ret_type = parse_type(parser);
        add_child(parser, fn_node, ret_type);
    }
    
    // Body
    let body = parse_block(parser);
    add_child(parser, fn_node, body);
    
    return fn_node;
}

// Parse struct
fn parse_struct(parser: &mut Parser) -> i64 {
    let struct_node = new_node(parser, AST_STRUCT, "struct");
    
    // Struct name
    let name_tok = advance(parser);
    if name_tok.type != TOK_IDENT {
        print("Error: Expected struct name");
        return -1;
    }
    parser.nodes[struct_node].value = name_tok.value;
    
    consume(parser, TOK_LBRACE, "{");
    
    // Fields
    while !match_token(parser, TOK_RBRACE) && !is_at_end(parser) {
        // Field name
        let field_name = advance(parser).value;
        consume(parser, TOK_COLON, ":");
        
        // Field type
        let field_type = parse_type(parser);
        
        let field_node = new_node(parser, AST_FIELD, field_name);
        add_child(parser, field_node, field_type);
        add_child(parser, struct_node, field_node);
        
        if !match_token(parser, TOK_COMMA) {
            consume(parser, TOK_RBRACE, "}");
            break;
        }
    }
    
    return struct_node;
}

// Parse top-level item
fn parse_item(parser: &mut Parser) -> i64 {
    if match_token(parser, TOK_FN) {
        return parse_function(parser);
    }
    
    if match_token(parser, TOK_STRUCT) {
        return parse_struct(parser);
    }
    
    if match_token(parser, TOK_USE) {
        let use_node = new_node(parser, AST_USE, "use");
        
        // Parse path
        loop {
            let path_part = advance(parser).value;
            let path_node = new_node(parser, AST_EXPR_IDENT, path_part);
            add_child(parser, use_node, path_node);
            
            if !match_token(parser, TOK_COLONCOLON) {
                break;
            }
        }
        
        consume(parser, TOK_SEMICOLON, ";");
        return use_node;
    }
    
    print("Error: Expected item (fn, struct, etc.)");
    return -1;
}

// Parse program
fn parse_program(parser: &mut Parser) -> i64 {
    let program_node = new_node(parser, AST_PROGRAM, "");
    
    while !is_at_end(parser) {
        let item = parse_item(parser);
        if item >= 0 {
            add_child(parser, program_node, item);
        } else {
            // Skip to next item on error
            while !is_at_end(parser) && 
                  peek_type(parser) != TOK_FN && 
                  peek_type(parser) != TOK_STRUCT {
                advance(parser);
            }
        }
    }
    
    return program_node;
}

// ============ AST Printing ============

// Get node type name
fn node_type_name(node_type: i64) -> String {
    if node_type == AST_PROGRAM { return "Program"; }
    if node_type == AST_FUNCTION { return "Function"; }
    if node_type == AST_STRUCT { return "Struct"; }
    if node_type == AST_PARAM { return "Param"; }
    if node_type == AST_PARAM_LIST { return "ParamList"; }
    if node_type == AST_BLOCK { return "Block"; }
    if node_type == AST_STMT_LET { return "LetStmt"; }
    if node_type == AST_STMT_ASSIGN { return "AssignStmt"; }
    if node_type == AST_STMT_RETURN { return "ReturnStmt"; }
    if node_type == AST_STMT_EXPR { return "ExprStmt"; }
    if node_type == AST_STMT_IF { return "IfStmt"; }
    if node_type == AST_STMT_WHILE { return "WhileStmt"; }
    if node_type == AST_STMT_FOR { return "ForStmt"; }
    if node_type == AST_EXPR_IDENT { return "Identifier"; }
    if node_type == AST_EXPR_INTEGER { return "Integer"; }
    if node_type == AST_EXPR_FLOAT { return "Float"; }
    if node_type == AST_EXPR_STRING { return "String"; }
    if node_type == AST_EXPR_BOOL { return "Bool"; }
    if node_type == AST_EXPR_BINARY { return "BinaryExpr"; }
    if node_type == AST_EXPR_UNARY { return "UnaryExpr"; }
    if node_type == AST_EXPR_CALL { return "CallExpr"; }
    if node_type == AST_EXPR_INDEX { return "IndexExpr"; }
    if node_type == AST_EXPR_FIELD { return "FieldExpr"; }
    if node_type == AST_EXPR_ARRAY { return "ArrayExpr"; }
    if node_type == AST_PAT_IDENT { return "IdentPattern"; }
    if node_type == AST_TYPE_I64 { return "i64"; }
    if node_type == AST_TYPE_STRING { return "String"; }
    if node_type == AST_TYPE_CUSTOM { return "CustomType"; }
    if node_type == AST_FIELD { return "Field"; }
    return "Unknown";
}

// Print AST node recursively
fn print_ast_node(parser: &Parser, node_id: i64, indent: String) {
    if node_id < 0 || node_id >= parser.node_count {
        return;
    }
    
    let node = parser.nodes[node_id];
    let type_name = node_type_name(node.node_type);
    
    print(string_concat(indent, string_concat(type_name, 
        if string_len(node.value) > 0 {
            string_concat(": ", node.value)
        } else {
            ""
        }
    )));
    
    // Print children
    let mut i = 0;
    while i < node.child_count {
        print_ast_node(parser, node.children[i], string_concat(indent, "  "));
        i = i + 1;
    }
}

// ============ Test Program ============

fn main() {
    let test_program = "// Test program for parser
fn main() {
    let msg: String = \"Hello, Parser!\";
    let count = 42;
    
    if count > 0 {
        print(msg);
        print_int(count);
    }
    
    while count < 100 {
        count = count + 1;
    }
    
    for i in 0..10 {
        print_int(i);
    }
    
    return 0;
}

struct Point {
    x: i64,
    y: i64,
}

fn add(a: i64, b: i64) -> i64 {
    return a + b;
}";

    print("Palladium Parser v9");
    print("===================");
    print("");
    print("Input program:");
    print("--------------");
    print(test_program);
    print("");
    
    // First, we need to tokenize
    // For this test, we'll create some dummy tokens
    // In practice, this would come from the v8 lexer
    
    let mut tokens: [Token; 10000];
    let mut token_count = 0;
    
    // Add some test tokens (simplified)
    tokens[0] = Token { type: TOK_FN, value: "fn", line: 2, column: 1, length: 2 };
    tokens[1] = Token { type: TOK_IDENT, value: "main", line: 2, column: 4, length: 4 };
    tokens[2] = Token { type: TOK_LPAREN, value: "(", line: 2, column: 8, length: 1 };
    tokens[3] = Token { type: TOK_RPAREN, value: ")", line: 2, column: 9, length: 1 };
    tokens[4] = Token { type: TOK_LBRACE, value: "{", line: 2, column: 11, length: 1 };
    // ... more tokens would be added here
    tokens[5] = Token { type: TOK_EOF, value: "", line: 0, column: 0, length: 0 };
    token_count = 6;
    
    // Create parser and parse
    let mut parser = new_parser(tokens, token_count);
    let ast_root = parse_program(&mut parser);
    
    print("AST:");
    print("----");
    print_ast_node(&parser, ast_root, "");
    
    print("");
    print(string_concat("Total AST nodes: ", int_to_string(parser.node_count)));
}