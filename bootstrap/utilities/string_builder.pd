// String Builder for Palladium
// Provides string concatenation functionality for bootstrap compiler

// Since we don't have native string concatenation yet,
// we'll build strings by writing to files and reading them back

fn create_string_builder() -> i64 {
    // Use a unique file as string buffer
    let handle = file_open("string_buffer.tmp");
    return handle;
}

fn sb_append(sb: i64, text: String) {
    file_write(sb, text);
}

fn sb_append_char(sb: i64, ch: i64) {
    // Write single character
    if ch == 32 { file_write(sb, " "); }
    else if ch == 10 { file_write(sb, "\n"); }
    else if ch == 40 { file_write(sb, "("); }
    else if ch == 41 { file_write(sb, ")"); }
    else if ch == 123 { file_write(sb, "{"); }
    else if ch == 125 { file_write(sb, "}"); }
    else if ch == 59 { file_write(sb, ";"); }
    else if ch == 61 { file_write(sb, "="); }
    else if ch == 43 { file_write(sb, "+"); }
    else if ch == 45 { file_write(sb, "-"); }
    else if ch == 42 { file_write(sb, "*"); }
    else if ch == 47 { file_write(sb, "/"); }
    else if ch >= 48 && ch <= 57 {
        // Digits
        if ch == 48 { file_write(sb, "0"); }
        else if ch == 49 { file_write(sb, "1"); }
        else if ch == 50 { file_write(sb, "2"); }
        else if ch == 51 { file_write(sb, "3"); }
        else if ch == 52 { file_write(sb, "4"); }
        else if ch == 53 { file_write(sb, "5"); }
        else if ch == 54 { file_write(sb, "6"); }
        else if ch == 55 { file_write(sb, "7"); }
        else if ch == 56 { file_write(sb, "8"); }
        else if ch == 57 { file_write(sb, "9"); }
    }
    else if ch >= 65 && ch <= 90 {
        // Uppercase letters
        if ch == 65 { file_write(sb, "A"); }
        else if ch == 72 { file_write(sb, "H"); }
        else if ch == 73 { file_write(sb, "I"); }
        // Add more as needed
    }
    else if ch >= 97 && ch <= 122 {
        // Lowercase letters
        if ch == 97 { file_write(sb, "a"); }
        else if ch == 101 { file_write(sb, "e"); }
        else if ch == 102 { file_write(sb, "f"); }
        else if ch == 105 { file_write(sb, "i"); }
        else if ch == 108 { file_write(sb, "l"); }
        else if ch == 109 { file_write(sb, "m"); }
        else if ch == 110 { file_write(sb, "n"); }
        else if ch == 111 { file_write(sb, "o"); }
        else if ch == 112 { file_write(sb, "p"); }
        else if ch == 114 { file_write(sb, "r"); }
        else if ch == 115 { file_write(sb, "s"); }
        else if ch == 116 { file_write(sb, "t"); }
        else if ch == 117 { file_write(sb, "u"); }
        // Add more as needed
    }
}

fn sb_append_int(sb: i64, num: i64) {
    if num == 0 {
        file_write(sb, "0");
        return;
    }
    
    // Count digits
    let mut temp = num;
    let mut digits = 0;
    while temp > 0 {
        digits = digits + 1;
        temp = temp / 10;
    }
    
    // Write each digit
    temp = num;
    let mut divisor = 1;
    let mut i = 1;
    while i < digits {
        divisor = divisor * 10;
        i = i + 1;
    }
    
    while divisor > 0 {
        let digit = temp / divisor;
        temp = temp % divisor;
        divisor = divisor / 10;
        
        sb_append_char(sb, 48 + digit); // 48 = '0'
    }
}

fn sb_to_string(sb: i64) -> String {
    // Close and reopen to read
    file_close(sb);
    let read_handle = file_open("string_buffer.tmp");
    let result = file_read_line(read_handle);
    file_close(read_handle);
    return result;
}

fn test_string_builder() {
    print("Testing String Builder\n");
    print("====================\n\n");
    
    let sb = create_string_builder();
    
    sb_append(sb, "Hello ");
    sb_append(sb, "from ");
    sb_append(sb, "StringBuilder");
    sb_append_char(sb, 33); // !
    sb_append(sb, " Number: ");
    sb_append_int(sb, 42);
    
    let result = sb_to_string(sb);
    
    print("Built string: ");
    print(result);
    print("\n");
}

fn main() {
    print("String Builder for Palladium Bootstrap\n");
    print("=====================================\n\n");
    
    test_string_builder();
    
    print("\nThis provides string concatenation for bootstrap!\n");
}