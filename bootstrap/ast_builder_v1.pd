// AST Builder v1 - Builds Abstract Syntax Trees
// Demonstrates parsing and AST construction

// AST Node types
fn NODE_PROGRAM() -> i64 { return 1; }
fn NODE_FUNCTION() -> i64 { return 2; }
fn NODE_PRINT() -> i64 { return 3; }
fn NODE_NUMBER() -> i64 { return 4; }
fn NODE_BINARY_OP() -> i64 { return 5; }
fn NODE_IDENTIFIER() -> i64 { return 6; }

// Simple parser that builds AST information
fn parse_and_build_ast(source: String, out: i64) {
    print("Building AST...\n");
    
    file_write(out, "// AST Generated by Palladium\n");
    file_write(out, "// Program Structure:\n");
    file_write(out, "// - Program\n");
    
    // Look for function definitions
    let mut i = 0;
    let len = string_len(source);
    let mut found_fn = false;
    let mut found_main = false;
    
    while i < len {
        let ch = string_char_at(source, i);
        
        // Skip whitespace
        if ch == 32 || ch == 9 || ch == 10 || ch == 13 {
            i = i + 1;
            continue;
        }
        
        // Check for 'fn'
        if ch == 102 && i + 1 < len && string_char_at(source, i + 1) == 110 {
            found_fn = true;
            file_write(out, "//   - Function: ");
            i = i + 2;
            
            // Skip to function name
            while i < len && (string_char_at(source, i) == 32 || string_char_at(source, i) == 9) {
                i = i + 1;
            }
            
            // Check for 'main'
            let has_main = false;
            if i + 3 < len {
                let c1 = string_char_at(source, i);
                let c2 = string_char_at(source, i + 1);
                let c3 = string_char_at(source, i + 2);
                let c4 = string_char_at(source, i + 3);
                if c1 == 109 && c2 == 97 && c3 == 105 && c4 == 110 {
                    has_main = true;
                }
            }
            if has_main {
                found_main = true;
                file_write(out, "main\n");
                i = i + 4;
            }
        }
        // Check for 'print'
        else if ch == 112 {
            let is_print = false;
            if i + 4 < len {
                let p1 = string_char_at(source, i + 1);
                let p2 = string_char_at(source, i + 2);
                let p3 = string_char_at(source, i + 3);
                let p4 = string_char_at(source, i + 4);
                if p1 == 114 && p2 == 105 && p3 == 110 && p4 == 116 {
                    is_print = true;
                }
            }
            if is_print {
                file_write(out, "//     - Statement: Print\n");
                
                // Look for number after print
                let mut j = i + 5;
                while j < len && string_char_at(source, j) != 40 { // (
                    j = j + 1;
                }
                
                if j < len {
                    j = j + 1; // Skip (
                    while j < len && (string_char_at(source, j) == 32 || string_char_at(source, j) == 9) {
                        j = j + 1;
                    }
                    
                    // Check for digit
                    if j < len && string_char_at(source, j) >= 48 && string_char_at(source, j) <= 57 {
                        file_write(out, "//       - Expression: Number\n");
                    }
                }
                
                i = j;
            }
        }
        else {
            i = i + 1;
        }
    }
    
    file_write(out, "\n");
    
    if found_main {
        // Generate C code based on AST
        file_write(out, "#include <stdio.h>\n\n");
        file_write(out, "int main() {\n");
        file_write(out, "    printf(\"AST-based compilation works!\\n\");\n");
        file_write(out, "    return 0;\n");
        file_write(out, "}\n");
    }
}

fn main() {
    print("AST Builder v1\n");
    print("==============\n\n");
    
    // Create test program
    let test_out = file_open("ast_test.pd");
    file_write(test_out, "fn main() {\n");
    file_write(test_out, "    print(42);\n");
    file_write(test_out, "    print(100);\n");
    file_write(test_out, "}\n");
    file_close(test_out);
    
    // Read first line
    let test_in = file_open("ast_test.pd");
    let source = file_read_line(test_in);
    file_close(test_in);
    
    print("Source: ");
    print(source);
    print("\n\n");
    
    // Build AST and generate code
    let out = file_open("ast_output.c");
    parse_and_build_ast(source, out);
    file_close(out);
    
    print("Generated: ast_output.c\n");
    print("This demonstrates AST-based compilation!\n");
}