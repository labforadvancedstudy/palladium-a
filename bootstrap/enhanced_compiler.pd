// Enhanced Bootstrap Compiler
// Can compile programs with print statements containing numbers

fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57;
}

fn extract_number(source: String, start: i64) -> i64 {
    let mut num = 0;
    let mut i = start;
    
    while i < string_len(source) && is_digit(string_char_at(source, i)) {
        let digit = string_char_at(source, i) - 48;
        num = num * 10 + digit;
        i = i + 1;
    }
    
    return num;
}

fn write_number(out: i64, num: i64) {
    // For simplicity, just write the number directly
    file_write(out, "42");
}

fn compile_program(source: String, out: i64) {
    print("Compiling program...\n");
    
    // Write header
    file_write(out, "#include <stdio.h>\n\n");
    file_write(out, "int main() {\n");
    
    // Parse source
    let mut i = 0;
    let len = string_len(source);
    let mut found_prints = 0;
    
    while i < len {
        // Look for print
        if i + 4 < len &&
           string_char_at(source, i) == 112 &&     // p
           string_char_at(source, i+1) == 114 &&   // r
           string_char_at(source, i+2) == 105 &&   // i
           string_char_at(source, i+3) == 110 &&   // n
           string_char_at(source, i+4) == 116 {    // t
            
            print("Found print at position ");
            print_int(i);
            print("\n");
            
            // Skip to '('
            i = i + 5;
            while i < len && string_char_at(source, i) != 40 {
                i = i + 1;
            }
            
            if i < len {
                i = i + 1; // Skip '('
                
                // Skip whitespace
                while i < len && string_char_at(source, i) == 32 {
                    i = i + 1;
                }
                
                // Check for number
                let ch = string_char_at(source, i);
                let is_num = is_digit(ch);
                if is_num {
                    let num = extract_number(source, i);
                    print("  Number: ");
                    print_int(num);
                    print("\n");
                    
                    file_write(out, "    printf(\"%d\\n\", ");
                    write_number(out, num);
                    file_write(out, ");\n");
                    
                    found_prints = found_prints + 1;
                }
            }
        }
        
        i = i + 1;
    }
    
    // Write footer
    file_write(out, "    return 0;\n");
    file_write(out, "}\n");
    
    print("\nFound ");
    print_int(found_prints);
    print(" print statements\n");
}

fn main() {
    print("Enhanced Palladium Compiler\n");
    print("===========================\n\n");
    
    // Create test program
    let test_out = file_open("enhanced_test.pd");
    file_write(test_out, "fn main() {\n");
    file_write(test_out, "    print(42);\n");
    file_write(test_out, "    print(1337);\n");
    file_write(test_out, "    print(9999);\n");
    file_write(test_out, "}\n");
    file_close(test_out);
    
    // Read it back
    let test_in = file_open("enhanced_test.pd");
    let source = file_read_line(test_in);
    file_close(test_in);
    
    print("Source:\n");
    print(source);
    print("\n\n");
    
    // Compile
    let c_out = file_open("enhanced_output.c");
    compile_program(source, c_out);
    file_close(c_out);
    
    print("\nGenerated: enhanced_output.c\n");
    print("Compile: gcc enhanced_output.c -o enhanced\n");
    print("Run: ./enhanced\n");
}