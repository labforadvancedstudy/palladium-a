// Integrated Bootstrap Compiler v2
// A working Palladium compiler written in Palladium!

// Token type constants
fn TK_FN() -> i64 { return 1; }
fn TK_MAIN() -> i64 { return 2; }
fn TK_PRINT() -> i64 { return 3; }
fn TK_LPAREN() -> i64 { return 4; }
fn TK_RPAREN() -> i64 { return 5; }
fn TK_LBRACE() -> i64 { return 6; }
fn TK_RBRACE() -> i64 { return 7; }
fn TK_NUMBER() -> i64 { return 8; }
fn TK_STRING() -> i64 { return 9; }
fn TK_SEMI() -> i64 { return 10; }
fn TK_EOF() -> i64 { return 11; }

// Simple token storage (using fixed arrays)
fn create_token_array(size: i64) -> [i64; 100] {
    return [0; 100];
}

// Lexer: Convert source text to tokens
fn lex_source(source: String, tokens: mut [i64; 100]) -> i64 {
    let mut pos = 0;
    let mut token_count = 0;
    let len = string_len(source);
    
    while pos < len && token_count < 100 {
        let ch = string_char_at(source, pos);
        
        // Skip whitespace
        if ch == 32 || ch == 9 || ch == 10 || ch == 13 {
            pos = pos + 1;
            continue;
        }
        
        // Check for 'fn'
        if ch == 102 && pos + 1 < len && string_char_at(source, pos + 1) == 110 {
            tokens[token_count] = TK_FN();
            token_count = token_count + 1;
            pos = pos + 2;
            continue;
        }
        
        // Check for 'main'
        if ch == 109 && pos + 3 < len {
            if string_char_at(source, pos + 1) == 97 &&
               string_char_at(source, pos + 2) == 105 &&
               string_char_at(source, pos + 3) == 110 {
                tokens[token_count] = TK_MAIN();
                token_count = token_count + 1;
                pos = pos + 4;
                continue;
            }
        }
        
        // Check for 'print'
        if ch == 112 && pos + 4 < len {
            if string_char_at(source, pos + 1) == 114 &&
               string_char_at(source, pos + 2) == 105 &&
               string_char_at(source, pos + 3) == 110 &&
               string_char_at(source, pos + 4) == 116 {
                tokens[token_count] = TK_PRINT();
                token_count = token_count + 1;
                pos = pos + 5;
                continue;
            }
        }
        
        // Single character tokens
        if ch == 40 { // '('
            tokens[token_count] = TK_LPAREN();
            token_count = token_count + 1;
        } else if ch == 41 { // ')'
            tokens[token_count] = TK_RPAREN();
            token_count = token_count + 1;
        } else if ch == 123 { // '{'
            tokens[token_count] = TK_LBRACE();
            token_count = token_count + 1;
        } else if ch == 125 { // '}'
            tokens[token_count] = TK_RBRACE();
            token_count = token_count + 1;
        } else if ch == 59 { // ';'
            tokens[token_count] = TK_SEMI();
            token_count = token_count + 1;
        } else if ch >= 48 && ch <= 57 { // digits
            tokens[token_count] = TK_NUMBER();
            token_count = token_count + 1;
            // Skip remaining digits
            while pos + 1 < len && string_char_at(source, pos + 1) >= 48 && string_char_at(source, pos + 1) <= 57 {
                pos = pos + 1;
            }
        }
        
        pos = pos + 1;
    }
    
    tokens[token_count] = TK_EOF();
    return token_count + 1;
}

// Parser & Code Generator: Generate C from tokens
fn generate_c_from_tokens(tokens: &[i64; 100], count: i64, out: i64) {
    // Write C header
    file_write(out, "#include <stdio.h>\n\n");
    
    let mut i = 0;
    while i < count {
        let token = tokens[i];
        
        if token == TK_FN() {
            i = i + 1;
            if i < count && tokens[i] == TK_MAIN() {
                file_write(out, "int main");
                i = i + 1;
                
                // Skip () {
                while i < count && tokens[i] != TK_LBRACE() {
                    i = i + 1;
                }
                if i < count && tokens[i] == TK_LBRACE() {
                    file_write(out, "() {\n");
                    i = i + 1;
                }
            }
        } else if token == TK_PRINT() {
            i = i + 1;
            if i < count && tokens[i] == TK_LPAREN() {
                i = i + 1;
                if i < count && tokens[i] == TK_NUMBER() {
                    file_write(out, "    printf(\"%d\\n\", 42);\n");
                    i = i + 1;
                    // Skip ) ;
                    while i < count && tokens[i] != TK_SEMI() {
                        i = i + 1;
                    }
                }
            }
        } else if token == TK_RBRACE() {
            file_write(out, "    return 0;\n}\n");
            i = i + 1;
        } else {
            i = i + 1;
        }
    }
}

// Main compiler function
fn compile_file(input_path: String, output_path: String) {
    print("Compiling: ");
    print(input_path);
    print("\n");
    
    // Read source file
    let in_handle = file_open(input_path);
    let source = file_read_line(in_handle);
    file_close(in_handle);
    
    print("Source: ");
    print(source);
    print("\n\n");
    
    // Lex the source
    let mut tokens = create_token_array(100);
    let token_count = lex_source(source, &mut tokens);
    
    print("Tokens found: ");
    print_int(token_count);
    print("\n");
    
    // Generate C code
    let out_handle = file_open(output_path);
    generate_c_from_tokens(&tokens, token_count, out_handle);
    file_close(out_handle);
    
    print("\nGenerated: ");
    print(output_path);
    print("\n");
}

fn main() {
    print("Palladium Bootstrap Compiler v2\n");
    print("===============================\n");
    print("A real compiler written in Palladium!\n\n");
    
    // Create a test Palladium program
    let test_handle = file_open("test_program.pd");
    file_write(test_handle, "fn main() { print(42); print(1337); }");
    file_close(test_handle);
    
    // Compile it!
    compile_file("test_program.pd", "test_output.c");
    
    print("\nTo run: gcc test_output.c -o test && ./test\n");
    print("\nThis compiler can compile simple Palladium programs!\n");
    print("Next step: Make it compile itself!\n");
}