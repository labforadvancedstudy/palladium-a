// Ultra-Minimal Palladium Compiler
// Can compile itself using tiny_v16 features only
// No const, enum, trait, or advanced features

// Token types as numbers
fn tok_eof() -> i64 { return 0; }
fn tok_ident() -> i64 { return 1; }
fn tok_number() -> i64 { return 2; }
fn tok_string() -> i64 { return 3; }
fn tok_fn() -> i64 { return 10; }
fn tok_let() -> i64 { return 11; }
fn tok_mut() -> i64 { return 12; }
fn tok_return() -> i64 { return 13; }
fn tok_if() -> i64 { return 14; }
fn tok_else() -> i64 { return 15; }
fn tok_while() -> i64 { return 16; }
fn tok_lparen() -> i64 { return 20; }
fn tok_rparen() -> i64 { return 21; }
fn tok_lbrace() -> i64 { return 22; }
fn tok_rbrace() -> i64 { return 23; }
fn tok_semicolon() -> i64 { return 24; }
fn tok_comma() -> i64 { return 25; }
fn tok_colon() -> i64 { return 26; }
fn tok_arrow() -> i64 { return 27; }
fn tok_plus() -> i64 { return 30; }
fn tok_minus() -> i64 { return 31; }
fn tok_star() -> i64 { return 32; }
fn tok_slash() -> i64 { return 33; }
fn tok_assign() -> i64 { return 34; }
fn tok_eq() -> i64 { return 35; }
fn tok_ne() -> i64 { return 36; }
fn tok_lt() -> i64 { return 37; }
fn tok_gt() -> i64 { return 38; }

// Simple lexer state
fn create_lexer(source: String) -> String {
    // Returns a simple state: source
    return source;
}

// Check if character is digit
fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57; // '0' to '9'
}

// Check if character is letter
fn is_letter(ch: i64) -> bool {
    return (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122); // A-Z or a-z
}

// Get next token - returns token type and advances position
fn next_token(source: String, pos: i64) -> i64 {
    let len = 1000; // Fixed max length for now
    let mut p = pos;
    
    // Skip whitespace
    while p < len {
        let ch = string_char_at(source, p);
        if ch == 32 || ch == 10 || ch == 9 { // space, newline, tab
            p = p + 1;
        } else {
            break;
        }
    }
    
    if p >= len {
        return tok_eof();
    }
    
    let ch = string_char_at(source, p);
    
    // Numbers
    if is_digit(ch) {
        while p < len && is_digit(string_char_at(source, p)) {
            p = p + 1;
        }
        return tok_number();
    }
    
    // Identifiers and keywords
    if is_letter(ch) || ch == 95 { // _ underscore
        let start = p;
        while p < len {
            let c = string_char_at(source, p);
            if is_letter(c) || is_digit(c) || c == 95 {
                p = p + 1;
            } else {
                break;
            }
        }
        
        // For now, just return identifier
        // TODO: Check for keywords
        
        return tok_ident();
    }
    
    // Single character tokens
    if ch == 40 { return tok_lparen(); }      // (
    if ch == 41 { return tok_rparen(); }      // )
    if ch == 123 { return tok_lbrace(); }     // {
    if ch == 125 { return tok_rbrace(); }     // }
    if ch == 59 { return tok_semicolon(); }   // ;
    if ch == 44 { return tok_comma(); }       // ,
    if ch == 58 { return tok_colon(); }       // :
    if ch == 43 { return tok_plus(); }        // +
    if ch == 45 { return tok_minus(); }       // -
    if ch == 42 { return tok_star(); }        // *
    if ch == 47 { return tok_slash(); }       // /
    
    // Two character tokens
    if ch == 61 { // =
        if p + 1 < len && string_char_at(source, p + 1) == 61 {
            return tok_eq(); // ==
        }
        return tok_assign(); // =
    }
    
    if ch == 33 { // !
        if p + 1 < len && string_char_at(source, p + 1) == 61 {
            return tok_ne(); // !=
        }
    }
    
    if ch == 60 { return tok_lt(); } // <
    if ch == 62 { return tok_gt(); } // >
    
    if ch == 45 { // -
        if p + 1 < len && string_char_at(source, p + 1) == 62 {
            return tok_arrow(); // ->
        }
        return tok_minus();
    }
    
    // String literals
    if ch == 34 { // "
        p = p + 1;
        while p < len && string_char_at(source, p) != 34 {
            if string_char_at(source, p) == 92 { // backslash
                p = p + 1; // skip escaped char
            }
            p = p + 1;
        }
        if p < len {
            p = p + 1; // skip closing "
        }
        return tok_string();
    }
    
    return tok_eof(); // Unknown token
}

// Simple helper to check string equality
fn is_same_string(s1: String, s2: String) -> bool {
    // For now, just return false - we'll implement proper comparison later
    return false;
}

// Main compiler function
fn compile_program(source: String) -> String {
    let mut output = "";
    
    // C header
    output = output + "#include <stdio.h>\n";
    output = output + "#include <stdlib.h>\n";
    output = output + "#include <string.h>\n\n";
    
    // Runtime functions
    output = output + "void print(const char* s) { printf(\"%s\\n\", s); }\n";
    output = output + "void print_int(long long n) { printf(\"%lld\\n\", n); }\n\n";
    
    // For now, just compile a simple main function
    output = output + "int main() {\n";
    output = output + "    print(\"Mini compiler works!\");\n";
    output = output + "    return 0;\n";
    output = output + "}\n";
    
    return output;
}

// Test the compiler
fn main() {
    print("Mini Palladium Compiler");
    print("======================");
    
    let test_program = "fn main() { print(\"Hello from mini compiler!\"); }";
    
    print("Compiling test program...");
    let output = compile_program(test_program);
    
    print("Generated C code:");
    print(output);
}