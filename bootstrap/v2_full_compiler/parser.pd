// Parser for Palladium - Building the AST
// "Constructing legends from tokens"

import lexer;
import ast;

struct Parser {
    tokens: [Token; 1000],
    current: i64,
    token_count: i64,
}

pub fn create_parser(tokens: [Token; 1000]) -> Parser {
    // Count tokens until EOF
    let mut count = 0;
    while count < 1000 {
        if matches!(tokens[count].token_type, TokenType::Eof) {
            break;
        }
        count = count + 1;
    }
    
    return Parser {
        tokens: tokens,
        current: 0,
        token_count: count,
    };
}

fn is_at_end(parser: &Parser) -> bool {
    return parser.current >= parser.token_count || 
           matches!(parser.tokens[parser.current].token_type, TokenType::Eof);
}

fn peek(parser: &Parser) -> Token {
    if parser.current < parser.token_count {
        return parser.tokens[parser.current];
    }
    return Token { token_type: TokenType::Eof, lexeme: "", line: 0, column: 0 };
}

fn advance(parser: &mut Parser) -> Token {
    if !is_at_end(parser) {
        let token = parser.tokens[parser.current];
        parser.current = parser.current + 1;
        return token;
    }
    return Token { token_type: TokenType::Eof, lexeme: "", line: 0, column: 0 };
}

fn check(parser: &Parser, token_type: TokenType) -> bool {
    if is_at_end(parser) {
        return false;
    }
    return matches!(peek(parser).token_type, token_type);
}

fn consume(parser: &mut Parser, token_type: TokenType, message: String) -> Token {
    if check(parser, token_type) {
        return advance(parser);
    }
    
    // Error handling - for now just print and return EOF
    print("Parse error: " + message);
    return Token { token_type: TokenType::Eof, lexeme: "", line: 0, column: 0 };
}

// Parse type
fn parse_type(parser: &mut Parser) -> Type {
    let token = advance(parser);
    
    if matches!(token.token_type, TokenType::TypeI32) {
        return Type::I32;
    }
    if matches!(token.token_type, TokenType::TypeI64) {
        return Type::I64;
    }
    if matches!(token.token_type, TokenType::TypeBool) {
        return Type::Bool;
    }
    if matches!(token.token_type, TokenType::TypeString) {
        return Type::String;
    }
    if matches!(token.token_type, TokenType::Identifier) {
        return Type::Custom(token.lexeme);
    }
    
    // Default to i64
    return Type::I64;
}

// Parse primary expression
fn parse_primary(parser: &mut Parser) -> Expr {
    // Integer literal
    if check(parser, TokenType::Integer) {
        let token = advance(parser);
        let value = string_to_int(token.lexeme);
        return Expr::Integer(value);
    }
    
    // String literal
    if check(parser, TokenType::String) {
        let token = advance(parser);
        return Expr::String(token.lexeme);
    }
    
    // Boolean literal
    if check(parser, TokenType::True) {
        advance(parser);
        return Expr::Bool(true);
    }
    if check(parser, TokenType::False) {
        advance(parser);
        return Expr::Bool(false);
    }
    
    // Identifier or function call
    if check(parser, TokenType::Identifier) {
        let name = advance(parser).lexeme;
        
        // Check for function call
        if check(parser, TokenType::LeftParen) {
            advance(parser);  // consume '('
            let mut args: Vec<Expr> = Vec::new();
            
            while !check(parser, TokenType::RightParen) && !is_at_end(parser) {
                args.push(parse_expression(parser));
                if check(parser, TokenType::Comma) {
                    advance(parser);
                }
            }
            
            consume(parser, TokenType::RightParen, "Expected ')' after arguments");
            return create_call_expr(name, args);
        }
        
        return Expr::Ident(name);
    }
    
    // Parenthesized expression
    if check(parser, TokenType::LeftParen) {
        advance(parser);
        let expr = parse_expression(parser);
        consume(parser, TokenType::RightParen, "Expected ')' after expression");
        return expr;
    }
    
    // Error - return dummy value
    print("Parse error: Expected expression");
    return Expr::Integer(0);
}

// Parse unary expression
fn parse_unary(parser: &mut Parser) -> Expr {
    if check(parser, TokenType::Minus) {
        advance(parser);
        let operand = parse_unary(parser);
        return create_unary_expr(UnaryOp::Neg, operand);
    }
    
    if check(parser, TokenType::Not) {
        advance(parser);
        let operand = parse_unary(parser);
        return create_unary_expr(UnaryOp::Not, operand);
    }
    
    return parse_primary(parser);
}

// Parse multiplication/division
fn parse_factor(parser: &mut Parser) -> Expr {
    let mut expr = parse_unary(parser);
    
    while check(parser, TokenType::Star) || check(parser, TokenType::Slash) || check(parser, TokenType::Percent) {
        let op_token = advance(parser);
        let right = parse_unary(parser);
        
        let op = if matches!(op_token.token_type, TokenType::Star) {
            BinOp::Mul
        } else if matches!(op_token.token_type, TokenType::Slash) {
            BinOp::Div
        } else {
            BinOp::Mod
        };
        
        expr = create_binary_expr(expr, op, right);
    }
    
    return expr;
}

// Parse addition/subtraction
fn parse_term(parser: &mut Parser) -> Expr {
    let mut expr = parse_factor(parser);
    
    while check(parser, TokenType::Plus) || check(parser, TokenType::Minus) {
        let op_token = advance(parser);
        let right = parse_factor(parser);
        
        let op = if matches!(op_token.token_type, TokenType::Plus) {
            BinOp::Add
        } else {
            BinOp::Sub
        };
        
        expr = create_binary_expr(expr, op, right);
    }
    
    return expr;
}

// Parse comparison
fn parse_comparison(parser: &mut Parser) -> Expr {
    let mut expr = parse_term(parser);
    
    while check(parser, TokenType::Lt) || check(parser, TokenType::Gt) || 
          check(parser, TokenType::Le) || check(parser, TokenType::Ge) {
        let op_token = advance(parser);
        let right = parse_term(parser);
        
        let op = if matches!(op_token.token_type, TokenType::Lt) {
            BinOp::Lt
        } else if matches!(op_token.token_type, TokenType::Gt) {
            BinOp::Gt
        } else if matches!(op_token.token_type, TokenType::Le) {
            BinOp::Le
        } else {
            BinOp::Ge
        };
        
        expr = create_binary_expr(expr, op, right);
    }
    
    return expr;
}

// Parse equality
fn parse_equality(parser: &mut Parser) -> Expr {
    let mut expr = parse_comparison(parser);
    
    while check(parser, TokenType::Eq) || check(parser, TokenType::Ne) {
        let op_token = advance(parser);
        let right = parse_comparison(parser);
        
        let op = if matches!(op_token.token_type, TokenType::Eq) {
            BinOp::Eq
        } else {
            BinOp::Ne
        };
        
        expr = create_binary_expr(expr, op, right);
    }
    
    return expr;
}

// Parse logical AND
fn parse_and(parser: &mut Parser) -> Expr {
    let mut expr = parse_equality(parser);
    
    while check(parser, TokenType::And) {
        advance(parser);
        let right = parse_equality(parser);
        expr = create_binary_expr(expr, BinOp::And, right);
    }
    
    return expr;
}

// Parse logical OR
fn parse_or(parser: &mut Parser) -> Expr {
    let mut expr = parse_and(parser);
    
    while check(parser, TokenType::Or) {
        advance(parser);
        let right = parse_and(parser);
        expr = create_binary_expr(expr, BinOp::Or, right);
    }
    
    return expr;
}

// Parse expression
fn parse_expression(parser: &mut Parser) -> Expr {
    return parse_or(parser);
}

// Parse statement
fn parse_statement(parser: &mut Parser) -> Stmt {
    // Let statement
    if check(parser, TokenType::Let) {
        advance(parser);
        
        let mutable = false;
        if check(parser, TokenType::Mut) {
            advance(parser);
            mutable = true;
        }
        
        let name = consume(parser, TokenType::Identifier, "Expected variable name").lexeme;
        
        let mut ty: Option<Type> = None;
        if check(parser, TokenType::Colon) {
            advance(parser);
            ty = Some(parse_type(parser));
        }
        
        consume(parser, TokenType::Assign, "Expected '=' in let binding");
        let value = parse_expression(parser);
        consume(parser, TokenType::Semicolon, "Expected ';' after let statement");
        
        return create_let_stmt(name, ty, value, mutable);
    }
    
    // Return statement
    if check(parser, TokenType::Return) {
        advance(parser);
        
        let mut value: Option<Expr> = None;
        if !check(parser, TokenType::Semicolon) {
            value = Some(parse_expression(parser));
        }
        
        consume(parser, TokenType::Semicolon, "Expected ';' after return");
        return create_return_stmt(value);
    }
    
    // If statement
    if check(parser, TokenType::If) {
        advance(parser);
        
        let condition = parse_expression(parser);
        consume(parser, TokenType::LeftBrace, "Expected '{' after if condition");
        
        let mut then_branch: Vec<Stmt> = Vec::new();
        while !check(parser, TokenType::RightBrace) && !is_at_end(parser) {
            then_branch.push(parse_statement(parser));
        }
        consume(parser, TokenType::RightBrace, "Expected '}' after then branch");
        
        let mut else_branch: Option<Vec<Stmt>> = None;
        if check(parser, TokenType::Else) {
            advance(parser);
            consume(parser, TokenType::LeftBrace, "Expected '{' after else");
            
            let mut else_stmts: Vec<Stmt> = Vec::new();
            while !check(parser, TokenType::RightBrace) && !is_at_end(parser) {
                else_stmts.push(parse_statement(parser));
            }
            consume(parser, TokenType::RightBrace, "Expected '}' after else branch");
            
            else_branch = Some(else_stmts);
        }
        
        return create_if_stmt(condition, then_branch, else_branch);
    }
    
    // While statement
    if check(parser, TokenType::While) {
        advance(parser);
        
        let condition = parse_expression(parser);
        consume(parser, TokenType::LeftBrace, "Expected '{' after while condition");
        
        let mut body: Vec<Stmt> = Vec::new();
        while !check(parser, TokenType::RightBrace) && !is_at_end(parser) {
            body.push(parse_statement(parser));
        }
        consume(parser, TokenType::RightBrace, "Expected '}' after while body");
        
        return create_while_stmt(condition, body);
    }
    
    // Assignment or expression statement
    if check(parser, TokenType::Identifier) {
        let name = advance(parser).lexeme;
        
        // Check for assignment
        if check(parser, TokenType::Assign) {
            advance(parser);
            let value = parse_expression(parser);
            consume(parser, TokenType::Semicolon, "Expected ';' after assignment");
            return create_assign_stmt(name, value);
        }
        
        // Otherwise it's an expression statement (function call)
        parser.current = parser.current - 1;  // backtrack
    }
    
    // Expression statement
    let expr = parse_expression(parser);
    consume(parser, TokenType::Semicolon, "Expected ';' after expression");
    return Stmt::Expr(expr);
}

// Parse function
fn parse_function(parser: &mut Parser, is_public: bool) -> Function {
    consume(parser, TokenType::Fn, "Expected 'fn'");
    let name = consume(parser, TokenType::Identifier, "Expected function name").lexeme;
    
    consume(parser, TokenType::LeftParen, "Expected '(' after function name");
    
    let mut params: Vec<Param> = Vec::new();
    while !check(parser, TokenType::RightParen) && !is_at_end(parser) {
        let param_name = consume(parser, TokenType::Identifier, "Expected parameter name").lexeme;
        consume(parser, TokenType::Colon, "Expected ':' after parameter name");
        let param_type = parse_type(parser);
        
        params.push(create_param(param_name, param_type, false));
        
        if check(parser, TokenType::Comma) {
            advance(parser);
        }
    }
    consume(parser, TokenType::RightParen, "Expected ')' after parameters");
    
    let mut return_type: Option<Type> = None;
    if check(parser, TokenType::Arrow) {
        advance(parser);
        return_type = Some(parse_type(parser));
    }
    
    consume(parser, TokenType::LeftBrace, "Expected '{' before function body");
    
    let mut body: Vec<Stmt> = Vec::new();
    while !check(parser, TokenType::RightBrace) && !is_at_end(parser) {
        body.push(parse_statement(parser));
    }
    consume(parser, TokenType::RightBrace, "Expected '}' after function body");
    
    return create_function(name, params, return_type, body, is_public);
}

// Parse program
pub fn parse_program(parser: &mut Parser) -> Program {
    let mut program = create_program();
    
    while !is_at_end(parser) {
        let is_public = false;
        if check(parser, TokenType::Pub) {
            advance(parser);
            is_public = true;
        }
        
        if check(parser, TokenType::Fn) {
            let func = parse_function(parser, is_public);
            program.items.push(Item::Function(func));
        } else if check(parser, TokenType::Import) {
            advance(parser);
            let module_name = consume(parser, TokenType::Identifier, "Expected module name").lexeme;
            consume(parser, TokenType::Semicolon, "Expected ';' after import");
            program.items.push(Item::Import(module_name));
        } else {
            // Skip unknown tokens
            advance(parser);
        }
    }
    
    return program;
}