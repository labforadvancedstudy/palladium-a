// Simple lexer for Palladium - first step toward bootstrapping
// This lexer can tokenize a subset of Palladium syntax

// Token types
enum TokenType {
    // Literals
    Integer,
    String,
    Identifier,
    
    // Keywords
    Let,
    Mut,
    Fn,
    Return,
    If,
    Else,
    While,
    For,
    In,
    
    // Operators
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Eq,
    EqEq,
    Lt,
    Gt,
    
    // Delimiters
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    LeftBracket,
    RightBracket,
    Comma,
    Semicolon,
    Colon,
    Arrow,
    
    // Special
    Eof,
    Unknown,
}

// Check if token type is a specific type
fn token_is_type(t: TokenType, expected: TokenType) -> bool {
    // Since we can't compare enums directly, use a workaround
    match t {
        TokenType::Integer => {
            match expected {
                TokenType::Integer => true,
                _ => false,
            }
        }
        TokenType::Identifier => {
            match expected {
                TokenType::Identifier => true,
                _ => false,
            }
        }
        TokenType::Let => {
            match expected {
                TokenType::Let => true,
                _ => false,
            }
        }
        TokenType::Semicolon => {
            match expected {
                TokenType::Semicolon => true,
                _ => false,
            }
        }
        TokenType::Eof => {
            match expected {
                TokenType::Eof => true,
                _ => false,
            }
        }
        _ => false,
    }
}

// Lexer state (simplified without returning structs)
// We'll use global-like approach with functions

// Check if character is whitespace
fn is_whitespace(c: i64) -> bool {
    // space
    if c == 32 {
        return true;
    }
    // tab
    if c == 9 {
        return true;
    }
    // newline
    if c == 10 {
        return true;
    }
    // carriage return
    if c == 13 {
        return true;
    }
    return false;
}

// Skip whitespace and return new position
fn skip_whitespace(input: String, pos: i64) -> i64 {
    let len = string_len(input);
    let mut i = pos;
    
    while i < len {
        let c = string_char_at(input, i);
        if is_whitespace(c) == false {
            break;
        }
        i = i + 1;
    }
    
    return i;
}

// Check if character is letter or underscore
fn is_letter(c: i64) -> bool {
    if char_is_alpha(c) {
        return true;
    }
    // underscore
    if c == 95 {
        return true;
    }
    return false;
}

// Read an identifier starting at pos, return length
fn read_identifier_length(input: String, start: i64) -> i64 {
    let len = string_len(input);
    let mut i = start;
    
    if i >= len {
        return 0;
    }
    
    // First character must be letter or underscore
    if is_letter(string_char_at(input, i)) == false {
        return 0;
    }
    
    i = i + 1;
    
    // Rest can be letters, digits, or underscore
    while i < len {
        let c = string_char_at(input, i);
        if is_letter(c) == false {
            if char_is_digit(c) == false {
                break;
            }
        }
        i = i + 1;
    }
    
    return i - start;
}

// Check if identifier is a keyword
fn check_keyword(ident: String) -> TokenType {
    if string_eq(ident, "let") {
        return TokenType::Let;
    }
    if string_eq(ident, "mut") {
        return TokenType::Mut;
    }
    if string_eq(ident, "fn") {
        return TokenType::Fn;
    }
    if string_eq(ident, "return") {
        return TokenType::Return;
    }
    if string_eq(ident, "if") {
        return TokenType::If;
    }
    if string_eq(ident, "else") {
        return TokenType::Else;
    }
    if string_eq(ident, "while") {
        return TokenType::While;
    }
    if string_eq(ident, "for") {
        return TokenType::For;
    }
    if string_eq(ident, "in") {
        return TokenType::In;
    }
    
    return TokenType::Identifier;
}

// Read a number starting at pos, return length
fn read_number_length(input: String, start: i64) -> i64 {
    let len = string_len(input);
    let mut i = start;
    
    while i < len {
        if char_is_digit(string_char_at(input, i)) == false {
            break;
        }
        i = i + 1;
    }
    
    return i - start;
}

// Read a string literal, return length (including quotes)
fn read_string_length(input: String, start: i64) -> i64 {
    let len = string_len(input);
    
    if start >= len {
        return 0;
    }
    
    if string_char_at(input, start) != 34 { // '"'
        return 0;
    }
    
    let mut i = start + 1;
    let mut escaped = false;
    
    while i < len {
        let c = string_char_at(input, i);
        
        if escaped {
            escaped = false;
        } else {
            if c == 92 { // backslash
                escaped = true;
            } else if c == 34 { // closing quote
                return i - start + 1;
            }
        }
        
        i = i + 1;
    }
    
    // Unterminated string
    return 0;
}

// Get next token type at position (simplified)
fn next_token_type(input: String, pos: i64) -> TokenType {
    let len = string_len(input);
    
    // Skip whitespace
    let start = skip_whitespace(input, pos);
    
    if start >= len {
        return TokenType::Eof;
    }
    
    let c = string_char_at(input, start);
    
    // Single character tokens
    if c == 40 { return TokenType::LeftParen; }     // (
    if c == 41 { return TokenType::RightParen; }    // )
    if c == 123 { return TokenType::LeftBrace; }    // {
    if c == 125 { return TokenType::RightBrace; }   // }
    if c == 91 { return TokenType::LeftBracket; }   // [
    if c == 93 { return TokenType::RightBracket; }  // ]
    if c == 44 { return TokenType::Comma; }         // ,
    if c == 59 { return TokenType::Semicolon; }     // ;
    if c == 58 { return TokenType::Colon; }         // :
    if c == 43 { return TokenType::Plus; }          // +
    if c == 42 { return TokenType::Star; }          // *
    if c == 47 { return TokenType::Slash; }         // /
    if c == 37 { return TokenType::Percent; }       // %
    
    // Multi-character tokens
    if c == 45 { // -
        if start + 1 < len {
            if string_char_at(input, start + 1) == 62 { // >
                return TokenType::Arrow;
            }
        }
        return TokenType::Minus;
    }
    
    if c == 61 { // =
        if start + 1 < len {
            if string_char_at(input, start + 1) == 61 { // =
                return TokenType::EqEq;
            }
        }
        return TokenType::Eq;
    }
    
    if c == 60 { return TokenType::Lt; } // <
    if c == 62 { return TokenType::Gt; } // >
    
    // String literal
    if c == 34 { // "
        return TokenType::String;
    }
    
    // Number
    if char_is_digit(c) {
        return TokenType::Integer;
    }
    
    // Identifier or keyword
    if is_letter(c) {
        let ident_len = read_identifier_length(input, start);
        if ident_len > 0 {
            let ident = string_substring(input, start, start + ident_len);
            return check_keyword(ident);
        }
    }
    
    return TokenType::Unknown;
}

// Get token length at position
fn token_length_at(input: String, pos: i64) -> i64 {
    let len = string_len(input);
    let start = skip_whitespace(input, pos);
    
    if start >= len {
        return 0;
    }
    
    let c = string_char_at(input, start);
    
    // Single character tokens
    if c == 40 { return 1; }  // (
    if c == 41 { return 1; }  // )
    if c == 123 { return 1; } // {
    if c == 125 { return 1; } // }
    if c == 91 { return 1; }  // [
    if c == 93 { return 1; }  // ]
    if c == 44 { return 1; }  // ,
    if c == 59 { return 1; }  // ;
    if c == 58 { return 1; }  // :
    if c == 43 { return 1; }  // +
    if c == 42 { return 1; }  // *
    if c == 47 { return 1; }  // /
    if c == 37 { return 1; }  // %
    if c == 60 { return 1; }  // <
    if c == 62 { return 1; }  // >
    
    // Two character tokens
    if c == 45 { // -
        if start + 1 < len {
            if string_char_at(input, start + 1) == 62 { // >
                return 2; // ->
            }
        }
        return 1;
    }
    
    if c == 61 { // =
        if start + 1 < len {
            if string_char_at(input, start + 1) == 61 { // =
                return 2; // ==
            }
        }
        return 1;
    }
    
    // String literal
    if c == 34 {
        return read_string_length(input, start);
    }
    
    // Number
    if char_is_digit(c) {
        return read_number_length(input, start);
    }
    
    // Identifier
    if is_letter(c) {
        return read_identifier_length(input, start);
    }
    
    return 1; // Unknown token
}

// Demo tokenization
fn tokenize_demo(input: String) {
    print("=== Tokenizing ===");
    print("Input:");
    print(input);
    print("\nTokens:");
    
    let len = string_len(input);
    let mut pos = 0;
    let mut count = 0;
    
    while pos < len {
        pos = skip_whitespace(input, pos);
        if pos >= len {
            break;
        }
        
        let token_type = next_token_type(input, pos);
        let token_len = token_length_at(input, pos);
        
        if token_len == 0 {
            print("Error: Invalid token");
            break;
        }
        
        let token_text = string_substring(input, pos, pos + token_len);
        
        // Print token info
        match token_type {
            TokenType::Integer => print("INTEGER"),
            TokenType::String => print("STRING"),
            TokenType::Identifier => print("IDENTIFIER"),
            TokenType::Let => print("LET"),
            TokenType::Mut => print("MUT"),
            TokenType::Fn => print("FN"),
            TokenType::Return => print("RETURN"),
            TokenType::If => print("IF"),
            TokenType::Else => print("ELSE"),
            TokenType::While => print("WHILE"),
            TokenType::LeftParen => print("LEFT_PAREN"),
            TokenType::RightParen => print("RIGHT_PAREN"),
            TokenType::LeftBrace => print("LEFT_BRACE"),
            TokenType::RightBrace => print("RIGHT_BRACE"),
            TokenType::Semicolon => print("SEMICOLON"),
            TokenType::Eq => print("EQ"),
            TokenType::Plus => print("PLUS"),
            TokenType::Star => print("STAR"),
            _ => print("OTHER"),
        }
        
        print("  Value:");
        print(token_text);
        
        pos = pos + token_len;
        count = count + 1;
    }
    
    print("\nTotal tokens:");
    print_int(count);
}

fn main() {
    print("=== Palladium Bootstrap Lexer Demo ===\n");
    
    // Test 1: Simple variable declaration
    let test1 = "let x = 42;";
    tokenize_demo(test1);
    
    // Test 2: Function declaration
    print("\n");
    let test2 = "fn add(a, b) { return a + b; }";
    tokenize_demo(test2);
    
    // Test 3: String and identifier
    print("\n");
    let test3 = "let name = \"Palladium\";";
    tokenize_demo(test3);
    
    // Test 4: Complex expression
    print("\n");
    let test4 = "let result = (x + y) * 2;";
    tokenize_demo(test4);
    
    // Test 5: Control flow
    print("\n");
    let test5 = "if x > 0 { print(x); }";
    tokenize_demo(test5);
    
    print("\n=== Lexer demo complete ===");
}