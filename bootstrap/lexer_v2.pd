// Lexer v2 - Enhanced tokenizer that generates C code

fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57;
}

fn is_alpha(ch: i64) -> bool {
    return (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122);
}

fn is_alnum(ch: i64) -> bool {
    return is_alpha(ch) || is_digit(ch);
}

fn skip_whitespace(text: String, pos: i64) -> i64 {
    let mut i = pos;
    while i < string_len(text) {
        let ch = string_char_at(text, i);
        if ch != 32 && ch != 9 && ch != 10 && ch != 13 {
            return i;
        }
        i = i + 1;
    }
    return i;
}

fn match_keyword(text: String, pos: i64, keyword: String) -> bool {
    let klen = string_len(keyword);
    if pos + klen > string_len(text) {
        return false;
    }
    
    let mut i = 0;
    while i < klen {
        if string_char_at(text, pos + i) != string_char_at(keyword, i) {
            return false;
        }
        i = i + 1;
    }
    
    // Check next char is not alphanumeric
    if pos + klen < string_len(text) {
        let next = string_char_at(text, pos + klen);
        if is_alnum(next) {
            return false;
        }
    }
    
    return true;
}

fn scan_identifier(text: String, pos: i64) -> i64 {
    let mut i = pos;
    while i < string_len(text) && is_alnum(string_char_at(text, i)) {
        i = i + 1;
    }
    return i;
}

fn scan_number(text: String, pos: i64) -> i64 {
    let mut i = pos;
    while i < string_len(text) && is_digit(string_char_at(text, i)) {
        i = i + 1;
    }
    return i;
}

fn tokenize_and_generate(input_text: String, output_handle: i64) {
    print("Tokenizing source code...\n");
    
    let mut pos = 0;
    let mut has_main = false;
    let mut in_main = false;
    let mut brace_depth = 0;
    
    // Start C file
    file_write(output_handle, "#include <stdio.h>\n#include <stdlib.h>\n\n");
    
    while pos < string_len(input_text) {
        pos = skip_whitespace(input_text, pos);
        if pos >= string_len(input_text) {
            break;
        }
        
        let ch = string_char_at(input_text, pos);
        
        // Check for 'fn'
        if match_keyword(input_text, pos, "fn") {
            print("Found: fn\n");
            pos = pos + 2;
            pos = skip_whitespace(input_text, pos);
            
            // Check for 'main'
            if match_keyword(input_text, pos, "main") {
                print("Found: main\n");
                has_main = true;
                in_main = true;
                file_write(output_handle, "int main() ");
                pos = pos + 4;
            }
        }
        // Check for 'print'
        else if match_keyword(input_text, pos, "print") {
            print("Found: print\n");
            pos = pos + 5;
            pos = skip_whitespace(input_text, pos);
            
            if string_char_at(input_text, pos) == 40 { // '('
                pos = pos + 1;
                pos = skip_whitespace(input_text, pos);
                
                // Check for number
                if is_digit(string_char_at(input_text, pos)) {
                    let num_end = scan_number(input_text, pos);
                    file_write(output_handle, "printf(\"%d\\n\", ");
                    
                    // Write each digit
                    let mut i = pos;
                    while i < num_end {
                        let digit = string_char_at(input_text, i) - 48;
                        if digit == 0 { file_write(output_handle, "0"); }
                        else if digit == 1 { file_write(output_handle, "1"); }
                        else if digit == 2 { file_write(output_handle, "2"); }
                        else if digit == 3 { file_write(output_handle, "3"); }
                        else if digit == 4 { file_write(output_handle, "4"); }
                        else if digit == 5 { file_write(output_handle, "5"); }
                        else if digit == 6 { file_write(output_handle, "6"); }
                        else if digit == 7 { file_write(output_handle, "7"); }
                        else if digit == 8 { file_write(output_handle, "8"); }
                        else if digit == 9 { file_write(output_handle, "9"); }
                        i = i + 1;
                    }
                    file_write(output_handle, ");");
                    pos = num_end;
                }
            }
        }
        // Single character tokens
        else if ch == 123 { // '{'
            print("Found: {\n");
            file_write(output_handle, "{\n");
            brace_depth = brace_depth + 1;
            pos = pos + 1;
        }
        else if ch == 125 { // '}'
            print("Found: }\n");
            file_write(output_handle, "\n}");
            brace_depth = brace_depth - 1;
            if in_main && brace_depth == 0 {
                file_write(output_handle, "\n");
                in_main = false;
            }
            pos = pos + 1;
        }
        else if ch == 40 { // '('
            print("Found: (\n");
            pos = pos + 1;
        }
        else if ch == 41 { // ')'
            print("Found: )\n");
            pos = pos + 1;
        }
        else if ch == 59 { // ';'
            print("Found: ;\n");
            file_write(output_handle, "\n");
            pos = pos + 1;
        }
        else {
            // Skip unknown characters
            pos = pos + 1;
        }
    }
    
    if !has_main {
        print("Warning: No main function found\n");
    }
}

fn main() {
    print("Palladium Lexer v2\n");
    print("==================\n\n");
    
    // Create test program
    let test_handle = file_open("test_input.pd");
    file_write(test_handle, "fn main() { print(42); print(1337); }");
    file_close(test_handle);
    
    // Read test program
    let input_handle = file_open("test_input.pd");
    let input_text = file_read_line(input_handle);
    file_close(input_handle);
    
    print("Input: ");
    print(input_text);
    print("\n\n");
    
    // Generate C code
    let output_handle = file_open("generated.c");
    tokenize_and_generate(input_text, output_handle);
    file_close(output_handle);
    
    print("\nGenerated: generated.c\n");
    print("Compile with: gcc generated.c -o program\n");
}