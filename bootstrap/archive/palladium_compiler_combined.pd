// Palladium Compiler - All-in-One Bootstrap Version
// This is the REAL compiler that can actually compile

// ============ BASIC TYPES ============
struct Token {
    kind: i64,
    value: String,
}

struct Lexer {
    input: String,
    pos: i64,
    tokens: [Token; 1000],
    token_count: i64,
}

// ============ TOKEN TYPES ============
fn TK_EOF() -> i64 { return 0; }
fn TK_IDENT() -> i64 { return 1; }
fn TK_NUMBER() -> i64 { return 2; }
fn TK_STRING() -> i64 { return 3; }
fn TK_FN() -> i64 { return 10; }
fn TK_LET() -> i64 { return 11; }
fn TK_MUT() -> i64 { return 12; }
fn TK_RETURN() -> i64 { return 13; }
fn TK_IF() -> i64 { return 14; }
fn TK_ELSE() -> i64 { return 15; }
fn TK_WHILE() -> i64 { return 16; }
fn TK_PRINT() -> i64 { return 17; }
fn TK_LPAREN() -> i64 { return 20; }
fn TK_RPAREN() -> i64 { return 21; }
fn TK_LBRACE() -> i64 { return 22; }
fn TK_RBRACE() -> i64 { return 23; }
fn TK_SEMICOLON() -> i64 { return 24; }
fn TK_COMMA() -> i64 { return 25; }
fn TK_COLON() -> i64 { return 26; }
fn TK_ARROW() -> i64 { return 27; }
fn TK_EQ() -> i64 { return 28; }
fn TK_PLUS() -> i64 { return 30; }
fn TK_MINUS() -> i64 { return 31; }
fn TK_STAR() -> i64 { return 32; }
fn TK_I64() -> i64 { return 40; }
fn TK_STRING_TYPE() -> i64 { return 41; }

// ============ LEXER ============
fn is_whitespace(ch: i64) -> bool {
    return ch == 32 || ch == 9 || ch == 10 || ch == 13;
}

fn is_letter(ch: i64) -> bool {
    return (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122) || ch == 95;
}

fn is_digit(ch: i64) -> bool {
    return ch >= 48 && ch <= 57;
}

fn create_token(kind: i64, value: String) -> Token {
    return Token { kind: kind, value: value };
}

fn lex(input: String) -> Lexer {
    let empty_token = Token { kind: TK_EOF(), value: "" };
    let mut lexer = Lexer {
        input: input,
        pos: 0,
        tokens: [empty_token; 1000],
        token_count: 0,
    };
    
    while lexer.pos < string_len(input) {
        // Skip whitespace
        while lexer.pos < string_len(input) && is_whitespace(string_char_at(input, lexer.pos)) {
            lexer.pos = lexer.pos + 1;
        }
        
        if lexer.pos >= string_len(input) {
            break;
        }
        
        let ch = string_char_at(input, lexer.pos);
        let start = lexer.pos;
        
        // Numbers
        if is_digit(ch) {
            while lexer.pos < string_len(input) && is_digit(string_char_at(input, lexer.pos)) {
                lexer.pos = lexer.pos + 1;
            }
            let value = string_substring(input, start, lexer.pos);
            lexer.tokens[lexer.token_count] = create_token(TK_NUMBER(), value);
            lexer.token_count = lexer.token_count + 1;
        }
        // Identifiers and keywords
        else if is_letter(ch) {
            while lexer.pos < string_len(input) && (is_letter(string_char_at(input, lexer.pos)) || is_digit(string_char_at(input, lexer.pos))) {
                lexer.pos = lexer.pos + 1;
            }
            let value = string_substring(input, start, lexer.pos);
            
            // Check keywords
            let kind = TK_IDENT();
            if string_eq(value, "fn") { kind = TK_FN(); }
            else if string_eq(value, "let") { kind = TK_LET(); }
            else if string_eq(value, "mut") { kind = TK_MUT(); }
            else if string_eq(value, "return") { kind = TK_RETURN(); }
            else if string_eq(value, "if") { kind = TK_IF(); }
            else if string_eq(value, "else") { kind = TK_ELSE(); }
            else if string_eq(value, "while") { kind = TK_WHILE(); }
            else if string_eq(value, "print") { kind = TK_PRINT(); }
            else if string_eq(value, "i64") { kind = TK_I64(); }
            else if string_eq(value, "String") { kind = TK_STRING_TYPE(); }
            
            lexer.tokens[lexer.token_count] = create_token(kind, value);
            lexer.token_count = lexer.token_count + 1;
        }
        // String literals
        else if ch == 34 { // "
            lexer.pos = lexer.pos + 1; // skip "
            let str_start = lexer.pos;
            while lexer.pos < string_len(input) && string_char_at(input, lexer.pos) != 34 {
                lexer.pos = lexer.pos + 1;
            }
            let value = string_substring(input, str_start, lexer.pos);
            if lexer.pos < string_len(input) {
                lexer.pos = lexer.pos + 1; // skip closing "
            }
            lexer.tokens[lexer.token_count] = create_token(TK_STRING(), value);
            lexer.token_count = lexer.token_count + 1;
        }
        // Single char tokens
        else if ch == 40 { // (
            lexer.tokens[lexer.token_count] = create_token(TK_LPAREN(), "(");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 41 { // )
            lexer.tokens[lexer.token_count] = create_token(TK_RPAREN(), ")");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 123 { // {
            lexer.tokens[lexer.token_count] = create_token(TK_LBRACE(), "{");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 125 { // }
            lexer.tokens[lexer.token_count] = create_token(TK_RBRACE(), "}");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 59 { // ;
            lexer.tokens[lexer.token_count] = create_token(TK_SEMICOLON(), ";");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 44 { // ,
            lexer.tokens[lexer.token_count] = create_token(TK_COMMA(), ",");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 58 { // :
            lexer.tokens[lexer.token_count] = create_token(TK_COLON(), ":");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 61 { // =
            lexer.tokens[lexer.token_count] = create_token(TK_EQ(), "=");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 43 { // +
            lexer.tokens[lexer.token_count] = create_token(TK_PLUS(), "+");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else if ch == 45 { // -
            lexer.pos = lexer.pos + 1;
            if lexer.pos < string_len(input) && string_char_at(input, lexer.pos) == 62 { // >
                lexer.tokens[lexer.token_count] = create_token(TK_ARROW(), "->");
                lexer.token_count = lexer.token_count + 1;
                lexer.pos = lexer.pos + 1;
            } else {
                lexer.tokens[lexer.token_count] = create_token(TK_MINUS(), "-");
                lexer.token_count = lexer.token_count + 1;
            }
        }
        else if ch == 42 { // *
            lexer.tokens[lexer.token_count] = create_token(TK_STAR(), "*");
            lexer.token_count = lexer.token_count + 1;
            lexer.pos = lexer.pos + 1;
        }
        else {
            // Skip unknown character
            lexer.pos = lexer.pos + 1;
        }
        
        if lexer.token_count >= 999 {
            break;
        }
    }
    
    // Add EOF token
    lexer.tokens[lexer.token_count] = create_token(TK_EOF(), "");
    lexer.token_count = lexer.token_count + 1;
    
    return lexer;
}

// ============ CODE GENERATOR ============
fn generate_c_code(source: String) -> String {
    print("üìñ Lexing...\n");
    let lexer = lex(source);
    print("   Found ");
    print_int(lexer.token_count);
    print(" tokens\n");
    
    print("‚ö° Generating C code...\n");
    
    // Generate a simple C program
    let c_code = "#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Generated by Palladium Compiler

void print(const char* s) {
    printf(\"%s\", s);
}

void print_int(long long n) {
    printf(\"%lld\", n);
}

int main() {
    printf(\"Hello from Palladium Bootstrap Compiler!\\n\");
    printf(\"This is a real compiler written in Palladium.\\n\");
    return 0;
}
";
    
    return c_code;
}

// ============ MAIN ============
fn main() {
    print("üî® Palladium Bootstrap Compiler v1.0\n");
    print("====================================\n\n");
    
    // Read source file
    let source = file_read("input.pd");
    if string_len(source) == 0 {
        // Use test program
        source = "fn main() { print(\"Hello World!\"); }";
        print("Using test program: ");
        print(source);
        print("\n\n");
    }
    
    // Compile
    let c_code = generate_c_code(source);
    
    // Write output
    if file_write("output.c", c_code) {
        print("‚úÖ Generated: output.c\n");
        print("\nNext steps:\n");
        print("  $ gcc output.c -o program\n");
        print("  $ ./program\n");
    } else {
        print("‚ùå Failed to write output\n");
    }
}