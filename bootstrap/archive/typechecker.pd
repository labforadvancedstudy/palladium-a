// Palladium Type Checker - Core component for bootstrapping
// This type checker validates and infers types for Palladium programs

// Type representation
enum Type {
    Unit,
    Bool,
    I32,
    I64,
    String,
    Array(Type, i64),     // element type, size
    Struct(String),       // struct name
    Function(Type, Type), // params type, return type (simplified)
    Unknown,              // For type inference
}

// Type checking result
enum TypeResult {
    Ok(Type),
    Error(String),
}

// Variable info in symbol table
struct VarInfo {
    name: String,
    ty: Type,
    mutable: bool,
}

// Symbol table for tracking variables
struct SymbolTable {
    // Using arrays as simple scopes (max 100 vars per scope, 10 scopes)
    scopes: [[VarInfo; 100]; 10],
    scope_sizes: [i64; 10],
    current_scope: i64,
}

// Type checker state
struct TypeChecker {
    symbols: SymbolTable,
    // Store struct definitions (simplified - name -> field count)
    structs: [[String; 50]; 50],  // struct_name at index i
    struct_count: i64,
}

// Create new type checker
fn typechecker_new() -> TypeChecker {
    let empty_var = VarInfo { name: "", ty: Type::Unknown, mutable: false };
    let empty_scope = [empty_var; 100];
    let empty_struct = [""; 50];
    
    return TypeChecker {
        symbols: SymbolTable {
            scopes: [empty_scope; 10],
            scope_sizes: [0; 10],
            current_scope: 0,
        },
        structs: [empty_struct; 50],
        struct_count: 0,
    };
}

// Enter new scope
fn enter_scope(mut tc: TypeChecker) {
    if tc.symbols.current_scope < 9 {
        tc.symbols.current_scope = tc.symbols.current_scope + 1;
        tc.symbols.scope_sizes[tc.symbols.current_scope] = 0;
    }
}

// Exit current scope
fn exit_scope(mut tc: TypeChecker) {
    if tc.symbols.current_scope > 0 {
        tc.symbols.current_scope = tc.symbols.current_scope - 1;
    }
}

// Define variable in current scope
fn define_var(mut tc: TypeChecker, name: String, ty: Type, mutable: bool) -> TypeResult {
    let scope_idx = tc.symbols.current_scope;
    let size = tc.symbols.scope_sizes[scope_idx];
    
    // Check if already defined in current scope
    for i in 0..size {
        if string_eq(tc.symbols.scopes[scope_idx][i].name, name) {
            return TypeResult::Error(string_concat("Variable already defined: ", name));
        }
    }
    
    // Add to current scope
    if size < 100 {
        tc.symbols.scopes[scope_idx][size] = VarInfo { 
            name: name, 
            ty: ty, 
            mutable: mutable 
        };
        tc.symbols.scope_sizes[scope_idx] = size + 1;
        return TypeResult::Ok(ty);
    }
    
    return TypeResult::Error("Too many variables in scope");
}

// Look up variable type
fn lookup_var(tc: TypeChecker, name: String) -> TypeResult {
    // Search from current scope backwards
    let mut scope = tc.symbols.current_scope;
    while scope >= 0 {
        let size = tc.symbols.scope_sizes[scope];
        for i in 0..size {
            if string_eq(tc.symbols.scopes[scope][i].name, name) {
                return TypeResult::Ok(tc.symbols.scopes[scope][i].ty);
            }
        }
        if scope == 0 {
            break;
        }
        scope = scope - 1;
    }
    
    return TypeResult::Error(string_concat("Undefined variable: ", name));
}

// Check if variable is mutable
fn is_mutable(tc: TypeChecker, name: String) -> bool {
    let mut scope = tc.symbols.current_scope;
    while scope >= 0 {
        let size = tc.symbols.scope_sizes[scope];
        for i in 0..size {
            if string_eq(tc.symbols.scopes[scope][i].name, name) {
                return tc.symbols.scopes[scope][i].mutable;
            }
        }
        if scope == 0 {
            break;
        }
        scope = scope - 1;
    }
    return false;
}

// Register struct type
fn register_struct(mut tc: TypeChecker, name: String) -> TypeResult {
    if tc.struct_count < 50 {
        tc.structs[tc.struct_count][0] = name;
        tc.struct_count = tc.struct_count + 1;
        return TypeResult::Ok(Type::Struct(name));
    }
    return TypeResult::Error("Too many struct definitions");
}

// Check if struct exists
fn struct_exists(tc: TypeChecker, name: String) -> bool {
    for i in 0..tc.struct_count {
        if string_eq(tc.structs[i][0], name) {
            return true;
        }
    }
    return false;
}

// Type equality check
fn types_equal(t1: Type, t2: Type) -> bool {
    match t1 {
        Type::Unit => {
            match t2 {
                Type::Unit => return true,
                _ => return false,
            }
        }
        Type::Bool => {
            match t2 {
                Type::Bool => return true,
                _ => return false,
            }
        }
        Type::I32 => {
            match t2 {
                Type::I32 => return true,
                _ => return false,
            }
        }
        Type::I64 => {
            match t2 {
                Type::I64 => return true,
                _ => return false,
            }
        }
        Type::String => {
            match t2 {
                Type::String => return true,
                _ => return false,
            }
        }
        Type::Struct(name1) => {
            match t2 {
                Type::Struct(name2) => return string_eq(name1, name2),
                _ => return false,
            }
        }
        Type::Unknown => {
            return true;  // Unknown matches anything (for inference)
        }
        _ => return false,  // Simplified for arrays and functions
    }
}

// Check binary operation types
fn check_binary_op(op: i64, left_ty: Type, right_ty: Type) -> TypeResult {
    // Arithmetic operators
    if op >= 40 && op <= 44 {  // +, -, *, /, %
        match left_ty {
            Type::I32 => {
                if types_equal(right_ty, Type::I32) {
                    return TypeResult::Ok(Type::I32);
                }
            }
            Type::I64 => {
                if types_equal(right_ty, Type::I64) {
                    return TypeResult::Ok(Type::I64);
                }
            }
            _ => {}
        }
        return TypeResult::Error("Arithmetic requires matching numeric types");
    }
    
    // Comparison operators
    if op >= 48 && op <= 51 {  // <, >, <=, >=
        match left_ty {
            Type::I32 => {
                if types_equal(right_ty, Type::I32) {
                    return TypeResult::Ok(Type::Bool);
                }
            }
            Type::I64 => {
                if types_equal(right_ty, Type::I64) {
                    return TypeResult::Ok(Type::Bool);
                }
            }
            _ => {}
        }
        return TypeResult::Error("Comparison requires matching numeric types");
    }
    
    // Equality operators
    if op == 46 || op == 47 {  // ==, !=
        if types_equal(left_ty, right_ty) {
            return TypeResult::Ok(Type::Bool);
        }
        return TypeResult::Error("Equality requires matching types");
    }
    
    // Logical operators
    if op == 52 || op == 53 {  // &&, ||
        if types_equal(left_ty, Type::Bool) && types_equal(right_ty, Type::Bool) {
            return TypeResult::Ok(Type::Bool);
        }
        return TypeResult::Error("Logical operators require bool operands");
    }
    
    return TypeResult::Error("Unknown binary operator");
}

// Check unary operation types
fn check_unary_op(op: i64, operand_ty: Type) -> TypeResult {
    if op == 100 {  // Negation (-)
        match operand_ty {
            Type::I32 => return TypeResult::Ok(Type::I32),
            Type::I64 => return TypeResult::Ok(Type::I64),
            _ => return TypeResult::Error("Negation requires numeric type"),
        }
    }
    
    if op == 101 {  // Logical not (!)
        match operand_ty {
            Type::Bool => return TypeResult::Ok(Type::Bool),
            _ => return TypeResult::Error("Logical not requires bool type"),
        }
    }
    
    return TypeResult::Error("Unknown unary operator");
}

// Type check expression (simplified - returns type)
fn check_expr(mut tc: TypeChecker, expr_kind: i64) -> TypeResult {
    // This is simplified - in real implementation would traverse AST
    // For now, just demonstrate the structure
    
    // Integer literal
    if expr_kind == 2000 {
        return TypeResult::Ok(Type::I64);
    }
    
    // String literal
    if expr_kind == 2001 {
        return TypeResult::Ok(Type::String);
    }
    
    // Bool literal
    if expr_kind == 2002 {
        return TypeResult::Ok(Type::Bool);
    }
    
    // Identifier - look up in symbol table
    if expr_kind == 2003 {
        // In real implementation, would get name from AST
        return lookup_var(tc, "example_var");
    }
    
    return TypeResult::Error("Unknown expression kind");
}

// Type check statement
fn check_stmt(mut tc: TypeChecker, stmt_kind: i64) -> TypeResult {
    // Let statement
    if stmt_kind == 4000 {
        // In real implementation:
        // 1. Check initializer expression type
        // 2. If type annotation exists, verify match
        // 3. Define variable in symbol table
        return TypeResult::Ok(Type::Unit);
    }
    
    // Return statement
    if stmt_kind == 4001 {
        // Check return expression type matches function return type
        return TypeResult::Ok(Type::Unit);
    }
    
    // If statement
    if stmt_kind == 4003 {
        // Check condition is bool
        // Type check then block
        // Type check else block if exists
        return TypeResult::Ok(Type::Unit);
    }
    
    return TypeResult::Error("Unknown statement kind");
}

// Test the type checker
fn test_typechecker() {
    print("=== Testing Palladium Type Checker ===\n");
    
    let mut tc = typechecker_new();
    
    // Test 1: Variable definition and lookup
    print("Test 1: Variable definition");
    match define_var(tc, "x", Type::I64, false) {
        TypeResult::Ok(_) => print("✓ Defined variable x: i64"),
        TypeResult::Error(msg) => print(string_concat("✗ Error: ", msg)),
    }
    
    match lookup_var(tc, "x") {
        TypeResult::Ok(ty) => {
            match ty {
                Type::I64 => print("✓ Found variable x with correct type"),
                _ => print("✗ Wrong type for variable x"),
            }
        }
        TypeResult::Error(msg) => print(string_concat("✗ Error: ", msg)),
    }
    
    // Test 2: Undefined variable
    print("\nTest 2: Undefined variable");
    match lookup_var(tc, "undefined") {
        TypeResult::Ok(_) => print("✗ Should not find undefined variable"),
        TypeResult::Error(_) => print("✓ Correctly reported undefined variable"),
    }
    
    // Test 3: Type equality
    print("\nTest 3: Type equality");
    if types_equal(Type::I64, Type::I64) {
        print("✓ I64 == I64");
    }
    if !types_equal(Type::I64, Type::I32) {
        print("✓ I64 != I32");
    }
    
    // Test 4: Binary operators
    print("\nTest 4: Binary operators");
    match check_binary_op(40, Type::I64, Type::I64) {  // + operator
        TypeResult::Ok(ty) => {
            match ty {
                Type::I64 => print("✓ I64 + I64 = I64"),
                _ => print("✗ Wrong result type"),
            }
        }
        TypeResult::Error(msg) => print(string_concat("✗ Error: ", msg)),
    }
    
    match check_binary_op(48, Type::I64, Type::I64) {  // < operator
        TypeResult::Ok(ty) => {
            match ty {
                Type::Bool => print("✓ I64 < I64 = Bool"),
                _ => print("✗ Wrong result type"),
            }
        }
        TypeResult::Error(msg) => print(string_concat("✗ Error: ", msg)),
    }
    
    // Test 5: Unary operators
    print("\nTest 5: Unary operators");
    match check_unary_op(100, Type::I64) {  // - operator
        TypeResult::Ok(ty) => {
            match ty {
                Type::I64 => print("✓ -I64 = I64"),
                _ => print("✗ Wrong result type"),
            }
        }
        TypeResult::Error(msg) => print(string_concat("✗ Error: ", msg)),
    }
    
    match check_unary_op(101, Type::Bool) {  // ! operator
        TypeResult::Ok(ty) => {
            match ty {
                Type::Bool => print("✓ !Bool = Bool"),
                _ => print("✗ Wrong result type"),
            }
        }
        TypeResult::Error(msg) => print(string_concat("✗ Error: ", msg)),
    }
    
    // Test 6: Scoping
    print("\nTest 6: Scoping");
    enter_scope(tc);
    match define_var(tc, "y", Type::Bool, true) {
        TypeResult::Ok(_) => print("✓ Defined y in inner scope"),
        TypeResult::Error(msg) => print(string_concat("✗ Error: ", msg)),
    }
    
    // Both x and y should be accessible
    match lookup_var(tc, "x") {
        TypeResult::Ok(_) => print("✓ Can access outer scope variable"),
        TypeResult::Error(_) => print("✗ Cannot access outer scope"),
    }
    
    exit_scope(tc);
    // y should no longer be accessible
    match lookup_var(tc, "y") {
        TypeResult::Ok(_) => print("✗ Inner scope variable still accessible"),
        TypeResult::Error(_) => print("✓ Inner scope variable correctly removed"),
    }
    
    print("\n=== Type Checker Ready for Bootstrap! ===");
}

fn main() {
    test_typechecker();
}