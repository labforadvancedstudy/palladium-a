// String operations test for self-hosting compiler
// Tests string manipulation and built-in string functions

fn greet(name: String) -> String {
    let greeting = "Hello, ";
    let exclamation = "!";
    return string_concat(string_concat(greeting, name), exclamation);
}

fn count_chars(s: String, target: i64) -> i64 {
    let len = string_len(s);
    let mut count = 0;
    let mut i = 0;
    
    while i < len {
        if string_char_at(s, i) == target {
            count = count + 1;
        }
        i = i + 1;
    }
    
    return count;
}

fn reverse_string(s: String) -> String {
    let len = string_len(s);
    let mut result = "";
    let mut i = len - 1;
    
    while i >= 0 {
        let ch = string_char_at(s, i);
        result = string_concat(result, string_from_char(ch));
        i = i - 1;
    }
    
    return result;
}

fn main() {
    print("=== String Operations Test ===");
    
    // Test basic string operations
    let name = "Palladium";
    let greeting = greet(name);
    print(greeting);
    
    // Test string length
    let len = string_len(name);
    print(string_concat("Length of 'Palladium': ", int_to_string(len)));
    
    // Test character counting
    let text = "Hello, World!";
    let l_count = count_chars(text, 108); // ASCII 'l'
    print(string_concat("Number of 'l' in 'Hello, World!': ", int_to_string(l_count)));
    
    // Test string reversal
    let reversed = reverse_string("Palladium");
    print(string_concat("Reversed: ", reversed));
    
    // Test string building
    let mut message = "Numbers: ";
    let mut i = 1;
    while i <= 3 {
        message = string_concat(message, int_to_string(i));
        if i < 3 {
            message = string_concat(message, ", ");
        }
        i = i + 1;
    }
    print(message);
}