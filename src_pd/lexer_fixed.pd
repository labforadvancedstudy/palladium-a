// Palladium Self-Hosting Compiler - Lexer Module
// This is the tokenizer for the Palladium compiler written in Palladium
// Fixed version that works with current compiler limitations

// Token types as functions (workaround for missing const support)
fn TOK_EOF() -> i64 { return 0; }
fn TOK_ERROR() -> i64 { return 1; }

// Literals
fn TOK_IDENT() -> i64 { return 10; }
fn TOK_NUMBER() -> i64 { return 11; }
fn TOK_STRING() -> i64 { return 12; }
fn TOK_CHAR() -> i64 { return 13; }

// Keywords
fn TOK_FN() -> i64 { return 20; }
fn TOK_LET() -> i64 { return 21; }
fn TOK_MUT() -> i64 { return 22; }
fn TOK_IF() -> i64 { return 23; }
fn TOK_ELSE() -> i64 { return 24; }
fn TOK_WHILE() -> i64 { return 25; }
fn TOK_FOR() -> i64 { return 26; }
fn TOK_IN() -> i64 { return 27; }
fn TOK_RETURN() -> i64 { return 28; }

// Simple test to verify it compiles
fn test_lexer() {
    print("Token types:");
    print_int(TOK_EOF());
    print_int(TOK_IDENT());
    print_int(TOK_FN());
}

fn main() {
    test_lexer();
}