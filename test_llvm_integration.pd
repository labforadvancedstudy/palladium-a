// Test LLVM integration - simple program to verify LLVM IR generation

fn fibonacci(n: i64) -> i64 {
    if n <= 1 {
        return n;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

fn test_array() -> i64 {
    let arr: [i64; 5] = [1, 2, 3, 4, 5];
    let mut sum = 0;
    
    for i in 0..5 {
        sum = sum + arr[i];
    }
    
    return sum;
}

fn test_while_loop() -> i64 {
    let mut i = 0;
    let mut sum = 0;
    
    while i < 10 {
        sum = sum + i;
        i = i + 1;
    }
    
    return sum;
}

fn main() -> i64 {
    // Test fibonacci
    let fib7 = fibonacci(7);
    print_int(fib7);  // Should print 13
    
    // Test array
    let array_sum = test_array();
    print_int(array_sum);  // Should print 15
    
    // Test while loop
    let while_sum = test_while_loop();
    print_int(while_sum);  // Should print 45
    
    return 0;
}