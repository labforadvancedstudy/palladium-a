fn hash_int(key: i64) -> i64 {
    let hash = key % 50;
    if hash < 0 {
        return 0 - hash;
    }
    return hash;
}

fn find_slot(keys: [i64; 50], occupied: [bool; 50], key: i64) -> i64 {
    let hash_idx = hash_int(key);
    let mut idx = hash_idx;
    let mut attempts = 0;
    
    while attempts < 50 {
        if occupied[idx] == false || keys[idx] == key {
            return idx;
        }
        idx = (idx + 1) % 50;
        attempts = attempts + 1;
    }
    
    return -1;
}

fn test_int_map() {
    print("=== Integer Map Tests ===\n");
    
    let mut keys: [i64; 50] = [0; 50];
    let mut values: [i64; 50] = [0; 50];
    let mut occupied: [bool; 50] = [false; 50];
    let mut size = 0;
    
    print("Test 1: Basic operations");
    
    let slot1 = find_slot(keys, occupied, 42);
    if slot1 >= 0 {
        if occupied[slot1] == false {
            size = size + 1;
        }
        keys[slot1] = 42;
        values[slot1] = 100;
        occupied[slot1] = true;
    }
    
    let slot2 = find_slot(keys, occupied, 17);
    if slot2 >= 0 {
        if occupied[slot2] == false {
            size = size + 1;
        }
        keys[slot2] = 17;
        values[slot2] = 200;
        occupied[slot2] = true;
    }
    
    let slot3 = find_slot(keys, occupied, 99);
    if slot3 >= 0 {
        if occupied[slot3] == false {
            size = size + 1;
        }
        keys[slot3] = 99;
        values[slot3] = 300;
        occupied[slot3] = true;
    }
    
    let get1 = find_slot(keys, occupied, 42);
    let get2 = find_slot(keys, occupied, 17);
    let get3 = find_slot(keys, occupied, 99);
    
    if get1 >= 0 && get2 >= 0 && get3 >= 0 {
        if values[get1] == 100 && values[get2] == 200 && values[get3] == 300 {
            print("âœ“ Basic insertion and retrieval works");
        } else {
            print("âœ— Basic operations failed");
        }
    } else {
        print("âœ— Failed to find keys");
    }
    
    if size == 3 {
        print("âœ“ Size tracking works");
    } else {
        print("âœ— Size tracking failed");
        print_int(size);
    }
    
    let update_slot = find_slot(keys, occupied, 42);
    if update_slot >= 0 {
        values[update_slot] = 999;
        let check_slot = find_slot(keys, occupied, 42);
        if check_slot >= 0 && values[check_slot] == 999 {
            print("âœ“ Updating existing key works");
        } else {
            print("âœ— Update failed");
        }
    }
    
    print("\nInteger Map Tests Complete!");
    print("Total entries:");
    print_int(size);
}

fn main() {
    test_int_map();
    print("\nHashMap functionality demonstrated! ðŸŽ‰");
}