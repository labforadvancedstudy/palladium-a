// StringBuilder - Efficient string concatenation for compiler
// Essential for code generation without excessive allocations

struct StringBuilder {
    buffer: [i64; 1024],  // Character buffer (using i64 for chars)
    length: i64,          // Current length
    capacity: i64,        // Buffer capacity
}

// Create a new StringBuilder
fn sb_new() -> StringBuilder {
    return StringBuilder {
        buffer: [0; 1024],
        length: 0,
        capacity: 1024
    };
}

// Append a character to the builder
fn sb_append_char(mut sb: StringBuilder, ch: i64) {
    if sb.length < sb.capacity {
        sb.buffer[sb.length] = ch;
        sb.length = sb.length + 1;
    }
}

// Append a string to the builder
fn sb_append(mut sb: StringBuilder, s: String) {
    let len = string_len(s);
    for i in 0..len {
        let ch = string_char_at(s, i);
        if ch >= 0 {
            sb_append_char(sb, ch);
        }
    }
}

// Append an integer to the builder
fn sb_append_int(mut sb: StringBuilder, n: i64) {
    if n == 0 {
        sb_append_char(sb, 48);  // '0'
        return;
    }
    
    let mut num = n;
    let mut negative = false;
    
    if num < 0 {
        negative = true;
        num = 0 - num;  // Work around: no unary minus yet
    }
    
    // Extract digits in reverse order
    let mut digits: [i64; 20] = [0; 20];
    let mut digit_count = 0;
    
    while num > 0 {
        digits[digit_count] = num % 10;
        num = num / 10;
        digit_count = digit_count + 1;
    }
    
    // Add negative sign if needed
    if negative {
        sb_append_char(sb, 45);  // '-'
    }
    
    // Add digits in correct order
    for j in 0..digit_count {
        let idx = digit_count - 1 - j;
        sb_append_char(sb, digits[idx] + 48);  // Convert to ASCII
    }
}

// Append a newline
fn sb_append_newline(mut sb: StringBuilder) {
    sb_append_char(sb, 10);  // '\n'
}

// Clear the builder
fn sb_clear(mut sb: StringBuilder) {
    sb.length = 0;
}

// Convert to string
fn sb_to_string(sb: StringBuilder) -> String {
    let mut result = "";
    for i in 0..sb.length {
        result = string_concat(result, string_from_char(sb.buffer[i]));
    }
    return result;
}

// Get current length
fn sb_len(sb: StringBuilder) -> i64 {
    return sb.length;
}

// Check if empty
fn sb_is_empty(sb: StringBuilder) -> bool {
    return sb.length == 0;
}

// Demo and test
fn test_string_builder() {
    print("=== Testing StringBuilder ===\n");
    
    // Test 1: Basic append
    print("Test 1: Basic append");
    let mut sb = sb_new();
    sb_append(sb, "Hello");
    sb_append_char(sb, 32);  // space
    sb_append(sb, "World");
    let result1 = sb_to_string(sb);
    print("Result:");
    print(result1);
    
    // Test 2: Integer append
    print("\nTest 2: Integer append");
    sb_clear(sb);
    sb_append(sb, "Count: ");
    sb_append_int(sb, 42);
    sb_append(sb, ", Negative: ");
    sb_append_int(sb, 0 - 123);
    sb_append(sb, ", Zero: ");
    sb_append_int(sb, 0);
    let result2 = sb_to_string(sb);
    print("Result:");
    print(result2);
    
    // Test 3: Multi-line building
    print("\nTest 3: Multi-line code generation");
    sb_clear(sb);
    sb_append(sb, "fn main() {");
    sb_append_newline(sb);
    sb_append(sb, "    let x = ");
    sb_append_int(sb, 10);
    sb_append_char(sb, 59);  // ';'
    sb_append_newline(sb);
    sb_append(sb, "    print_int(x);");
    sb_append_newline(sb);
    sb_append(sb, "}");
    let result3 = sb_to_string(sb);
    print("Generated code:");
    print(result3);
    
    // Test 4: Performance comparison
    print("\nTest 4: Performance demo");
    sb_clear(sb);
    
    // Build a large string efficiently
    for i in 0..50 {
        sb_append(sb, "Line ");
        sb_append_int(sb, i);
        sb_append(sb, ": Hello from StringBuilder!");
        sb_append_newline(sb);
    }
    
    print("Built string with length:");
    print_int(sb_len(sb));
    
    // Show first few lines
    let large_result = sb_to_string(sb);
    print("First 100 chars:");
    print(string_substring(large_result, 0, 100));
    
    print("\n=== StringBuilder Essential for Code Generation! ===");
}

fn main() {
    test_string_builder();
}