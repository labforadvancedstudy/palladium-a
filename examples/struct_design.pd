// Struct design for Palladium
// This is a design document, not yet compilable

// Basic struct definition
struct Point {
    x: i64,
    y: i64,
}

// Struct with different types
struct Person {
    name: String,
    age: i64,
    active: bool,
}

// Nested structs
struct Rectangle {
    top_left: Point,
    bottom_right: Point,
}

fn main() {
    // Struct instantiation
    let p1 = Point { x: 10, y: 20 };
    
    // Accessing fields
    print_int(p1.x);
    print_int(p1.y);
    
    // Mutable struct
    let mut p2 = Point { x: 0, y: 0 };
    p2.x = 5;
    p2.y = 10;
    
    // Struct as function parameter
    let distance = calculate_distance(p1, p2);
    
    // Struct as return value
    let midpoint = find_midpoint(p1, p2);
    
    // Nested struct usage
    let rect = Rectangle {
        top_left: Point { x: 0, y: 10 },
        bottom_right: Point { x: 20, y: 0 },
    };
    
    // Array of structs
    let points = [
        Point { x: 1, y: 1 },
        Point { x: 2, y: 2 },
        Point { x: 3, y: 3 },
    ];
    
    // Iterating over array of structs
    for p in points {
        print_int(p.x);
        print_int(p.y);
    }
}

// Functions working with structs
fn calculate_distance(p1: Point, p2: Point) -> i64 {
    let dx = p2.x - p1.x;
    let dy = p2.y - p1.y;
    // Simplified distance (Manhattan distance)
    return dx + dy;
}

fn find_midpoint(p1: Point, p2: Point) -> Point {
    return Point {
        x: (p1.x + p2.x) / 2,
        y: (p1.y + p2.y) / 2,
    };
}