// Showcase of Palladium's latest features
// Demonstrates: modules, generics, string concatenation

import std::math;
import std::string;

// Generic identity function
fn identity<T>(value: T) -> T {
    return value;
}

// Generic pair selector
fn select_first<T, U>(first: T, second: U) -> T {
    return first;
}

fn select_second<T, U>(first: T, second: U) -> U {
    return second;
}

// String builder using concatenation
fn build_report(title: String, value: i64) -> String {
    let separator = "=" + "=" + "=" + "=" + "=";
    let header = separator + " " + title + " " + separator;
    let content = "Value: " + int_to_string(value);
    let squared = "Squared: " + int_to_string(pd_pow(value, 2));
    
    return header + "\n" + content + "\n" + squared;
}

fn main() {
    // Test generics with different types
    let num = identity(42);
    let text = identity("Palladium");
    let flag = identity(true);
    
    print("Generic identity tests:");
    print_int(num);
    print(text);
    if flag {
        print("Boolean identity works!");
    }
    
    // Test generic pair functions
    let name = select_first("Alice", 25);
    let age = select_second("Bob", 30);
    print("\nPair selection:");
    print("Name: " + name);
    print("Age: " + int_to_string(age));
    
    // Test string operations from module
    let input = "  Palladium Language  ";
    let cleaned = trim(input);
    
    if starts_with(cleaned, "Palladium") {
        print("\nIt's about Palladium!");
    }
    
    if contains(cleaned, "Lang") {
        print("Found 'Lang' in the string");
    }
    
    // Build a formatted report
    print("\n" + build_report("Statistics", 7));
    
    // Math operations
    let a = pd_abs(-100);
    let b = max(a, 50);
    let c = min(b, 75);
    
    print("\nMath results:");
    print("abs(-100) = " + int_to_string(a));
    print("max(100, 50) = " + int_to_string(b));
    print("min(100, 75) = " + int_to_string(c));
}