// Testing pattern matching with enums

enum Option {
    Some(i64),
    None,
}

enum Result {
    Ok(i64),
    Err(String),
}

fn test_option(opt: Option) {
    match opt {
        Option::Some(value) => {
            print("Got value:");
            print_int(value);
        }
        Option::None => {
            print("Got None");
        }
    }
}

fn test_result(res: Result) {
    match res {
        Result::Ok(value) => {
            print("Success:");
            print_int(value);
        }
        Result::Err(msg) => {
            print("Error:");
            print(msg);
        }
    }
}

fn test_wildcard_and_binding() {
    let x = 42;
    
    match x {
        0 => print("Zero"),
        n => {
            print("Non-zero:");
            print_int(n);
        }
    }
    
    // Wildcard pattern
    match x {
        _ => print("Matched anything"),
    }
}

fn main() {
    // Test Option enum
    let some_value = Option::Some(100);
    test_option(some_value);
    
    let no_value = Option::None;
    test_option(no_value);
    
    // Test Result enum
    let ok_result = Result::Ok(200);
    test_result(ok_result);
    
    let err_result = Result::Err("Something went wrong");
    test_result(err_result);
    
    // Test wildcard and binding patterns
    test_wildcard_and_binding();
    
    print("Pattern matching test complete!");
}