// Tests for string utility functions

// Include string utilities inline (no import system yet)
// ... (string utils functions would be included here in real use)

// For testing, I'll define simpler versions

fn string_trim(s: String) -> String {
    // Simplified: only trim spaces
    let len = string_len(s);
    if len == 0 {
        return s;
    }
    
    // Find start
    let mut start = 0;
    while start < len {
        if string_char_at(s, start) != 32 {
            break;
        }
        start = start + 1;
    }
    
    if start == len {
        return "";
    }
    
    // Find end
    let mut end = len - 1;
    while end > start {
        if string_char_at(s, end) != 32 {
            break;
        }
        end = end - 1;
    }
    
    return string_substring(s, start, end + 1);
}

fn string_starts_with(s: String, prefix: String) -> bool {
    let s_len = string_len(s);
    let prefix_len = string_len(prefix);
    
    if prefix_len > s_len {
        return false;
    }
    
    let mut i = 0;
    while i < prefix_len {
        if string_char_at(s, i) != string_char_at(prefix, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

fn string_ends_with(s: String, suffix: String) -> bool {
    let s_len = string_len(s);
    let suffix_len = string_len(suffix);
    
    if suffix_len > s_len {
        return false;
    }
    
    let start = s_len - suffix_len;
    let mut i = 0;
    
    while i < suffix_len {
        if string_char_at(s, start + i) != string_char_at(suffix, i) {
            return false;
        }
        i = i + 1;
    }
    
    return true;
}

fn string_to_upper(s: String) -> String {
    let len = string_len(s);
    let mut result = "";
    let mut i = 0;
    
    while i < len {
        let c = string_char_at(s, i);
        // Check if lowercase letter (97-122 are 'a'-'z')
        if c >= 97 {
            if c <= 122 {
                // Convert to uppercase by subtracting 32
                let upper = c - 32;
                result = string_concat(result, string_from_char(upper));
            } else {
                result = string_concat(result, string_from_char(c));
            }
        } else {
            result = string_concat(result, string_from_char(c));
        }
        i = i + 1;
    }
    
    return result;
}

fn string_reverse(s: String) -> String {
    let len = string_len(s);
    if len <= 1 {
        return s;
    }
    
    let mut result = "";
    let mut i = len - 1;
    
    while i >= 0 {
        let c = string_char_at(s, i);
        result = string_concat(result, string_from_char(c));
        if i == 0 {
            break;
        }
        i = i - 1;
    }
    
    return result;
}

// Test functions
fn test_string_trim() {
    print("=== Testing string_trim ===");
    
    // Test basic trim
    let s1 = "  hello  ";
    let trimmed: String = string_trim(s1);
    if string_eq(trimmed, "hello") {
        print("Basic trim: PASS");
    }
    
    // Test no whitespace
    let s2 = "world";
    let trimmed2: String = string_trim(s2);
    if string_eq(trimmed2, "world") {
        print("No whitespace: PASS");
    }
    
    // Test all whitespace
    let s3 = "    ";
    let trimmed3: String = string_trim(s3);
    if string_eq(trimmed3, "") {
        print("All whitespace: PASS");
    }
}

fn test_string_starts_ends_with() {
    print("\n=== Testing starts_with/ends_with ===");
    
    let text = "Hello, World!";
    
    // Test starts_with
    if string_starts_with(text, "Hello") {
        print("Starts with 'Hello': PASS");
    }
    
    if string_starts_with(text, "World") == false {
        print("Doesn't start with 'World': PASS");
    }
    
    if string_starts_with(text, "") {
        print("Starts with empty: PASS");
    }
    
    // Test ends_with
    if string_ends_with(text, "World!") {
        print("Ends with 'World!': PASS");
    }
    
    if string_ends_with(text, "Hello") == false {
        print("Doesn't end with 'Hello': PASS");
    }
}

fn test_string_case() {
    print("\n=== Testing case conversion ===");
    
    // Test to_upper
    let lower = "hello world 123!";
    let upper: String = string_to_upper(lower);
    if string_eq(upper, "HELLO WORLD 123!") {
        print("To uppercase: PASS");
    }
    
    // Test mixed case
    let mixed = "HeLLo WoRLd";
    let upper2: String = string_to_upper(mixed);
    if string_eq(upper2, "HELLO WORLD") {
        print("Mixed to upper: PASS");
    }
}

fn test_string_reverse() {
    print("\n=== Testing string_reverse ===");
    
    // Test basic reverse
    let s1 = "hello";
    let rev1: String = string_reverse(s1);
    if string_eq(rev1, "olleh") {
        print("Basic reverse: PASS");
    }
    
    // Test single char
    let s2 = "a";
    let rev2: String = string_reverse(s2);
    if string_eq(rev2, "a") {
        print("Single char: PASS");
    }
    
    // Test empty
    let s3 = "";
    let rev3: String = string_reverse(s3);
    if string_eq(rev3, "") {
        print("Empty string: PASS");
    }
    
    // Test palindrome
    let s4 = "racecar";
    let rev4: String = string_reverse(s4);
    if string_eq(rev4, "racecar") {
        print("Palindrome: PASS");
    }
}

fn test_string_building() {
    print("\n=== Testing string building ===");
    
    // Build a string character by character
    let mut result = "";
    result = string_concat(result, "H");
    result = string_concat(result, "e");
    result = string_concat(result, "l");
    result = string_concat(result, "l");
    result = string_concat(result, "o");
    
    if string_eq(result, "Hello") {
        print("Character building: PASS");
    }
    
    // Build with separators
    let word1 = "apple";
    let word2 = "banana";
    let word3 = "cherry";
    
    let mut joined = string_concat(word1, ", ");
    joined = string_concat(joined, word2);
    joined = string_concat(joined, ", ");
    joined = string_concat(joined, word3);
    
    if string_eq(joined, "apple, banana, cherry") {
        print("Join with separator: PASS");
    }
}

fn test_practical_example() {
    print("\n=== Testing practical example ===");
    
    // Parse a simple CSV line
    let csv = "John,Doe,30";
    
    // Find first comma
    let mut comma_pos = -1;
    let mut i = 0;
    let len = string_len(csv);
    
    while i < len {
        if string_char_at(csv, i) == 44 { // comma
            comma_pos = i;
            break;
        }
        i = i + 1;
    }
    
    if comma_pos != -1 {
        let first_name: String = string_substring(csv, 0, comma_pos);
        if string_eq(first_name, "John") {
            print("Parse first field: PASS");
        }
    }
    
    // Build a formatted string
    let name = "Alice";
    let age = "25";
    let mut msg = string_concat("Name: ", name);
    msg = string_concat(msg, ", Age: ");
    msg = string_concat(msg, age);
    
    if string_eq(msg, "Name: Alice, Age: 25") {
        print("Format string: PASS");
    }
}

fn main() {
    print("=== String Utils Tests ===\n");
    
    test_string_trim();
    test_string_starts_ends_with();
    test_string_case();
    test_string_reverse();
    test_string_building();
    test_practical_example();
    
    print("\n=== All tests complete ===");
}