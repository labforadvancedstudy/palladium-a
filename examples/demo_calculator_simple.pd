// Simple calculator demo without structs/enums

// Calculate factorial
fn factorial(n: i64) -> i64 {
    if n < 0 {
        print("Error: Factorial of negative number");
        return -1;
    }
    
    if n == 0 {
        return 1;
    }
    if n == 1 {
        return 1;
    }
    
    let mut result = 1;
    let mut i = 2;
    while i <= n {
        result = result * i;
        i = i + 1;
    }
    
    return result;
}

// Calculate power (a^b)
fn power(base: i64, exp: i64) -> i64 {
    if exp < 0 {
        print("Error: Negative exponent not supported");
        return -1;
    }
    
    if exp == 0 {
        return 1;
    }
    
    let mut result = 1;
    let mut i = 0;
    while i < exp {
        result = result * base;
        i = i + 1;
    }
    
    return result;
}

// Greatest common divisor
fn gcd(a: i64, b: i64) -> i64 {
    let mut x = a;
    let mut y = b;
    
    // Make positive
    if x < 0 {
        x = 0 - x;
    }
    if y < 0 {
        y = 0 - y;
    }
    
    while y != 0 {
        let temp = y;
        y = x % y;
        x = temp;
    }
    
    return x;
}

// Check if prime
fn is_prime(n: i64) -> bool {
    if n <= 1 {
        return false;
    }
    
    if n <= 3 {
        return true;
    }
    
    if n % 2 == 0 {
        return false;
    }
    if n % 3 == 0 {
        return false;
    }
    
    let mut i = 5;
    while i * i <= n {
        if n % i == 0 {
            return false;
        }
        if n % (i + 2) == 0 {
            return false;
        }
        i = i + 6;
    }
    
    return true;
}

// Calculate Fibonacci number
fn fibonacci(n: i64) -> i64 {
    if n < 0 {
        print("Error: Negative Fibonacci index");
        return -1;
    }
    
    if n == 0 {
        return 0;
    }
    
    if n == 1 {
        return 1;
    }
    
    let mut a = 0;
    let mut b = 1;
    let mut i = 2;
    
    while i <= n {
        let temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    
    return b;
}

// Demo arithmetic operations
fn demo_arithmetic() {
    print("=== Arithmetic Operations ===");
    
    let a = 42;
    let b = 7;
    
    print("Numbers: 42 and 7");
    print("Addition: 42 + 7 =");
    print_int(a + b);
    print("Subtraction: 42 - 7 =");
    print_int(a - b);
    print("Multiplication: 42 * 7 =");
    print_int(a * b);
    print("Division: 42 / 7 =");
    print_int(a / b);
    print("Modulo: 42 % 7 =");
    print_int(a % b);
}

// Demo mathematical functions
fn demo_math_functions() {
    print("\n=== Mathematical Functions ===");
    
    // Factorial
    print("Factorials:");
    print("5! =");
    print_int(factorial(5));
    print("10! =");
    print_int(factorial(10));
    
    // Powers
    print("\nPowers of 2:");
    let mut i = 0;
    while i <= 10 {
        print_int(power(2, i));
        i = i + 1;
    }
    
    // GCD
    print("\nGCD examples:");
    print("GCD(48, 18) =");
    print_int(gcd(48, 18));
    print("GCD(100, 35) =");
    print_int(gcd(100, 35));
}

// Demo prime numbers
fn demo_primes() {
    print("\n=== Prime Numbers ===");
    print("First 25 prime numbers:");
    
    let mut count = 0;
    let mut n = 2;
    
    while count < 25 {
        if is_prime(n) {
            print_int(n);
            count = count + 1;
        }
        n = n + 1;
    }
}

// Demo Fibonacci sequence
fn demo_fibonacci() {
    print("\n=== Fibonacci Sequence ===");
    print("First 20 Fibonacci numbers:");
    
    let mut i = 0;
    while i < 20 {
        print_int(fibonacci(i));
        i = i + 1;
    }
}

// Solve quadratic equation ax^2 + bx + c = 0
// Returns discriminant
fn quadratic_discriminant(a: i64, b: i64, c: i64) -> i64 {
    return b * b - 4 * a * c;
}

// Demo quadratic equations
fn demo_quadratic() {
    print("\n=== Quadratic Equations ===");
    
    // x^2 - 5x + 6 = 0
    let d1 = quadratic_discriminant(1, -5, 6);
    print("x^2 - 5x + 6 = 0");
    print("Discriminant =");
    print_int(d1);
    if d1 >= 0 {
        print("Has real roots");
    } else {
        print("Has complex roots");
    }
    
    // x^2 + 2x + 5 = 0
    let d2 = quadratic_discriminant(1, 2, 5);
    print("\nx^2 + 2x + 5 = 0");
    print("Discriminant =");
    print_int(d2);
    if d2 >= 0 {
        print("Has real roots");
    } else {
        print("Has complex roots");
    }
}

// Calculate sum of digits
fn sum_of_digits(n: i64) -> i64 {
    let mut num = n;
    if num < 0 {
        num = 0 - num;
    }
    
    let mut sum = 0;
    while num > 0 {
        sum = sum + (num % 10);
        num = num / 10;
    }
    
    return sum;
}

// Check if number is palindrome
fn is_palindrome(n: i64) -> bool {
    if n < 0 {
        return false;
    }
    
    let mut reversed = 0;
    let mut temp = n;
    
    while temp > 0 {
        reversed = reversed * 10 + (temp % 10);
        temp = temp / 10;
    }
    
    return n == reversed;
}

// Demo number properties
fn demo_number_properties() {
    print("\n=== Number Properties ===");
    
    let nums = [12345, 121, 1234321, 456, 9009];
    let mut i = 0;
    
    while i < 5 {
        let n = nums[i];
        print("\nNumber:");
        print_int(n);
        print("Sum of digits:");
        print_int(sum_of_digits(n));
        if is_palindrome(n) {
            print("Is palindrome: Yes");
        } else {
            print("Is palindrome: No");
        }
        i = i + 1;
    }
}

fn main() {
    print("=== Palladium Calculator Demo ===\n");
    
    demo_arithmetic();
    demo_math_functions();
    demo_primes();
    demo_fibonacci();
    demo_quadratic();
    demo_number_properties();
    
    print("\n=== Calculator demo complete ===");
}