// Basic trait example in Palladium
// Demonstrates trait definition and implementation

// Define a simple Display trait
trait Display {
    fn fmt(&self) -> String;
}

// Define a Debug trait with default implementation
trait Debug {
    fn debug(&self) -> String {
        return "<debug>";
    }
}

// Define a struct
struct Point {
    x: i64,
    y: i64,
}

// Implement Display for Point
impl Display for Point {
    fn fmt(&self) -> String {
        return format!("Point({}, {})", self.x, self.y);
    }
}

// Implement Debug for Point (using default)
impl Debug for Point {
    // Uses default implementation
}

// Generic function with trait bound
fn print_it<T: Display>(item: &T) {
    print(item.fmt());
}

// Function that takes trait object
fn print_any(item: &dyn Display) {
    print(item.fmt());
}

fn main() {
    let p = Point { x: 10, y: 20 };
    
    // Call trait method directly
    print(p.fmt());
    
    // Use generic function
    print_it(&p);
    
    // Use trait object
    print_any(&p);
    
    // Use Debug trait
    print(p.debug());
}