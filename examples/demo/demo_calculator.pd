// Simple calculator demo showcasing Palladium capabilities

// Calculator operations using Result type for error handling
enum CalcResult {
    Ok(i64),
    Error(String),
}

fn calc_result_is_ok(r: CalcResult) -> bool {
    match r {
        CalcResult::Ok(_) => true,
        CalcResult::Error(_) => false,
    }
}

fn calc_result_unwrap(r: CalcResult) -> i64 {
    match r {
        CalcResult::Ok(_) => {
            // Value extraction limitation - return placeholder
            return 0; // Would be the actual value
        }
        CalcResult::Error(_) => {
            print("Calculator error occurred");
            return 0;
        }
    }
}

// Safe division with error handling
fn safe_divide(a: i64, b: i64) -> CalcResult {
    if b == 0 {
        return CalcResult::Error("Division by zero");
    }
    return CalcResult::Ok(a / b);
}

// Calculate factorial
fn factorial(n: i64) -> i64 {
    if n < 0 {
        print("Error: Factorial of negative number");
        return -1;
    }
    
    if n == 0 {
        return 1;
    }
    if n == 1 {
        return 1;
    }
    
    let mut result = 1;
    let mut i = 2;
    while i <= n {
        result = result * i;
        i = i + 1;
    }
    
    return result;
}

// Calculate power (a^b)
fn power(base: i64, exp: i64) -> i64 {
    if exp < 0 {
        print("Error: Negative exponent not supported");
        return -1;
    }
    
    if exp == 0 {
        return 1;
    }
    
    let mut result = 1;
    let mut i = 0;
    while i < exp {
        result = result * base;
        i = i + 1;
    }
    
    return result;
}

// Greatest common divisor
fn gcd(a: i64, b: i64) -> i64 {
    let mut x = a;
    let mut y = b;
    
    // Make positive
    if x < 0 {
        x = 0 - x;
    }
    if y < 0 {
        y = 0 - y;
    }
    
    while y != 0 {
        let temp = y;
        y = x % y;
        x = temp;
    }
    
    return x;
}

// Check if prime
fn is_prime(n: i64) -> bool {
    if n <= 1 {
        return false;
    }
    
    if n <= 3 {
        return true;
    }
    
    if n % 2 == 0 {
        return false;
    }
    if n % 3 == 0 {
        return false;
    }
    
    let mut i = 5;
    while i * i <= n {
        if n % i == 0 {
            return false;
        }
        if n % (i + 2) == 0 {
            return false;
        }
        i = i + 6;
    }
    
    return true;
}

// Calculate Fibonacci number
fn fibonacci(n: i64) -> i64 {
    if n < 0 {
        print("Error: Negative Fibonacci index");
        return -1;
    }
    
    if n == 0 {
        return 0;
    }
    
    if n == 1 {
        return 1;
    }
    
    let mut a = 0;
    let mut b = 1;
    let mut i = 2;
    
    while i <= n {
        let temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    
    return b;
}

// Demo arithmetic operations
fn demo_arithmetic() {
    print("=== Arithmetic Operations ===");
    
    let a = 42;
    let b = 7;
    
    print("Numbers: 42 and 7");
    print("Addition:");
    print_int(a + b);
    print("Subtraction:");
    print_int(a - b);
    print("Multiplication:");
    print_int(a * b);
    print("Division:");
    print_int(a / b);
    print("Modulo:");
    print_int(a % b);
}

// Demo special functions
fn demo_special_functions() {
    print("\n=== Special Functions ===");
    
    // Factorial
    print("Factorial of 5:");
    print_int(factorial(5));
    
    print("Factorial of 10:");
    print_int(factorial(10));
    
    // Power
    print("\nPowers of 2:");
    for i in [0, 1, 2, 3, 4, 5, 6, 7, 8] {
        print_int(power(2, i));
    }
    
    // GCD
    print("\nGCD of 48 and 18:");
    print_int(gcd(48, 18));
    
    print("GCD of 100 and 35:");
    print_int(gcd(100, 35));
}

// Demo prime checking
fn demo_primes() {
    print("\n=== Prime Numbers ===");
    print("First 20 primes:");
    
    let mut count = 0;
    let mut n = 2;
    
    while count < 20 {
        if is_prime(n) {
            print_int(n);
            count = count + 1;
        }
        n = n + 1;
    }
}

// Demo Fibonacci sequence
fn demo_fibonacci() {
    print("\n=== Fibonacci Sequence ===");
    print("First 15 Fibonacci numbers:");
    
    for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] {
        print_int(fibonacci(i));
    }
}

// Expression evaluator (simple)
fn evaluate_expression() {
    print("\n=== Expression Evaluator ===");
    
    // Example: (10 + 5) * 3 - 20 / 4
    let step1 = 10 + 5;  // 15
    let step2 = step1 * 3;  // 45
    let step3 = 20 / 4;  // 5
    let result = step2 - step3;  // 40
    
    print("Expression: (10 + 5) * 3 - 20 / 4");
    print("Result:");
    print_int(result);
    
    // Complex expression with error handling
    print("\nSafe division test:");
    let div_result = safe_divide(100, 5);
    if calc_result_is_ok(div_result) {
        print("100 / 5 = 20 (Success)");
    }
    
    let div_by_zero = safe_divide(10, 0);
    if calc_result_is_ok(div_by_zero) == false {
        print("10 / 0 = Error (Correctly caught)");
    }
}

fn main() {
    print("=== Palladium Calculator Demo ===\n");
    
    demo_arithmetic();
    demo_special_functions();
    demo_primes();
    demo_fibonacci();
    evaluate_expression();
    
    print("\n=== Calculator demo complete ===");
}