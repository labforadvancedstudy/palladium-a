// Text processor demo showcasing string manipulation and file I/O

// Count words in a string (simple space-separated)
fn count_words(text: String) -> i64 {
    let len = string_len(text);
    if len == 0 {
        return 0;
    }
    
    let mut count = 0;
    let mut in_word = false;
    let mut i = 0;
    
    while i < len {
        let c = string_char_at(text, i);
        
        if c == 32 { // space
            in_word = false;
        } else {
            if in_word == false {
                count = count + 1;
                in_word = true;
            }
        }
        
        i = i + 1;
    }
    
    return count;
}

// Count lines in a string
fn count_lines(text: String) -> i64 {
    let len = string_len(text);
    if len == 0 {
        return 0;
    }
    
    let mut count = 1; // At least one line
    let mut i = 0;
    
    while i < len {
        if string_char_at(text, i) == 10 { // newline
            count = count + 1;
        }
        i = i + 1;
    }
    
    return count;
}

// Simple text statistics
fn analyze_text(text: String) {
    print("=== Text Analysis ===");
    
    print("Length (characters):");
    print_int(string_len(text));
    
    print("Words (space-separated):");
    print_int(count_words(text));
    
    print("Lines:");
    print_int(count_lines(text));
    
    // Count specific characters
    let mut spaces = 0;
    let mut digits = 0;
    let mut letters = 0;
    let mut i = 0;
    let len = string_len(text);
    
    while i < len {
        let c = string_char_at(text, i);
        
        if c == 32 {
            spaces = spaces + 1;
        }
        
        if char_is_digit(c) {
            digits = digits + 1;
        }
        
        if char_is_alpha(c) {
            letters = letters + 1;
        }
        
        i = i + 1;
    }
    
    print("Spaces:");
    print_int(spaces);
    print("Digits:");
    print_int(digits);
    print("Letters:");
    print_int(letters);
}

// Demo basic string operations
fn demo_string_basics() {
    print("=== Basic String Operations ===");
    
    let s1 = "Hello";
    let s2 = "World";
    
    // Concatenation
    let mut greeting = string_concat(s1, ", ");
    greeting = string_concat(greeting, s2);
    greeting = string_concat(greeting, "!");
    print("Concatenation:");
    print(greeting);
    
    // Length
    print("Length of 'Hello, World!':");
    print_int(string_len(greeting));
    
    // Substring
    let sub = string_substring(greeting, 0, 5);
    print("First 5 characters:");
    print(sub);
    
    let sub2 = string_substring(greeting, 7, 12);
    print("Characters 7-12:");
    print(sub2);
    
    // Character access
    print("Character at position 0:");
    print_int(string_char_at(greeting, 0));
    print("(ASCII code for 'H')");
}

// Demo string comparison
fn demo_string_comparison() {
    print("\n=== String Comparison ===");
    
    let s1 = "apple";
    let s2 = "apple";
    let s3 = "banana";
    
    if string_eq(s1, s2) {
        print("'apple' equals 'apple': Yes");
    }
    
    if string_eq(s1, s3) {
        print("'apple' equals 'banana': Yes");
    } else {
        print("'apple' equals 'banana': No");
    }
    
    // Case sensitivity
    let s4 = "Apple";
    if string_eq(s1, s4) {
        print("'apple' equals 'Apple': Yes");
    } else {
        print("'apple' equals 'Apple': No (case sensitive)");
    }
}

// Demo character functions
fn demo_char_functions() {
    print("\n=== Character Functions ===");
    
    // Test different characters
    let test_chars = [65, 97, 48, 32, 33]; // 'A', 'a', '0', ' ', '!'
    let mut i = 0;
    
    while i < 5 {
        let c = test_chars[i];
        print("\nCharacter:");
        print(string_from_char(c));
        print("ASCII code:");
        print_int(c);
        
        if char_is_alpha(c) {
            print("Is alphabetic: Yes");
        } else {
            print("Is alphabetic: No");
        }
        
        if char_is_digit(c) {
            print("Is digit: Yes");
        } else {
            print("Is digit: No");
        }
        
        i = i + 1;
    }
}

// Build a simple CSV line
fn build_csv_line(name: String, age: String, city: String) -> String {
    let mut line: String = name;
    line = string_concat(line, ",");
    line = string_concat(line, age);
    line = string_concat(line, ",");
    line = string_concat(line, city);
    return line;
}

// Demo practical string building
fn demo_string_building() {
    print("\n=== String Building ===");
    
    // Build CSV data
    print("Building CSV data:");
    
    let header: String = build_csv_line("Name", "Age", "City");
    let row1: String = build_csv_line("Alice", "25", "New York");
    let row2: String = build_csv_line("Bob", "30", "San Francisco");
    let row3: String = build_csv_line("Charlie", "35", "Chicago");
    
    print(header);
    print(row1);
    print(row2);
    print(row3);
    
    // Build a formatted message
    let name = "John";
    let score = "95";
    
    let mut msg = "Student ";
    msg = string_concat(msg, name);
    msg = string_concat(msg, " scored ");
    msg = string_concat(msg, score);
    msg = string_concat(msg, " points!");
    
    print("\nFormatted message:");
    print(msg);
}

// Demo file operations
fn demo_file_operations() {
    print("\n=== File Operations ===");
    
    // Create a test file
    let filename = "test_output.txt";
    let handle = file_open(filename);
    
    if handle == -1 {
        print("Error: Could not create file");
        return;
    }
    
    print("File created successfully");
    
    // Write some content
    file_write(handle, "Hello from Palladium!\n");
    file_write(handle, "This is a test file.\n");
    file_write(handle, "Line 3: Testing file I/O.\n");
    
    // Write some data
    let mut i = 1;
    while i <= 5 {
        let mut line = "Data line ";
        line = string_concat(line, string_from_char(48 + i)); // '1' to '5'
        line = string_concat(line, "\n");
        file_write(handle, line);
        i = i + 1;
    }
    
    file_close(handle);
    print("File written and closed");
    
    // Read it back
    if file_exists(filename) {
        print("\nFile exists, reading content:");
        
        let read_handle = file_open(filename);
        if read_handle != -1 {
            let content = file_read_all(read_handle);
            file_close(read_handle);
            
            print("=== File Content ===");
            print(content);
            print("=== End of File ===");
            
            // Analyze the content
            analyze_text(content);
        }
    }
}

// Demo text processing
fn demo_text_processing() {
    print("\n=== Text Processing ===");
    
    let sample = "The quick brown fox jumps over the lazy dog.\nThis is line 2.\nAnd here is line 3 with numbers: 123 456!";
    
    print("Sample text:");
    print(sample);
    print("");
    
    analyze_text(sample);
    
    // Process individual lines
    print("\nProcessing lines:");
    
    // Since we can't split properly, let's work with known positions
    let line1 = string_substring(sample, 0, 45);
    print("Line 1:");
    print(line1);
    print("Words in line 1:");
    print_int(count_words(line1));
}

// Demo string to integer conversion
fn demo_string_conversion() {
    print("\n=== String Conversion ===");
    
    let nums = ["42", "100", "0", "-17", "999"];
    let mut i = 0;
    
    while i < 5 {
        let s: String = nums[i];
        let n = string_to_int(s);
        
        print("String:");
        print(s);
        print("Integer value:");
        print_int(n);
        print("Doubled:");
        print_int(n * 2);
        print("");
        
        i = i + 1;
    }
}

fn main() {
    print("=== Palladium Text Processor Demo ===\n");
    
    demo_string_basics();
    demo_string_comparison();
    demo_char_functions();
    demo_string_building();
    demo_file_operations();
    demo_text_processing();
    demo_string_conversion();
    
    print("\n=== Text processor demo complete ===");
}