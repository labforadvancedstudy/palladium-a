// Standard string utilities for Palladium

pub fn trim_start(s: String) -> String {
    let len = string_len(s);
    let mut i = 0;
    
    while i < len {
        let c = string_char_at(s, i);
        if !char_is_whitespace(c) {
            return string_substring(s, i, len);
        }
        i = i + 1;
    }
    
    return "";
}

pub fn trim_end(s: String) -> String {
    let len = string_len(s);
    let mut i = len - 1;
    
    while i >= 0 {
        let c = string_char_at(s, i);
        if !char_is_whitespace(c) {
            return string_substring(s, 0, i + 1);
        }
        i = i - 1;
    }
    
    return "";
}

pub fn trim(s: String) -> String {
    return trim_end(trim_start(s));
}

pub fn starts_with(s: String, prefix: String) -> bool {
    let s_len = string_len(s);
    let p_len = string_len(prefix);
    
    if p_len > s_len {
        return false;
    }
    
    let sub = string_substring(s, 0, p_len);
    return string_eq(sub, prefix);
}

pub fn ends_with(s: String, suffix: String) -> bool {
    let s_len = string_len(s);
    let suf_len = string_len(suffix);
    
    if suf_len > s_len {
        return false;
    }
    
    let sub = string_substring(s, s_len - suf_len, s_len);
    return string_eq(sub, suffix);
}

pub fn contains(s: String, needle: String) -> bool {
    let s_len = string_len(s);
    let n_len = string_len(needle);
    
    if n_len > s_len {
        return false;
    }
    
    let mut i = 0;
    while i <= s_len - n_len {
        let sub = string_substring(s, i, i + n_len);
        if string_eq(sub, needle) {
            return true;
        }
        i = i + 1;
    }
    
    return false;
}