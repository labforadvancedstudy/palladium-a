// File I/O design for Palladium compiler bootstrapping
// Essential functions for reading source files

// Built-in file I/O functions we need:
// - file_open(path: String) -> i64 (file handle, -1 on error)
// - file_read_all(handle: i64) -> String
// - file_read_line(handle: i64) -> String
// - file_write(handle: i64, content: String) -> bool
// - file_close(handle: i64) -> bool
// - file_exists(path: String) -> bool

fn read_source_file(path: String) -> String {
    if file_exists(path) == false {
        print("Error: File not found:");
        print(path);
        return "";
    }
    
    let handle = file_open(path);
    if handle == -1 {
        print("Error: Could not open file");
        return "";
    }
    
    let content = file_read_all(handle);
    file_close(handle);
    
    return content;
}

fn write_output_file(path: String, content: String) -> bool {
    let handle = file_open(path);
    if handle == -1 {
        print("Error: Could not create file");
        return false;
    }
    
    let success = file_write(handle, content);
    file_close(handle);
    
    return success;
}

// Example: Simple file processor
fn process_file(input_path: String, output_path: String) {
    let content = read_source_file(input_path);
    if string_len(content) == 0 {
        return;
    }
    
    // Process content (e.g., compile it)
    let processed = string_concat("// Processed: ", content);
    
    if write_output_file(output_path, processed) {
        print("Successfully wrote output file");
    } else {
        print("Failed to write output file");
    }
}

// Example: Line-by-line reader
fn count_lines(path: String) -> i64 {
    let handle = file_open(path);
    if handle == -1 {
        return 0;
    }
    
    let mut count = 0;
    let line = file_read_line(handle);
    while string_len(line) > 0 {
        count = count + 1;
        line = file_read_line(handle);
    }
    
    file_close(handle);
    return count;
}

fn main() {
    print("Testing file I/O functions:");
    
    // Test file existence
    if file_exists("test.txt") {
        print("test.txt exists");
    } else {
        print("test.txt does not exist");
    }
    
    // Test reading a file
    let content = read_source_file("examples/hello.pd");
    if string_len(content) > 0 {
        print("Successfully read file");
        print("First 50 chars:");
        let preview = string_substring(content, 0, 50);
        print(preview);
    }
    
    // Test writing a file
    let test_content = "Hello from Palladium!\nThis is a test file.";
    if write_output_file("test_output.txt", test_content) {
        print("Successfully wrote test file");
    }
    
    // Test line counting
    let lines = count_lines("examples/hello.pd");
    print("Lines in file:");
    print_int(lines);
}