// String manipulation design for Palladium
// Essential functions for building a compiler

// Built-in string functions we need to implement:
// - string_len(s: String) -> i64
// - string_concat(s1: String, s2: String) -> String
// - string_eq(s1: String, s2: String) -> bool
// - string_char_at(s: String, index: i64) -> i64 (char as ASCII)
// - string_substring(s: String, start: i64, end: i64) -> String
// - string_from_char(c: i64) -> String
// - char_is_digit(c: i64) -> bool
// - char_is_alpha(c: i64) -> bool
// - char_is_whitespace(c: i64) -> bool
// - string_to_int(s: String) -> i64

fn test_string_basics() {
    let s = "Hello, World!";
    let len = string_len(s);
    print("Length:");
    print_int(len); // Should print 13
    
    let s1 = "Hello, ";
    let s2 = "World!";
    let combined = string_concat(s1, s2);
    print(combined); // Should print "Hello, World!"
    
    let eq = string_eq(s1, s1);
    if eq {
        print("Strings are equal");
    }
}

fn test_char_operations() {
    let s = "ABC123";
    let c0 = string_char_at(s, 0); // 'A' = 65
    let c3 = string_char_at(s, 3); // '1' = 49
    
    print_int(c0); // 65
    print_int(c3); // 49
    
    if char_is_alpha(c0) {
        print("A is alphabetic");
    }
    
    if char_is_digit(c3) {
        print("1 is a digit");
    }
}

fn test_substring() {
    let s = "Hello, World!";
    let sub = string_substring(s, 0, 5);
    print(sub); // "Hello"
    
    let world = string_substring(s, 7, 12);
    print(world); // "World"
}

fn test_string_building() {
    // Building strings character by character
    let a = string_from_char(65); // "A"
    let b = string_from_char(66); // "B"
    let ab = string_concat(a, b);
    print(ab); // "AB"
}

fn test_string_to_int() {
    let num_str = "42";
    let num = string_to_int(num_str);
    print_int(num); // 42
    
    let neg_str = "-17";
    let neg = string_to_int(neg_str);
    print_int(neg); // -17
}

// Example: Simple tokenizer using string functions
fn is_identifier_char(c: i64) -> bool {
    return char_is_alpha(c) || char_is_digit(c) || c == 95; // underscore
}

fn tokenize_identifier(input: String, start: i64) -> String {
    let len = string_len(input);
    let mut end = start;
    
    while end < len {
        let c = string_char_at(input, end);
        if is_identifier_char(c) == false {
            break;
        }
        end = end + 1;
    }
    
    return string_substring(input, start, end);
}

fn main() {
    print("Testing string functions for bootstrapping:");
    
    test_string_basics();
    test_char_operations();
    test_substring();
    test_string_building();
    test_string_to_int();
    
    // Test tokenizer helper
    let code = "let x = 42;";
    let ident = tokenize_identifier(code, 4); // Start at 'x'
    print("Tokenized identifier:");
    print(ident); // Should print "x"
}