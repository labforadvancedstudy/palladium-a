// Complex struct example with arrays
struct Point {
    x: i64,
    y: i64,
}

struct Rectangle {
    width: i64,
    height: i64,
}

fn main() {
    // Array of structs
    let points = [
        Point { x: 1, y: 1 },
        Point { x: 2, y: 4 },
        Point { x: 3, y: 9 }
    ];
    
    // Iterate over array of structs
    print("Points in array:");
    for p in points {
        print("Point:");
        print_int(p.x);
        print_int(p.y);
    }
    
    // Calculate area of a rectangle
    let rect = Rectangle { width: 10, height: 20 };
    let area = rect.width * rect.height;
    print("");
    print("Rectangle area:");
    print_int(area);
    
    // Work with individual rectangles
    let mut rect1 = Rectangle { width: 5, height: 5 };
    let mut rect2 = Rectangle { width: 10, height: 10 };
    
    // Update the first rectangle
    rect1.width = 15;
    rect1.height = 15;
    
    print("");
    print("Updated rectangle area:");
    print_int(rect1.width * rect1.height);
    
    // Function with struct parameter example
    let p = Point { x: 100, y: 200 };
    print_point(p);
}

// Function that takes a struct as parameter
fn print_point(p: Point) {
    print("");
    print("Point from function:");
    print("x:");
    print_int(p.x);
    print("y:");
    print_int(p.y);
}