// Simple pattern matching test with supported patterns

enum Option {
    Some(i64),
    None,
}

fn test_option_some() {
    let opt = Option::Some(100);
    
    match opt {
        Option::Some(value) => {
            print("Got value:");
            print_int(value);
        }
        Option::None => {
            print("Got None");
        }
    }
}

fn test_option_none() {
    let opt = Option::None;
    
    match opt {
        Option::Some(value) => {
            print("Got value:");
            print_int(value);
        }
        Option::None => {
            print("Got None");
        }
    }
}

fn test_wildcard() {
    let x = Option::Some(42);
    
    // Wildcard pattern
    match x {
        _ => print("Matched anything with wildcard"),
    }
}

fn main() {
    print("Testing Option::Some:");
    test_option_some();
    
    print("Testing Option::None:");
    test_option_none();
    
    print("Testing wildcard:");
    test_wildcard();
    
    print("Pattern matching test complete!");
}