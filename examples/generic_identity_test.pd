// Test generic type inference and monomorphization

fn identity<T>(x: T) -> T {
    return x;
}

fn pair<T, U>(first: T, second: U) -> T {
    return first;
}

fn main() {
    // Should infer T = i64
    let a = identity(42);
    print_int(a);
    
    // Should infer T = String  
    let b = identity("Hello generics!");
    print(b);
    
    // Should infer T = i64, U = String
    let c = pair(100, "second");
    print_int(c);
    
    // Should infer T = bool, U = i64
    let d = pair(true, 42);
    if d {
        print("It's true!");
    }
}